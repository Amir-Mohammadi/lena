using System;
using Microsoft.EntityFrameworkCore.Migrations;

namespace lena.Migrations
{
    public partial class Init : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "ApiInfos",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Url = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Param = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    SortTypeName = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    SortTypeFieldName = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ApiInfos", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ApplicationSettings",
                columns: table => new
                {
                    SettingKey = table.Column<short>(type: "smallint", nullable: false),
                    SettingKeyName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Value = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ApplicationSettings", x => x.SettingKey);
                });

            migrationBuilder.CreateTable(
                name: "BankOrderContractTypes",
                columns: table => new
                {
                    Id = table.Column<short>(type: "smallint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Title = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BankOrderContractTypes", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "BankOrderIssueTypes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BankOrderIssueTypes", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "BankOrderStatusTypes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    Code = table.Column<string>(type: "nvarchar(max)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BankOrderStatusTypes", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Banks",
                columns: table => new
                {
                    Id = table.Column<byte>(type: "tinyint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Title = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Banks", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntityDocumentTypes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Title = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    EntityType = table.Column<byte>(type: "tinyint", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntityDocumentTypes", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "BillOfMaterialDocumentTypes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Title = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BillOfMaterialDocumentTypes", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Calendars",
                columns: table => new
                {
                    Date = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    IsWorkingDay = table.Column<bool>(type: "bit", nullable: false),
                    IsHoliday = table.Column<bool>(type: "bit", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Calendars", x => x.Date);
                });

            migrationBuilder.CreateTable(
                name: "ContactTypes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Type = table.Column<byte>(type: "tinyint", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    EssentialContactType = table.Column<byte>(type: "tinyint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ContactTypes", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Countries",
                columns: table => new
                {
                    Id = table.Column<byte>(type: "tinyint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Title = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Countries", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Currencies",
                columns: table => new
                {
                    Id = table.Column<byte>(type: "tinyint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Title = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Code = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Sign = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IsMain = table.Column<bool>(type: "bit", nullable: false),
                    DecimalDigitCount = table.Column<byte>(type: "tinyint", nullable: false),
                    Type = table.Column<byte>(type: "tinyint", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Currencies", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Customhouses",
                columns: table => new
                {
                    Id = table.Column<short>(type: "smallint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Title = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Customhouses", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Departments",
                columns: table => new
                {
                    Id = table.Column<short>(type: "smallint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ParentDepartmentId = table.Column<short>(type: "smallint", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Departments", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Departments_Departments_ParentDepartmentId",
                        column: x => x.ParentDepartmentId,
                        principalTable: "Departments",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DocumentResults",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FileStream = table.Column<byte[]>(type: "varbinary(max)", nullable: true),
                    Name = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: false),
                    IsDirectory = table.Column<bool>(type: "bit", nullable: false),
                    FilePath = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    FileType = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CreationTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DocumentResults", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Documents",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    FileSize = table.Column<double>(type: "float", nullable: false),
                    FileType = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    FileStream = table.Column<byte[]>(type: "varbinary(max)", nullable: true),
                    CreationTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Documents", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "DocumentTypes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DocumentTypes", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "EmployeeWorkDetailView",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Date = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UtcDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    PersianDate = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    EmployeeCode = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    FirstEnterTime = table.Column<DateTime>(type: "datetime2", nullable: true),
                    LastExitTime = table.Column<DateTime>(type: "datetime2", nullable: true),
                    WorkTime = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeeWorkDetailView", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "EnactmentActionProcesses",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EnactmentActionProcesses", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ExitReceiptRequestTypes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Title = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AutoConfirm = table.Column<bool>(type: "bit", nullable: false),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ExitReceiptRequestTypes", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "File",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    FileName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    FileType = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    FileStream = table.Column<byte[]>(type: "varbinary(max)", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_File", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "FinancialTransactionTypes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Title = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    FinancialTransactionLevel = table.Column<byte>(type: "tinyint", nullable: false),
                    Factor = table.Column<int>(type: "int", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    RollbackFinancialTransactionTypeId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinancialTransactionTypes", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinancialTransactionTypes_FinancialTransactionTypes_RollbackFinancialTransactionTypeId",
                        column: x => x.RollbackFinancialTransactionTypeId,
                        principalTable: "FinancialTransactionTypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Forwarders",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Forwarders", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "HowToBuys",
                columns: table => new
                {
                    Id = table.Column<short>(type: "smallint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Title = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HowToBuys", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "LadingBankOrderStatus",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LadingBankOrderStatus", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "LadingCustomhouseStatuses",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LadingCustomhouseStatuses", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "NotificationGroups",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_NotificationGroups", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "OperationTypes",
                columns: table => new
                {
                    Id = table.Column<byte>(type: "tinyint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Title = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Symbol = table.Column<byte[]>(type: "varbinary(max)", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationTypes", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "OrderTypes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OrderTypes", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "PaymentTypes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    IsActive = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PaymentTypes", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Posts",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Title = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PostId = table.Column<int>(type: "int", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Posts", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Posts_Posts_PostId",
                        column: x => x.PostId,
                        principalTable: "Posts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProductionOperationEmployeeGroups",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    HashedEmployee = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductionOperationEmployeeGroups", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ProductionPlanDetailLevels",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ParentId = table.Column<int>(type: "int", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductionPlanDetailLevels", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProductionPlanDetailLevels_ProductionPlanDetailLevels_ParentId",
                        column: x => x.ParentId,
                        principalTable: "ProductionPlanDetailLevels",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProductionSteps",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ProductivityImpactFactor = table.Column<int>(type: "int", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductionSteps", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ProductionYears",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<string>(type: "nchar(1)", fixedLength: true, maxLength: 1, nullable: true),
                    Year = table.Column<DateTime>(type: "datetime2", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductionYears", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ProjectERPCategories",
                columns: table => new
                {
                    Id = table.Column<short>(type: "smallint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    CreateDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProjectERPCategories", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ProjectERPDocumentTypes",
                columns: table => new
                {
                    Id = table.Column<short>(type: "smallint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    CreateDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProjectERPDocumentTypes", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ProjectERPEventActionTypes",
                columns: table => new
                {
                    Id = table.Column<short>(type: "smallint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProjectERPEventActionTypes", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ProjectERPEventCategories",
                columns: table => new
                {
                    Id = table.Column<short>(type: "smallint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProjectERPEventCategories", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ProjectERPLabeles",
                columns: table => new
                {
                    Id = table.Column<short>(type: "smallint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    Color = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProjectERPLabeles", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ProjectERPPhases",
                columns: table => new
                {
                    Id = table.Column<short>(type: "smallint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProjectERPPhases", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ProjectERPTaskCategories",
                columns: table => new
                {
                    Id = table.Column<short>(type: "smallint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    CreateDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProjectERPTaskCategories", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ProjectERPTypes",
                columns: table => new
                {
                    Id = table.Column<short>(type: "smallint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    CreateDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProjectERPTypes", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "PurchaseOrderPlanCodeView",
                columns: table => new
                {
                    PurchaseOrderId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PlanCodes = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PurchaseOrderPlanCodeView", x => x.PurchaseOrderId);
                });

            migrationBuilder.CreateTable(
                name: "PurchaseOrderResponsibleView",
                columns: table => new
                {
                    PurchaseOrderId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ResponsibleFullNames = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PurchaseOrderResponsibleView", x => x.PurchaseOrderId);
                });

            migrationBuilder.CreateTable(
                name: "QualityControlTests",
                columns: table => new
                {
                    Id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_QualityControlTests", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "QualityControlTestUnits",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_QualityControlTestUnits", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Reports",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Reports", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "RiskParameters",
                columns: table => new
                {
                    OccurrenceSeverityStatus = table.Column<byte>(type: "tinyint", nullable: false),
                    OccurrenceProbabilityStatus = table.Column<byte>(type: "tinyint", nullable: false),
                    RiskLevelStatus = table.Column<byte>(type: "tinyint", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RiskParameters", x => new { x.OccurrenceSeverityStatus, x.OccurrenceProbabilityStatus });
                });

            migrationBuilder.CreateTable(
                name: "ScrumTaskTypes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ScrumTaskTypes", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "SecurityActionGroups",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DisplayName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SecurityActionGroups", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "StuffFractionResults",
                columns: table => new
                {
                    StuffId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StuffName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    StuffTitle = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    StuffNoun = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    StuffCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    StuffFaultyPercentage = table.Column<double>(type: "float", nullable: false),
                    UnitId = table.Column<byte>(type: "tinyint", nullable: false),
                    UnitName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    UnitTypeId = table.Column<byte>(type: "tinyint", nullable: false),
                    UnitTypeName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    StuffStockSafety = table.Column<int>(type: "int", nullable: false),
                    AvailableAmount = table.Column<double>(type: "float", nullable: false),
                    BlockedAmount = table.Column<double>(type: "float", nullable: false),
                    PlanAmount = table.Column<double>(type: "float", nullable: false),
                    QualityControlAmount = table.Column<double>(type: "float", nullable: false),
                    WasteAmount = table.Column<double>(type: "float", nullable: false),
                    TotalAmount = table.Column<double>(type: "float", nullable: false),
                    RemainedAmount = table.Column<double>(type: "float", nullable: false),
                    BeforePeriodPlanPlusAmount = table.Column<double>(type: "float", nullable: false),
                    BeforePeriodPlanMinusAmount = table.Column<double>(type: "float", nullable: false),
                    BeforePeriodPlanAmount = table.Column<double>(type: "float", nullable: false),
                    PeriodPlanPlusAmount = table.Column<double>(type: "float", nullable: false),
                    PeriodPlanMinusAmount = table.Column<double>(type: "float", nullable: false),
                    PeriodPlanAmount = table.Column<double>(type: "float", nullable: false),
                    AfterPeriodPlanPlusAmount = table.Column<double>(type: "float", nullable: false),
                    AfterPeriodPlanMinusAmount = table.Column<double>(type: "float", nullable: false),
                    AfterPeriodPlanAmount = table.Column<double>(type: "float", nullable: false),
                    Status = table.Column<byte>(type: "tinyint", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    BeforePeriodPlanConsumeAmount = table.Column<double>(type: "float", nullable: false),
                    BeforePeriodPlanProduceAmount = table.Column<double>(type: "float", nullable: false),
                    BeforePeriodPlanSaleOrderAmount = table.Column<double>(type: "float", nullable: false),
                    BeforePeriodPlanPurchaseRequestAmount = table.Column<double>(type: "float", nullable: false),
                    BeforePeriodPlanPurchaseOrderAmount = table.Column<double>(type: "float", nullable: false),
                    BeforePeriodPlanCargoAmount = table.Column<double>(type: "float", nullable: false),
                    PeriodPlanConsumeAmount = table.Column<double>(type: "float", nullable: false),
                    PeriodPlanProduceAmount = table.Column<double>(type: "float", nullable: false),
                    PeriodPlanSaleOrderAmount = table.Column<double>(type: "float", nullable: false),
                    PeriodPlanPurchaseRequestAmount = table.Column<double>(type: "float", nullable: false),
                    PeriodPlanPurchaseOrderAmount = table.Column<double>(type: "float", nullable: false),
                    PeriodPlanCargoAmount = table.Column<double>(type: "float", nullable: false),
                    AfterPeriodPlanConsumeAmount = table.Column<double>(type: "float", nullable: false),
                    AfterPeriodPlanProduceAmount = table.Column<double>(type: "float", nullable: false),
                    AfterPeriodPlanSaleOrderAmount = table.Column<double>(type: "float", nullable: false),
                    AfterPeriodPlanPurchaseRequestAmount = table.Column<double>(type: "float", nullable: false),
                    AfterPeriodPlanPurchaseOrderAmount = table.Column<double>(type: "float", nullable: false),
                    AfterPeriodPlanCargoAmount = table.Column<double>(type: "float", nullable: false),
                    PlanCargoAmount = table.Column<double>(type: "float", nullable: false),
                    PlanConsumeAmount = table.Column<double>(type: "float", nullable: false),
                    PlanProduceAmount = table.Column<double>(type: "float", nullable: false),
                    PlanSaleOrderAmount = table.Column<double>(type: "float", nullable: false),
                    PlanPurchaseOrderAmount = table.Column<double>(type: "float", nullable: false),
                    PlanPurchaseRequestAmount = table.Column<double>(type: "float", nullable: false),
                    BufferRemainingAmount = table.Column<double>(type: "float", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StuffFractionResults", x => x.StuffId);
                });

            migrationBuilder.CreateTable(
                name: "StuffHSGroups",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Title = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StuffHSGroups", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TagTypes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TagTypes", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TerminalTicketRegisteries",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Date = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    SessionId = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Value = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TerminalTicketRegisteries", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TestEquipments",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TestEquipments", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TestImportanceDegrees",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TestImportanceDegrees", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TestOperations",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Code = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TestOperations", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TransactionTypes",
                columns: table => new
                {
                    Id = table.Column<short>(type: "smallint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Factor = table.Column<int>(type: "int", nullable: false),
                    TransactionLevel = table.Column<byte>(type: "tinyint", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    RollbackTransactionTypeId = table.Column<short>(type: "smallint", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TransactionTypes", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TransactionTypes_TransactionTypes_RollbackTransactionTypeId",
                        column: x => x.RollbackTransactionTypeId,
                        principalTable: "TransactionTypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "UnitTypes",
                columns: table => new
                {
                    Id = table.Column<byte>(type: "tinyint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UnitTypes", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "UserGroups",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserGroups", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Users",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserName = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    Password = table.Column<string>(type: "nvarchar(512)", maxLength: 512, nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    DeletedAt = table.Column<DateTime>(type: "datetime2", nullable: true),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    IsLocked = table.Column<bool>(type: "bit", nullable: false),
                    LockOutDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    LoginFailedCount = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    PasswordExpirationDate = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    HasAccessFromInternet = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Users", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "WarehouseFiscalPeriods",
                columns: table => new
                {
                    Id = table.Column<short>(type: "smallint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    FromDate = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    ToDate = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    IsClosed = table.Column<bool>(type: "bit", nullable: false),
                    IsCurrent = table.Column<bool>(type: "bit", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WarehouseFiscalPeriods", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "WarehouseInventoryResults",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    WarehouseId = table.Column<short>(type: "smallint", nullable: false),
                    WarehouseName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    StuffId = table.Column<int>(type: "int", nullable: false),
                    StuffSerialCode = table.Column<long>(type: "bigint", nullable: true),
                    StuffCategoryId = table.Column<short>(type: "smallint", nullable: false),
                    StuffCategoryName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    StuffCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    StuffName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    BillOfMaterialVersion = table.Column<short>(type: "smallint", nullable: true),
                    BillOfMaterialTitle = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    TotalAmount = table.Column<double>(type: "float", nullable: true),
                    AvailableAmount = table.Column<double>(type: "float", nullable: true),
                    BlockedAmount = table.Column<double>(type: "float", nullable: true),
                    QualityControlAmount = table.Column<double>(type: "float", nullable: true),
                    WasteAmount = table.Column<double>(type: "float", nullable: true),
                    SerialBufferAmount = table.Column<double>(type: "float", nullable: true),
                    UnitId = table.Column<byte>(type: "tinyint", nullable: false),
                    DecimalDigitCount = table.Column<byte>(type: "tinyint", nullable: false),
                    UnitName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Serial = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    SerialStatus = table.Column<byte>(type: "tinyint", nullable: true),
                    SerialProfileDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    StuffType = table.Column<byte>(type: "tinyint", nullable: false),
                    StockPlaceCodes = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    StockPlaceTitles = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    QualityControlDescription = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    SerialProfileCode = table.Column<int>(type: "int", nullable: true),
                    WarehouseEnterTime = table.Column<DateTime>(type: "datetime2", nullable: true),
                    IssueConfirmerUserId = table.Column<int>(type: "int", nullable: true),
                    IssueConfirmerUserFullName = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    IssueUserId = table.Column<int>(type: "int", nullable: true),
                    IssueUserFullName = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    UnitRialPrice = table.Column<double>(type: "float", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WarehouseInventoryResults", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "WarehousePriceReportResults",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    WarehouseId = table.Column<int>(type: "int", nullable: true),
                    WarehouseName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    StuffCategoryId = table.Column<int>(type: "int", nullable: true),
                    StuffCategoryName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    StuffId = table.Column<int>(type: "int", nullable: true),
                    StuffCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    StuffName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Serial = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    StuffSerialCode = table.Column<long>(type: "bigint", nullable: true),
                    AvailableAmount = table.Column<double>(type: "float", nullable: false),
                    BlockedAmount = table.Column<double>(type: "float", nullable: false),
                    QualityControlAmount = table.Column<double>(type: "float", nullable: false),
                    WasteAmount = table.Column<double>(type: "float", nullable: false),
                    SerialBufferAmount = table.Column<double>(type: "float", nullable: false),
                    TotalAmount = table.Column<double>(type: "float", nullable: false),
                    UnitId = table.Column<int>(type: "int", nullable: true),
                    UnitName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    StuffLastTransactionDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    LastStuffPrice = table.Column<double>(type: "float", nullable: true),
                    LastStuffPriceDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TotalAmountPrice = table.Column<double>(type: "float", nullable: true),
                    CurrencyId = table.Column<int>(type: "int", nullable: true),
                    CurrencyCode = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CurrencyTitle = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CurrencySign = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CurrencyDecimalDigitCount = table.Column<byte>(type: "tinyint", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WarehousePriceReportResults", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "WarrantyExpirationExceptionTypes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Title = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    FreeOfCharge = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WarrantyExpirationExceptionTypes", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "WorkShifts",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WorkShifts", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Cities",
                columns: table => new
                {
                    Id = table.Column<short>(type: "smallint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Title = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CountryId = table.Column<byte>(type: "tinyint", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cities", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Cities_Countries_CountryId",
                        column: x => x.CountryId,
                        principalTable: "Countries",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "FinancialAccounts",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CurrencyId = table.Column<byte>(type: "tinyint", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinancialAccounts", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinancialAccounts_Currencies_CurrencyId",
                        column: x => x.CurrencyId,
                        principalTable: "Currencies",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "EvaluationCategories",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Title = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DepartmentId = table.Column<short>(type: "smallint", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EvaluationCategories", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EvaluationCategories_Departments_DepartmentId",
                        column: x => x.DepartmentId,
                        principalTable: "Departments",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Indicators",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Type = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Target = table.Column<double>(type: "float", nullable: false),
                    Weight = table.Column<double>(type: "float", nullable: false),
                    ApiInfoId = table.Column<int>(type: "int", nullable: false),
                    Formula = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DepartmentId = table.Column<short>(type: "smallint", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Indicators", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Indicators_ApiInfos_ApiInfoId",
                        column: x => x.ApiInfoId,
                        principalTable: "ApiInfos",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Indicators_Departments_DepartmentId",
                        column: x => x.DepartmentId,
                        principalTable: "Departments",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "IndicatorWeights",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Code = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    DepartmentId = table.Column<short>(type: "smallint", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_IndicatorWeights", x => x.Id);
                    table.ForeignKey(
                        name: "FK_IndicatorWeights_Departments_DepartmentId",
                        column: x => x.DepartmentId,
                        principalTable: "Departments",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Warehouses",
                columns: table => new
                {
                    Id = table.Column<short>(type: "smallint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    IsDeleted = table.Column<bool>(type: "bit", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    DepartmentId = table.Column<short>(type: "smallint", nullable: false),
                    FIFO = table.Column<bool>(type: "bit", nullable: false),
                    DisplayOrder = table.Column<int>(type: "int", nullable: true),
                    WarehouseType = table.Column<byte>(type: "tinyint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Warehouses", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Warehouses_Departments_DepartmentId",
                        column: x => x.DepartmentId,
                        principalTable: "Departments",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "HowToBuyDetails",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Title = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Order = table.Column<int>(type: "int", nullable: false),
                    HowToBuyId = table.Column<short>(type: "smallint", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_HowToBuyDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_HowToBuyDetails_HowToBuys_HowToBuyId",
                        column: x => x.HowToBuyId,
                        principalTable: "HowToBuys",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Operations",
                columns: table => new
                {
                    Id = table.Column<short>(type: "smallint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Title = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Code = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    OperationTypeId = table.Column<byte>(type: "tinyint", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    IsQualityControl = table.Column<bool>(type: "bit", nullable: false),
                    IsCorrective = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Operations", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Operations_OperationTypes_OperationTypeId",
                        column: x => x.OperationTypeId,
                        principalTable: "OperationTypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SecurityActions",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(512)", maxLength: 512, nullable: false),
                    ActionName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    SecurityActionGroupId = table.Column<int>(type: "int", nullable: false),
                    IsPublicAction = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SecurityActions", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SecurityActions_SecurityActionGroups_SecurityActionGroupId",
                        column: x => x.SecurityActionGroupId,
                        principalTable: "SecurityActionGroups",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "QualityControlTestEquipments",
                columns: table => new
                {
                    QualityControlTestId = table.Column<long>(type: "bigint", nullable: false),
                    TestEquipmentId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_QualityControlTestEquipments", x => new { x.TestEquipmentId, x.QualityControlTestId });
                    table.ForeignKey(
                        name: "FK_QualityControlTestEquipments_QualityControlTests_QualityControlTestId",
                        column: x => x.QualityControlTestId,
                        principalTable: "QualityControlTests",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_QualityControlTestEquipments_TestEquipments_TestEquipmentId",
                        column: x => x.TestEquipmentId,
                        principalTable: "TestEquipments",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "QualityControlTestImportanceDegrees",
                columns: table => new
                {
                    QualityControlTestId = table.Column<long>(type: "bigint", nullable: false),
                    TestImportanceDegreeId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_QualityControlTestImportanceDegrees", x => new { x.TestImportanceDegreeId, x.QualityControlTestId });
                    table.ForeignKey(
                        name: "FK_QualityControlTestImportanceDegrees_QualityControlTests_QualityControlTestId",
                        column: x => x.QualityControlTestId,
                        principalTable: "QualityControlTests",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_QualityControlTestImportanceDegrees_TestImportanceDegrees_TestImportanceDegreeId",
                        column: x => x.TestImportanceDegreeId,
                        principalTable: "TestImportanceDegrees",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "QualityControlTestOperations",
                columns: table => new
                {
                    QualityControlTestId = table.Column<long>(type: "bigint", nullable: false),
                    TestOperationId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_QualityControlTestOperations", x => new { x.TestOperationId, x.QualityControlTestId });
                    table.ForeignKey(
                        name: "FK_QualityControlTestOperations_QualityControlTests_QualityControlTestId",
                        column: x => x.QualityControlTestId,
                        principalTable: "QualityControlTests",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_QualityControlTestOperations_TestOperations_TestOperationId",
                        column: x => x.TestOperationId,
                        principalTable: "TestOperations",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Units",
                columns: table => new
                {
                    Id = table.Column<byte>(type: "tinyint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IsMainUnit = table.Column<bool>(type: "bit", nullable: false),
                    DecimalDigitCount = table.Column<byte>(type: "tinyint", nullable: false),
                    ConversionRatio = table.Column<double>(type: "float", nullable: false),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    UnitTypeId = table.Column<byte>(type: "tinyint", nullable: false),
                    Symbol = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Units", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Units_UnitTypes_UnitTypeId",
                        column: x => x.UnitTypeId,
                        principalTable: "UnitTypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "LadingBlockers",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Title = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    UserGroupId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LadingBlockers", x => x.Id);
                    table.ForeignKey(
                        name: "FK_LadingBlockers_UserGroups_UserGroupId",
                        column: x => x.UserGroupId,
                        principalTable: "UserGroups",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "QualityControlAccepters",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Title = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    UserGroupId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_QualityControlAccepters", x => x.Id);
                    table.ForeignKey(
                        name: "FK_QualityControlAccepters_UserGroups_UserGroupId",
                        column: x => x.UserGroupId,
                        principalTable: "UserGroups",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StuffPurchaseCategories",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Title = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    StuffDefinitionUserGroupId = table.Column<int>(type: "int", nullable: false),
                    QualityControlUserGroupId = table.Column<int>(type: "int", nullable: false),
                    QualityControlDepartmentId = table.Column<short>(type: "smallint", nullable: false),
                    StuffDefinitionConfirmerUserGroupId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StuffPurchaseCategories", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StuffPurchaseCategories_Departments_QualityControlDepartmentId",
                        column: x => x.QualityControlDepartmentId,
                        principalTable: "Departments",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StuffPurchaseCategories_UserGroups_QualityControlUserGroupId",
                        column: x => x.QualityControlUserGroupId,
                        principalTable: "UserGroups",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StuffPurchaseCategories_UserGroups_StuffDefinitionConfirmerUserGroupId",
                        column: x => x.StuffDefinitionConfirmerUserGroupId,
                        principalTable: "UserGroups",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StuffPurchaseCategories_UserGroups_StuffDefinitionUserGroupId",
                        column: x => x.StuffDefinitionUserGroupId,
                        principalTable: "UserGroups",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ApplicationLogs",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserId = table.Column<int>(type: "int", nullable: true),
                    ClientIP = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    UserAgent = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Action = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    LogTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    RequestEndTime = table.Column<DateTime>(type: "datetime2", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ApplicationLogs", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ApplicationLogs_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntityConfirmTypes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DepartmentId = table.Column<short>(type: "smallint", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: true),
                    ConfirmPageUrl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ConfirmType = table.Column<byte>(type: "tinyint", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntityConfirmTypes", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntityConfirmTypes_Departments_DepartmentId",
                        column: x => x.DepartmentId,
                        principalTable: "Departments",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntityConfirmTypes_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CostCenters",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Status = table.Column<byte>(type: "tinyint", nullable: false),
                    ConfirmDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ConfirmerUserId = table.Column<int>(type: "int", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CostCenters", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CostCenters_Users_ConfirmerUserId",
                        column: x => x.ConfirmerUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "EmployeeEvaluationPeriods",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Title = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    FromDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    ToDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    IsActive = table.Column<bool>(type: "bit", nullable: true),
                    CreatedDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    Status = table.Column<byte>(type: "tinyint", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeeEvaluationPeriods", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EmployeeEvaluationPeriods_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "EntityLogs",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserId = table.Column<int>(type: "int", nullable: true),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    Ip = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Api = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ApiParams = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "varbinary(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EntityLogs", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EntityLogs_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "FinancialLimits",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Allowance = table.Column<int>(type: "int", nullable: false),
                    IsArchive = table.Column<bool>(type: "bit", nullable: false),
                    CurrencyId = table.Column<byte>(type: "tinyint", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinancialLimits", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinancialLimits_Currencies_CurrencyId",
                        column: x => x.CurrencyId,
                        principalTable: "Currencies",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FinancialLimits_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "FinancialTransactionBatches",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinancialTransactionBatches", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinancialTransactionBatches_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Memberships",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    UserGroupId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Memberships", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Memberships_UserGroups_UserGroupId",
                        column: x => x.UserGroupId,
                        principalTable: "UserGroups",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Memberships_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Messages",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Number = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    SendDate = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    SenderUserId = table.Column<int>(type: "int", nullable: false),
                    Title = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Content = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IsSent = table.Column<bool>(type: "bit", nullable: false),
                    MessageAccessType = table.Column<byte>(type: "tinyint", nullable: false),
                    IsArchive = table.Column<bool>(type: "bit", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    DeletedAt = table.Column<DateTime>(type: "datetime2", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Messages", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Messages_Users_SenderUserId",
                        column: x => x.SenderUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "MessageSends",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    MessageId = table.Column<int>(type: "int", nullable: false),
                    ReciverUserId = table.Column<int>(type: "int", nullable: false),
                    MessageSendType = table.Column<byte>(type: "tinyint", nullable: false),
                    IsRead = table.Column<bool>(type: "bit", nullable: false),
                    ReadDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    IsArchive = table.Column<bool>(type: "bit", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    DeletedAt = table.Column<DateTime>(type: "datetime2", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MessageSends", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MessageSends_Users_ReciverUserId",
                        column: x => x.ReciverUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "MinutesMeetings",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    RegistrantUserId = table.Column<int>(type: "int", nullable: false),
                    RegistrationDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    MeetingDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Place = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Agenda = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    SecretaryUserId = table.Column<int>(type: "int", nullable: false),
                    BossUserId = table.Column<int>(type: "int", nullable: true),
                    IsConfidential = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MinutesMeetings", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MinutesMeetings_Users_BossUserId",
                        column: x => x.BossUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MinutesMeetings_Users_RegistrantUserId",
                        column: x => x.RegistrantUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MinutesMeetings_Users_SecretaryUserId",
                        column: x => x.SecretaryUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "OrganizationPosts",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ParentId = table.Column<int>(type: "int", nullable: true),
                    Title = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: false),
                    Description = table.Column<string>(type: "nvarchar(512)", maxLength: 512, nullable: true),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    IsAdmin = table.Column<bool>(type: "bit", nullable: false),
                    CreatorId = table.Column<int>(type: "int", nullable: false),
                    CreationTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    UserGroupId = table.Column<int>(type: "int", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OrganizationPosts", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OrganizationPosts_OrganizationPosts_ParentId",
                        column: x => x.ParentId,
                        principalTable: "OrganizationPosts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OrganizationPosts_UserGroups_UserGroupId",
                        column: x => x.UserGroupId,
                        principalTable: "UserGroups",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OrganizationPosts_Users_CreatorId",
                        column: x => x.CreatorId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PermissionRequests",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    RegistrarUserId = table.Column<int>(type: "int", nullable: true),
                    RegisterDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    IntendedUserId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PermissionRequests", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PermissionRequests_Users_IntendedUserId",
                        column: x => x.IntendedUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PermissionRequests_Users_RegistrarUserId",
                        column: x => x.RegistrarUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PlanCodes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    Code = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    RegisterDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    RegisterarUserId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PlanCodes", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PlanCodes_Users_RegisterarUserId",
                        column: x => x.RegisterarUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Printers",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    NameInSystem = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    NetworkAddress = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Manufacture = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Model = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Logo = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IsColored = table.Column<bool>(type: "bit", nullable: false),
                    PrinterType = table.Column<byte>(type: "tinyint", nullable: false),
                    Location = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    SupportLan = table.Column<bool>(type: "bit", nullable: false),
                    ModuleName = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    IsSupportTemplatePrint = table.Column<bool>(type: "bit", nullable: false),
                    Setting = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CreationTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    CreatorUserId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Printers", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Printers_Users_CreatorUserId",
                        column: x => x.CreatorUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProposalTypes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Title = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProposalTypes", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProposalTypes_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PurchaseOrderSteps",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    AllowUploadDocument = table.Column<bool>(type: "bit", nullable: false),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PurchaseOrderSteps", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PurchaseOrderSteps_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PurchaseRequestSteps",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    AllowUploadDocument = table.Column<bool>(type: "bit", nullable: false),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PurchaseRequestSteps", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PurchaseRequestSteps_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ReportVersions",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ApiUrl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReportContent = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IsPublished = table.Column<bool>(type: "bit", nullable: false),
                    CreationTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    CreatorUserId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    ReportId = table.Column<int>(type: "int", nullable: false),
                    CultureName = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    IsForExport = table.Column<bool>(type: "bit", nullable: false),
                    ExportFormat = table.Column<int>(type: "int", nullable: true),
                    IsBarcodeTemplate = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ReportVersions", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ReportVersions_Reports_ReportId",
                        column: x => x.ReportId,
                        principalTable: "Reports",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ReportVersions_Users_CreatorUserId",
                        column: x => x.CreatorUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StockCheckings",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Title = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    StartDate = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    EndDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Status = table.Column<byte>(type: "tinyint", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    ActiveTagTypeId = table.Column<int>(type: "int", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    ShowInventory = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StockCheckings", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StockCheckings_TagTypes_ActiveTagTypeId",
                        column: x => x.ActiveTagTypeId,
                        principalTable: "TagTypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StockCheckings_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TestConditions",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Condition = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TestConditions", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TestConditions_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TicketSoftwares",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    Subject = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Content = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CreateDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    UpdateDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    IssueLink = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Priority = table.Column<int>(type: "int", nullable: false),
                    Status = table.Column<int>(type: "int", nullable: false),
                    LastedEditorUserId = table.Column<int>(type: "int", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TicketSoftwares", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TicketSoftwares_Users_LastedEditorUserId",
                        column: x => x.LastedEditorUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TicketSoftwares_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TransactionBatches",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TransactionBatches", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TransactionBatches_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "UserMessageRelations",
                columns: table => new
                {
                    FromUserId = table.Column<int>(type: "int", nullable: false),
                    ToUserId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserMessageRelations", x => new { x.FromUserId, x.ToUserId });
                    table.ForeignKey(
                        name: "FK_UserMessageRelations_Users_FromUserId",
                        column: x => x.FromUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_UserMessageRelations_Users_ToUserId",
                        column: x => x.ToUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "UserPosts",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PostId = table.Column<int>(type: "int", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    Date = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    DeleteDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    DeletedAt = table.Column<DateTime>(type: "datetime2", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserPosts", x => x.Id);
                    table.ForeignKey(
                        name: "FK_UserPosts_Posts_PostId",
                        column: x => x.PostId,
                        principalTable: "Posts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_UserPosts_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "UserSettings",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    Key = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Value = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ValueType = table.Column<byte>(type: "tinyint", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserSettings", x => x.Id);
                    table.ForeignKey(
                        name: "FK_UserSettings_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "UserTokens",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    Token = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    RefreshToken = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ExpiresIn = table.Column<DateTime>(type: "datetime2", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserTokens", x => x.Id);
                    table.ForeignKey(
                        name: "FK_UserTokens_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CalendarEvents",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    Duration = table.Column<long>(type: "bigint", nullable: false),
                    Type = table.Column<int>(type: "int", nullable: false),
                    WorkShiftId = table.Column<int>(type: "int", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CalendarEvents", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CalendarEvents_WorkShifts_WorkShiftId",
                        column: x => x.WorkShiftId,
                        principalTable: "WorkShifts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DepartmentWorkShifts",
                columns: table => new
                {
                    WorkShiftId = table.Column<int>(type: "int", nullable: false),
                    DepartmentId = table.Column<short>(type: "smallint", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DepartmentWorkShifts", x => new { x.WorkShiftId, x.DepartmentId });
                    table.ForeignKey(
                        name: "FK_DepartmentWorkShifts_Departments_DepartmentId",
                        column: x => x.DepartmentId,
                        principalTable: "Departments",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DepartmentWorkShifts_WorkShifts_WorkShiftId",
                        column: x => x.WorkShiftId,
                        principalTable: "WorkShifts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Cooperators",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Code = table.Column<string>(type: "nvarchar(25)", maxLength: 25, nullable: true),
                    CityId = table.Column<short>(type: "smallint", nullable: false),
                    CooperatorType = table.Column<int>(type: "int", nullable: false),
                    ProviderType = table.Column<byte>(type: "tinyint", nullable: false),
                    DetailedCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ConfirmationDetailedCode = table.Column<bool>(type: "bit", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cooperators", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Cooperators_Cities_CityId",
                        column: x => x.CityId,
                        principalTable: "Cities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "FinancialAccountDetails",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Account = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Type = table.Column<byte>(type: "tinyint", nullable: false),
                    AccountOwner = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    BankId = table.Column<byte>(type: "tinyint", nullable: false),
                    FinancialAccountId = table.Column<int>(type: "int", nullable: false),
                    IsArchive = table.Column<bool>(type: "bit", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinancialAccountDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinancialAccountDetails_Banks_BankId",
                        column: x => x.BankId,
                        principalTable: "Banks",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FinancialAccountDetails_FinancialAccounts_FinancialAccountId",
                        column: x => x.FinancialAccountId,
                        principalTable: "FinancialAccounts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "EvaluationCategoryItems",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EvaluationCategoryId = table.Column<int>(type: "int", nullable: false),
                    Question = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IsArchive = table.Column<bool>(type: "bit", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EvaluationCategoryItems", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EvaluationCategoryItems_EvaluationCategories_EvaluationCategoryId",
                        column: x => x.EvaluationCategoryId,
                        principalTable: "EvaluationCategories",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "WeightDays",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Day = table.Column<int>(type: "int", nullable: false),
                    Amount = table.Column<double>(type: "float", nullable: false),
                    IndicatorWeightId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WeightDays", x => x.Id);
                    table.ForeignKey(
                        name: "FK_WeightDays_IndicatorWeights_IndicatorWeightId",
                        column: x => x.IndicatorWeightId,
                        principalTable: "IndicatorWeights",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProductionLineRepairUnits",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    WarehouseId = table.Column<short>(type: "smallint", nullable: false),
                    CreationTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductionLineRepairUnits", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProductionLineRepairUnits_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProductionLineRepairUnits_Warehouses_WarehouseId",
                        column: x => x.WarehouseId,
                        principalTable: "Warehouses",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StockPlaces",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Title = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    WarehouseId = table.Column<short>(type: "smallint", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StockPlaces", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StockPlaces_Warehouses_WarehouseId",
                        column: x => x.WarehouseId,
                        principalTable: "Warehouses",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StuffCategories",
                columns: table => new
                {
                    Id = table.Column<short>(type: "smallint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    ParentStuffCategoryId = table.Column<short>(type: "smallint", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    DefaultWarehouseId = table.Column<short>(type: "smallint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StuffCategories", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StuffCategories_StuffCategories_ParentStuffCategoryId",
                        column: x => x.ParentStuffCategoryId,
                        principalTable: "StuffCategories",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StuffCategories_Warehouses_DefaultWarehouseId",
                        column: x => x.DefaultWarehouseId,
                        principalTable: "Warehouses",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "WarehouseExitReceiptTypes",
                columns: table => new
                {
                    WarehouseId = table.Column<short>(type: "smallint", nullable: false),
                    ExitReceiptRequestTypeId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WarehouseExitReceiptTypes", x => new { x.WarehouseId, x.ExitReceiptRequestTypeId });
                    table.ForeignKey(
                        name: "FK_WarehouseExitReceiptTypes_ExitReceiptRequestTypes_ExitReceiptRequestTypeId",
                        column: x => x.ExitReceiptRequestTypeId,
                        principalTable: "ExitReceiptRequestTypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WarehouseExitReceiptTypes_Warehouses_WarehouseId",
                        column: x => x.WarehouseId,
                        principalTable: "Warehouses",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "WarehouseSotreReceiptTypes",
                columns: table => new
                {
                    WarehouseId = table.Column<short>(type: "smallint", nullable: false),
                    StoreReceiptType = table.Column<byte>(type: "tinyint", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WarehouseSotreReceiptTypes", x => new { x.WarehouseId, x.StoreReceiptType });
                    table.ForeignKey(
                        name: "FK_WarehouseSotreReceiptTypes_Warehouses_WarehouseId",
                        column: x => x.WarehouseId,
                        principalTable: "Warehouses",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "WarehouseStuffTypes",
                columns: table => new
                {
                    WarehouseId = table.Column<short>(type: "smallint", nullable: false),
                    StuffType = table.Column<byte>(type: "tinyint", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WarehouseStuffTypes", x => new { x.WarehouseId, x.StuffType });
                    table.ForeignKey(
                        name: "FK_WarehouseStuffTypes_Warehouses_WarehouseId",
                        column: x => x.WarehouseId,
                        principalTable: "Warehouses",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "WarehouseTransactionLevels",
                columns: table => new
                {
                    WareHouserId = table.Column<short>(type: "smallint", nullable: false),
                    TransactionLevel = table.Column<byte>(type: "tinyint", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WarehouseTransactionLevels", x => new { x.WareHouserId, x.TransactionLevel });
                    table.ForeignKey(
                        name: "FK_WarehouseTransactionLevels_Warehouses_WareHouserId",
                        column: x => x.WareHouserId,
                        principalTable: "Warehouses",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProductionFaultTypes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Title = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    OperationId = table.Column<short>(type: "smallint", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductionFaultTypes", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProductionFaultTypes_Operations_OperationId",
                        column: x => x.OperationId,
                        principalTable: "Operations",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ActionParamater",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SecurityActionId = table.Column<int>(type: "int", nullable: false),
                    ParameterKey = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ParameterValue = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CheckParameterValue = table.Column<bool>(type: "bit", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ActionParamater", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ActionParamater_SecurityActions_SecurityActionId",
                        column: x => x.SecurityActionId,
                        principalTable: "SecurityActions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Permissions",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SecurityActionId = table.Column<int>(type: "int", nullable: false),
                    UserGroupId = table.Column<int>(type: "int", nullable: true),
                    UserId = table.Column<int>(type: "int", nullable: true),
                    AccessType = table.Column<byte>(type: "tinyint", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Permissions", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Permissions_SecurityActions_SecurityActionId",
                        column: x => x.SecurityActionId,
                        principalTable: "SecurityActions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Permissions_UserGroups_UserGroupId",
                        column: x => x.UserGroupId,
                        principalTable: "UserGroups",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Permissions_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StuffPurchaseCategoryDetails",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ApplicatorUserGroupId = table.Column<int>(type: "int", nullable: false),
                    ApplicatorConfirmerUserGroupId = table.Column<int>(type: "int", nullable: false),
                    RequestConfirmerUserGroupId = table.Column<int>(type: "int", nullable: true),
                    StuffPurchaseCategoryId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StuffPurchaseCategoryDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StuffPurchaseCategoryDetails_StuffPurchaseCategories_StuffPurchaseCategoryId",
                        column: x => x.StuffPurchaseCategoryId,
                        principalTable: "StuffPurchaseCategories",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StuffPurchaseCategoryDetails_UserGroups_ApplicatorConfirmerUserGroupId",
                        column: x => x.ApplicatorConfirmerUserGroupId,
                        principalTable: "UserGroups",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StuffPurchaseCategoryDetails_UserGroups_ApplicatorUserGroupId",
                        column: x => x.ApplicatorUserGroupId,
                        principalTable: "UserGroups",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StuffPurchaseCategoryDetails_UserGroups_RequestConfirmerUserGroupId",
                        column: x => x.RequestConfirmerUserGroupId,
                        principalTable: "UserGroups",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "EmployeeEvaluationPeriodItems",
                columns: table => new
                {
                    EmployeeEvaluationPeriodId = table.Column<int>(type: "int", nullable: false),
                    EvaluationCategoryId = table.Column<int>(type: "int", nullable: false),
                    Coefficient = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeeEvaluationPeriodItems", x => new { x.EmployeeEvaluationPeriodId, x.EvaluationCategoryId });
                    table.ForeignKey(
                        name: "FK_EmployeeEvaluationPeriodItems_EmployeeEvaluationPeriods_EmployeeEvaluationPeriodId",
                        column: x => x.EmployeeEvaluationPeriodId,
                        principalTable: "EmployeeEvaluationPeriods",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeeEvaluationPeriodItems_EvaluationCategories_EvaluationCategoryId",
                        column: x => x.EvaluationCategoryId,
                        principalTable: "EvaluationCategories",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "FinancialTransactions",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FinancialTransactionBatchId = table.Column<int>(type: "int", nullable: false),
                    FinancialTransactionTypeId = table.Column<int>(type: "int", nullable: false),
                    FinancialAccountId = table.Column<int>(type: "int", nullable: false),
                    EffectDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    Amount = table.Column<double>(type: "float", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ReferenceFinancialTransactionId = table.Column<int>(type: "int", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    DeletedAt = table.Column<DateTime>(type: "datetime2", nullable: true),
                    IsPermanent = table.Column<bool>(type: "bit", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinancialTransactions", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinancialTransactions_FinancialAccounts_FinancialAccountId",
                        column: x => x.FinancialAccountId,
                        principalTable: "FinancialAccounts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FinancialTransactions_FinancialTransactionBatches_FinancialTransactionBatchId",
                        column: x => x.FinancialTransactionBatchId,
                        principalTable: "FinancialTransactionBatches",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FinancialTransactions_FinancialTransactions_ReferenceFinancialTransactionId",
                        column: x => x.ReferenceFinancialTransactionId,
                        principalTable: "FinancialTransactions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FinancialTransactions_FinancialTransactionTypes_FinancialTransactionTypeId",
                        column: x => x.FinancialTransactionTypeId,
                        principalTable: "FinancialTransactionTypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Attachments",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    MessageId = table.Column<int>(type: "int", nullable: false),
                    FileName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Size = table.Column<double>(type: "float", nullable: false),
                    Format = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    FileContent = table.Column<byte[]>(type: "varbinary(max)", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Attachments", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Attachments_Messages_MessageId",
                        column: x => x.MessageId,
                        principalTable: "Messages",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "MessageSends_PostMessageSend",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    PostId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MessageSends_PostMessageSend", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MessageSends_PostMessageSend_MessageSends_Id",
                        column: x => x.Id,
                        principalTable: "MessageSends",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MessageSends_PostMessageSend_Posts_PostId",
                        column: x => x.PostId,
                        principalTable: "Posts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "MessageSends_UserMessageSend",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MessageSends_UserMessageSend", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MessageSends_UserMessageSend_MessageSends_Id",
                        column: x => x.Id,
                        principalTable: "MessageSends",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "MeetingApprovals",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    MinutesMeetingId = table.Column<int>(type: "int", nullable: false),
                    Title = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    OperatorUserId = table.Column<int>(type: "int", nullable: true),
                    GuestOperatorName = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ActionDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ActualDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Status = table.Column<byte>(type: "tinyint", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DocumentId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    OperatorDepartmentId = table.Column<short>(type: "smallint", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MeetingApprovals", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MeetingApprovals_Departments_OperatorDepartmentId",
                        column: x => x.OperatorDepartmentId,
                        principalTable: "Departments",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MeetingApprovals_MinutesMeetings_MinutesMeetingId",
                        column: x => x.MinutesMeetingId,
                        principalTable: "MinutesMeetings",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MeetingApprovals_Users_OperatorUserId",
                        column: x => x.OperatorUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DepartmentManager",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserId = table.Column<int>(type: "int", nullable: true),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    OrganizationPostId = table.Column<int>(type: "int", nullable: true),
                    DepartmentId = table.Column<short>(type: "smallint", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DepartmentManager", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DepartmentManager_Departments_DepartmentId",
                        column: x => x.DepartmentId,
                        principalTable: "Departments",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DepartmentManager_OrganizationPosts_OrganizationPostId",
                        column: x => x.OrganizationPostId,
                        principalTable: "OrganizationPosts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DepartmentManager_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "OrganizationJobs",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Title = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: false),
                    Description = table.Column<string>(type: "nvarchar(512)", maxLength: 512, nullable: true),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    OranizationPostId = table.Column<int>(type: "int", nullable: true),
                    CreatorId = table.Column<int>(type: "int", nullable: false),
                    CreationTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OrganizationJobs", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OrganizationJobs_OrganizationPosts_OranizationPostId",
                        column: x => x.OranizationPostId,
                        principalTable: "OrganizationPosts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OrganizationJobs_Users_CreatorId",
                        column: x => x.CreatorId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PermissionRequestActions",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    PermissionRequestId = table.Column<int>(type: "int", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Status = table.Column<byte>(type: "tinyint", nullable: false),
                    ConfirmationUserId = table.Column<int>(type: "int", nullable: true),
                    SecurityActionId = table.Column<int>(type: "int", nullable: true),
                    AccessType = table.Column<byte>(type: "tinyint", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PermissionRequestActions", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PermissionRequestActions_PermissionRequests_PermissionRequestId",
                        column: x => x.PermissionRequestId,
                        principalTable: "PermissionRequests",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PermissionRequestActions_SecurityActions_SecurityActionId",
                        column: x => x.SecurityActionId,
                        principalTable: "SecurityActions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PermissionRequestActions_Users_ConfirmationUserId",
                        column: x => x.ConfirmationUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ReportPrintSettings",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ReportId = table.Column<int>(type: "int", nullable: false),
                    PrinterId = table.Column<int>(type: "int", nullable: false),
                    CreationTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    ShowPreview = table.Column<bool>(type: "bit", nullable: false),
                    ShowPrintDialog = table.Column<bool>(type: "bit", nullable: false),
                    NumberOfCopies = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ReportPrintSettings", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ReportPrintSettings_Printers_PrinterId",
                        column: x => x.PrinterId,
                        principalTable: "Printers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ReportPrintSettings_Reports_ReportId",
                        column: x => x.ReportId,
                        principalTable: "Reports",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ReportPrintSettings_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Proposals",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CurrentSituationDescription = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ProposalDescription = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ProposalEffect = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ProposalTypeId = table.Column<int>(type: "int", nullable: false),
                    IsOpen = table.Column<bool>(type: "bit", nullable: false),
                    IsEffective = table.Column<bool>(type: "bit", nullable: true),
                    Status = table.Column<byte>(type: "tinyint", nullable: false),
                    IsIncognitoUser = table.Column<bool>(type: "bit", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    UserId1 = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Proposals", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Proposals_ProposalTypes_ProposalTypeId",
                        column: x => x.ProposalTypeId,
                        principalTable: "ProposalTypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Proposals_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Proposals_Users_UserId1",
                        column: x => x.UserId1,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StockCheckingPersons",
                columns: table => new
                {
                    StockCheckingId = table.Column<int>(type: "int", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StockCheckingPersons", x => new { x.StockCheckingId, x.UserId });
                    table.ForeignKey(
                        name: "FK_StockCheckingPersons_StockCheckings_StockCheckingId",
                        column: x => x.StockCheckingId,
                        principalTable: "StockCheckings",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StockCheckingPersons_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StockCheckingWarehouses",
                columns: table => new
                {
                    StockCheckingId = table.Column<int>(type: "int", nullable: false),
                    WarehouseId = table.Column<short>(type: "smallint", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StockCheckingWarehouses", x => new { x.StockCheckingId, x.WarehouseId });
                    table.ForeignKey(
                        name: "FK_StockCheckingWarehouses_StockCheckings_StockCheckingId",
                        column: x => x.StockCheckingId,
                        principalTable: "StockCheckings",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StockCheckingWarehouses_Warehouses_WarehouseId",
                        column: x => x.WarehouseId,
                        principalTable: "Warehouses",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "QualityControlTestConditions",
                columns: table => new
                {
                    QualityControlTestId = table.Column<long>(type: "bigint", nullable: false),
                    TestConditionId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_QualityControlTestConditions", x => new { x.TestConditionId, x.QualityControlTestId });
                    table.ForeignKey(
                        name: "FK_QualityControlTestConditions_QualityControlTests_QualityControlTestId",
                        column: x => x.QualityControlTestId,
                        principalTable: "QualityControlTests",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_QualityControlTestConditions_TestConditions_TestConditionId",
                        column: x => x.TestConditionId,
                        principalTable: "TestConditions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TicketComments",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    TicketSoftwareId = table.Column<int>(type: "int", nullable: true),
                    CreateDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    Content = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TicketComments", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TicketComments_TicketSoftwares_TicketSoftwareId",
                        column: x => x.TicketSoftwareId,
                        principalTable: "TicketSoftwares",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TicketComments_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TicketFiles",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    TicketSoftWareId = table.Column<int>(type: "int", nullable: false),
                    DocumentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TicketFiles", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TicketFiles_TicketSoftwares_TicketSoftWareId",
                        column: x => x.TicketSoftWareId,
                        principalTable: "TicketSoftwares",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TicketFiles_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<string>(type: "nvarchar(100)", maxLength: 100, nullable: false),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    DeletedAt = table.Column<DateTime>(type: "datetime2", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    EntityDescription = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    TransactionBatchId = table.Column<int>(type: "int", nullable: true),
                    FinancialTransactionBatchId = table.Column<int>(type: "int", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_FinancialTransactionBatches_FinancialTransactionBatchId",
                        column: x => x.FinancialTransactionBatchId,
                        principalTable: "FinancialTransactionBatches",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_TransactionBatches_TransactionBatchId",
                        column: x => x.TransactionBatchId,
                        principalTable: "TransactionBatches",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CurrencyRates",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FromDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    Commission = table.Column<double>(type: "float", nullable: false),
                    Rate = table.Column<double>(type: "float", nullable: false),
                    FromCurrencyId = table.Column<byte>(type: "tinyint", nullable: false),
                    ToCurrencyId = table.Column<byte>(type: "tinyint", nullable: false),
                    ExchangeId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CurrencyRates", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CurrencyRates_Cooperators_ExchangeId",
                        column: x => x.ExchangeId,
                        principalTable: "Cooperators",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CurrencyRates_Currencies_FromCurrencyId",
                        column: x => x.FromCurrencyId,
                        principalTable: "Currencies",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CurrencyRates_Currencies_ToCurrencyId",
                        column: x => x.ToCurrencyId,
                        principalTable: "Currencies",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CustomerComplaints",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    Code = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    DateOfComplaint = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ResponseDeadline = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ComplaintTypeDescription = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ComplaintTypes = table.Column<byte>(type: "tinyint", nullable: false),
                    RegisterarUserId = table.Column<int>(type: "int", nullable: true),
                    RegisterarDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CustomerComplaintType = table.Column<byte>(type: "tinyint", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CustomerComplaints", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CustomerComplaints_Cooperators_CustomerId",
                        column: x => x.CustomerId,
                        principalTable: "Cooperators",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CustomerComplaints_Users_RegisterarUserId",
                        column: x => x.RegisterarUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CustomerComplaints_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "FinancialAccounts_CooperatorFinancialAccount",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    CooperatorId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinancialAccounts_CooperatorFinancialAccount", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinancialAccounts_CooperatorFinancialAccount_Cooperators_CooperatorId",
                        column: x => x.CooperatorId,
                        principalTable: "Cooperators",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FinancialAccounts_CooperatorFinancialAccount_FinancialAccounts_Id",
                        column: x => x.Id,
                        principalTable: "FinancialAccounts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Orders",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    OrderTypeId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    CustomerId = table.Column<int>(type: "int", nullable: false),
                    Orderer = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DocumentNumber = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DocumentType = table.Column<byte>(type: "tinyint", nullable: true),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    DeletedAt = table.Column<DateTime>(type: "datetime2", nullable: true),
                    TotalAmount = table.Column<double>(type: "float", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Orders", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Orders_Cooperators_CustomerId",
                        column: x => x.CustomerId,
                        principalTable: "Cooperators",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Orders_OrderTypes_OrderTypeId",
                        column: x => x.OrderTypeId,
                        principalTable: "OrderTypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PriceAnnunciations",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    FromDate = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    ToDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DocumentId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Status = table.Column<byte>(type: "tinyint", nullable: false),
                    RegisterarUserId = table.Column<int>(type: "int", nullable: false),
                    CooperatorId = table.Column<int>(type: "int", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RegisterDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PriceAnnunciations", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PriceAnnunciations_Cooperators_CooperatorId",
                        column: x => x.CooperatorId,
                        principalTable: "Cooperators",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PriceAnnunciations_Users_RegisterarUserId",
                        column: x => x.RegisterarUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProviderHowToBuys",
                columns: table => new
                {
                    ProviderId = table.Column<int>(type: "int", nullable: false),
                    HowToBuyId = table.Column<short>(type: "smallint", nullable: false),
                    LeadTime = table.Column<short>(type: "smallint", nullable: false),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    IsDefault = table.Column<bool>(type: "bit", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProviderHowToBuys", x => new { x.ProviderId, x.HowToBuyId });
                    table.ForeignKey(
                        name: "FK_ProviderHowToBuys_Cooperators_ProviderId",
                        column: x => x.ProviderId,
                        principalTable: "Cooperators",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProviderHowToBuys_HowToBuys_HowToBuyId",
                        column: x => x.HowToBuyId,
                        principalTable: "HowToBuys",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProductionLines",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DetailedCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ConfirmationDetailedCode = table.Column<bool>(type: "bit", nullable: false),
                    DepartmentId = table.Column<short>(type: "smallint", nullable: false),
                    ProductWarehouseId = table.Column<short>(type: "smallint", nullable: false),
                    ConsumeWarehouseId = table.Column<short>(type: "smallint", nullable: false),
                    SortIndex = table.Column<int>(type: "int", nullable: false),
                    ProductivityImpactFactor = table.Column<int>(type: "int", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    AdminUserGroupId = table.Column<int>(type: "int", nullable: true),
                    ProductionLineRepairUnitId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductionLines", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProductionLines_Departments_DepartmentId",
                        column: x => x.DepartmentId,
                        principalTable: "Departments",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProductionLines_ProductionLineRepairUnits_ProductionLineRepairUnitId",
                        column: x => x.ProductionLineRepairUnitId,
                        principalTable: "ProductionLineRepairUnits",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProductionLines_UserGroups_AdminUserGroupId",
                        column: x => x.AdminUserGroupId,
                        principalTable: "UserGroups",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProductionLines_Warehouses_ConsumeWarehouseId",
                        column: x => x.ConsumeWarehouseId,
                        principalTable: "Warehouses",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProductionLines_Warehouses_ProductWarehouseId",
                        column: x => x.ProductWarehouseId,
                        principalTable: "Warehouses",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "RialRates",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Rate = table.Column<double>(type: "float", nullable: false),
                    ReferenceRialRateId = table.Column<int>(type: "int", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    Amount = table.Column<double>(type: "float", nullable: false),
                    FinancialTransactionId = table.Column<int>(type: "int", nullable: false),
                    IsValid = table.Column<bool>(type: "bit", nullable: false),
                    IsUsed = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RialRates", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RialRates_FinancialTransactions_FinancialTransactionId",
                        column: x => x.FinancialTransactionId,
                        principalTable: "FinancialTransactions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RialRates_RialRates_ReferenceRialRateId",
                        column: x => x.ReferenceRialRateId,
                        principalTable: "RialRates",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Employees",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FirstName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    LastName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EmployeementDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Image = table.Column<byte[]>(type: "varbinary(max)", nullable: true),
                    Code = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    NationalCode = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    FatherName = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    BirthDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    BirthPlace = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    DocumentId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DepartmentId = table.Column<short>(type: "smallint", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    OrgnizationPostId = table.Column<int>(type: "int", nullable: true),
                    UserId = table.Column<int>(type: "int", nullable: true),
                    OrganizationJobId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Employees", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Employees_Departments_DepartmentId",
                        column: x => x.DepartmentId,
                        principalTable: "Departments",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Employees_OrganizationJobs_OrganizationJobId",
                        column: x => x.OrganizationJobId,
                        principalTable: "OrganizationJobs",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Employees_OrganizationPosts_OrgnizationPostId",
                        column: x => x.OrgnizationPostId,
                        principalTable: "OrganizationPosts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Employees_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProposalQAReviews",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ReviewResult = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReviewDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    ResponsibleUserId = table.Column<int>(type: "int", nullable: false),
                    ProposalId = table.Column<int>(type: "int", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProposalQAReviews", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProposalQAReviews_Proposals_ProposalId",
                        column: x => x.ProposalId,
                        principalTable: "Proposals",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProposalQAReviews_Users_ResponsibleUserId",
                        column: x => x.ResponsibleUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProposalQAReviews_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProposalReviewCommittees",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IsConfirmed = table.Column<bool>(type: "bit", nullable: false),
                    ReviewResult = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ReviewDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    ResponsibleUserId = table.Column<int>(type: "int", nullable: false),
                    ProposalId = table.Column<int>(type: "int", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProposalReviewCommittees", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProposalReviewCommittees_Proposals_ProposalId",
                        column: x => x.ProposalId,
                        principalTable: "Proposals",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProposalReviewCommittees_Users_ResponsibleUserId",
                        column: x => x.ResponsibleUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProposalReviewCommittees_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_BankOrder",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    OrderNumber = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    FolderCode = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    StuffPriority = table.Column<int>(type: "int", nullable: false),
                    RegisterDate = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    ExpireDate = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    SettlementDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ProviderId = table.Column<int>(type: "int", nullable: false),
                    CurrencyId = table.Column<byte>(type: "tinyint", nullable: false),
                    Status = table.Column<byte>(type: "tinyint", nullable: false),
                    BankOrderType = table.Column<int>(type: "int", nullable: false),
                    BankId = table.Column<byte>(type: "tinyint", nullable: false),
                    CustomhouseId = table.Column<short>(type: "smallint", nullable: false),
                    CountryId = table.Column<byte>(type: "tinyint", nullable: false),
                    TransferCost = table.Column<double>(type: "float", nullable: false),
                    FOB = table.Column<double>(type: "float", nullable: false),
                    TotalAmount = table.Column<double>(type: "float", nullable: false),
                    BankOrderContractTypeId = table.Column<short>(type: "smallint", nullable: false),
                    WithoutCurrencyTransfer = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_BankOrder", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_BankOrder_BankOrderContractTypes_BankOrderContractTypeId",
                        column: x => x.BankOrderContractTypeId,
                        principalTable: "BankOrderContractTypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_BankOrder_Banks_BankId",
                        column: x => x.BankId,
                        principalTable: "Banks",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_BankOrder_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_BankOrder_Cooperators_ProviderId",
                        column: x => x.ProviderId,
                        principalTable: "Cooperators",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_BankOrder_Countries_CountryId",
                        column: x => x.CountryId,
                        principalTable: "Countries",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_BankOrder_Currencies_CurrencyId",
                        column: x => x.CurrencyId,
                        principalTable: "Currencies",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_BankOrder_Customhouses_CustomhouseId",
                        column: x => x.CustomhouseId,
                        principalTable: "Customhouses",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_BaseEntityConfirmation",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    Status = table.Column<byte>(type: "tinyint", nullable: false),
                    ConfirmDescription = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    BaseEntityConfirmTypeId = table.Column<int>(type: "int", nullable: false),
                    ConfirmerId = table.Column<int>(type: "int", nullable: true),
                    ConfirmingEntityId = table.Column<int>(type: "int", nullable: false),
                    ConfirmDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_BaseEntityConfirmation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_BaseEntityConfirmation_BaseEntities_ConfirmingEntityId",
                        column: x => x.ConfirmingEntityId,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_BaseEntityConfirmation_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_BaseEntityConfirmation_BaseEntityConfirmTypes_BaseEntityConfirmTypeId",
                        column: x => x.BaseEntityConfirmTypeId,
                        principalTable: "BaseEntityConfirmTypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_BaseEntityConfirmation_Users_ConfirmerId",
                        column: x => x.ConfirmerId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_Cargo",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_Cargo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_Cargo_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_CustomsDeclaration",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_CustomsDeclaration", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_CustomsDeclaration_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_PurchaseOrderGroup",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_PurchaseOrderGroup", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_PurchaseOrderGroup_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_Receipt",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    CooperatorId = table.Column<int>(type: "int", nullable: false),
                    Status = table.Column<byte>(type: "tinyint", nullable: false),
                    ReceiptDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    ReceiptType = table.Column<byte>(type: "tinyint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_Receipt", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_Receipt_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_Receipt_Cooperators_CooperatorId",
                        column: x => x.CooperatorId,
                        principalTable: "Cooperators",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_StuffRequestMilestone",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    DueDate = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    IsClosed = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_StuffRequestMilestone", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_StuffRequestMilestone_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_Transport",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    DriverName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PhoneNumber = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CarNumber = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CarInformation = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ShippingCompanyName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    OutputTransportId = table.Column<int>(type: "int", nullable: true),
                    TransportDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    TransportType = table.Column<byte>(type: "tinyint", nullable: false),
                    TransportDescription = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Status = table.Column<byte>(type: "tinyint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_Transport", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_Transport_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_Transport_BaseEntities_Transport_OutputTransportId",
                        column: x => x.OutputTransportId,
                        principalTable: "BaseEntities_Transport",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntityDocuments",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    DeletedAt = table.Column<DateTime>(type: "datetime2", nullable: true),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    BaseEntityId = table.Column<int>(type: "int", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    DocumentId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    BaseEntityDocumentTypeId = table.Column<int>(type: "int", nullable: true),
                    CooperatorId = table.Column<int>(type: "int", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntityDocuments", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntityDocuments_BaseEntities_BaseEntityId",
                        column: x => x.BaseEntityId,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntityDocuments_BaseEntityDocumentTypes_BaseEntityDocumentTypeId",
                        column: x => x.BaseEntityDocumentTypeId,
                        principalTable: "BaseEntityDocumentTypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntityDocuments_Cooperators_CooperatorId",
                        column: x => x.CooperatorId,
                        principalTable: "Cooperators",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntityDocuments_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntityLogs",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BaseEntityId = table.Column<int>(type: "int", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntityLogs", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntityLogs_BaseEntities_BaseEntityId",
                        column: x => x.BaseEntityId,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntityLogs_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ScrumEntities",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Color = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IsCommit = table.Column<bool>(type: "bit", nullable: false),
                    EstimatedTime = table.Column<long>(type: "bigint", nullable: false),
                    DepartmentId = table.Column<short>(type: "smallint", nullable: false),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    DeletedAt = table.Column<DateTime>(type: "datetime2", nullable: true),
                    IsArchive = table.Column<bool>(type: "bit", nullable: false),
                    BaseEntityId = table.Column<int>(type: "int", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ScrumEntities", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ScrumEntities_BaseEntities_BaseEntityId",
                        column: x => x.BaseEntityId,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ScrumEntities_Departments_DepartmentId",
                        column: x => x.DepartmentId,
                        principalTable: "Departments",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CustomerComplaintSummaries",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    ComplaintClassificationTypeDescription = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ComplaintClassificationTypes = table.Column<short>(type: "smallint", nullable: true),
                    Status = table.Column<byte>(type: "tinyint", nullable: false),
                    QAOpinion = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CustomerOpinion = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DateOfAnnouncement = table.Column<DateTime>(type: "datetime2", nullable: true),
                    DocumentId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CorrectiveActionDocumentId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    CustomerComplaintId = table.Column<int>(type: "int", nullable: false),
                    OccurrenceSeverityStatus = table.Column<byte>(type: "tinyint", nullable: false),
                    OccurrenceProbabilityStatus = table.Column<byte>(type: "tinyint", nullable: false),
                    RiskLevelStatus = table.Column<byte>(type: "tinyint", nullable: true),
                    ComplaintTitle = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CorrectiveAction = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CorrectiveActionDateTime = table.Column<DateTime>(type: "datetime2", nullable: true),
                    CorrectiveActionUserId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CustomerComplaintSummaries", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CustomerComplaintSummaries_CustomerComplaints_CustomerComplaintId",
                        column: x => x.CustomerComplaintId,
                        principalTable: "CustomerComplaints",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CustomerComplaintSummaries_Users_CorrectiveActionUserId",
                        column: x => x.CorrectiveActionUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_PaymentDueDate",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    OrderId = table.Column<int>(type: "int", nullable: false),
                    PaymentTypeId = table.Column<int>(type: "int", nullable: false),
                    Amount = table.Column<double>(type: "float", nullable: true),
                    PaymentDate = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_PaymentDueDate", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_PaymentDueDate_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_PaymentDueDate_Orders_OrderId",
                        column: x => x.OrderId,
                        principalTable: "Orders",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_PaymentDueDate_PaymentTypes_PaymentTypeId",
                        column: x => x.PaymentTypeId,
                        principalTable: "PaymentTypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "OrderDocuments",
                columns: table => new
                {
                    OrderId = table.Column<int>(type: "int", nullable: false),
                    DocumentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ModifiedDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OrderDocuments", x => new { x.OrderId, x.DocumentId });
                    table.ForeignKey(
                        name: "FK_OrderDocuments_Documents_DocumentId",
                        column: x => x.DocumentId,
                        principalTable: "Documents",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OrderDocuments_Orders_OrderId",
                        column: x => x.OrderId,
                        principalTable: "Orders",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OrderDocuments_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DetailedCodeConfirmationRequests",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CooperatorId = table.Column<int>(type: "int", nullable: true),
                    ProductionLineId = table.Column<int>(type: "int", nullable: true),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    ConfirmationUserId = table.Column<int>(type: "int", nullable: true),
                    ConfirmationDateTime = table.Column<DateTime>(type: "datetime2", nullable: true),
                    DetailedCodeEntityType = table.Column<byte>(type: "tinyint", nullable: false),
                    DetailedCodeRequestType = table.Column<byte>(type: "tinyint", nullable: false),
                    Status = table.Column<byte>(type: "tinyint", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DetailedCode = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DetailedCodeConfirmationRequests", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DetailedCodeConfirmationRequests_Cooperators_CooperatorId",
                        column: x => x.CooperatorId,
                        principalTable: "Cooperators",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DetailedCodeConfirmationRequests_ProductionLines_ProductionLineId",
                        column: x => x.ProductionLineId,
                        principalTable: "ProductionLines",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DetailedCodeConfirmationRequests_Users_ConfirmationUserId",
                        column: x => x.ConfirmationUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_DetailedCodeConfirmationRequests_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProductionLineProductionSteps",
                columns: table => new
                {
                    ProductionLineId = table.Column<int>(type: "int", nullable: false),
                    ProductionStepId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductionLineProductionSteps", x => new { x.ProductionLineId, x.ProductionStepId });
                    table.ForeignKey(
                        name: "FK_ProductionLineProductionSteps_ProductionLines_ProductionLineId",
                        column: x => x.ProductionLineId,
                        principalTable: "ProductionLines",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProductionLineProductionSteps_ProductionSteps_ProductionStepId",
                        column: x => x.ProductionStepId,
                        principalTable: "ProductionSteps",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProductionLineWorkShifts",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    WorkShiftId = table.Column<int>(type: "int", nullable: false),
                    ProductionLineId = table.Column<int>(type: "int", nullable: false),
                    SaveDate = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    FromDate = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductionLineWorkShifts", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProductionLineWorkShifts_ProductionLines_ProductionLineId",
                        column: x => x.ProductionLineId,
                        principalTable: "ProductionLines",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProductionLineWorkShifts_WorkShifts_WorkShiftId",
                        column: x => x.WorkShiftId,
                        principalTable: "WorkShifts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "WorkStations",
                columns: table => new
                {
                    Id = table.Column<short>(type: "smallint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ProductionLineId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WorkStations", x => x.Id);
                    table.ForeignKey(
                        name: "FK_WorkStations_ProductionLines_ProductionLineId",
                        column: x => x.ProductionLineId,
                        principalTable: "ProductionLines",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_WarehouseIssue",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    Status = table.Column<byte>(type: "tinyint", nullable: false),
                    FromWarehouseId = table.Column<short>(type: "smallint", nullable: false),
                    ToWarehouseId = table.Column<short>(type: "smallint", nullable: true),
                    ToDepartmentId = table.Column<short>(type: "smallint", nullable: true),
                    ToEmployeeId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_WarehouseIssue", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_WarehouseIssue_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_WarehouseIssue_Departments_ToDepartmentId",
                        column: x => x.ToDepartmentId,
                        principalTable: "Departments",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_WarehouseIssue_Employees_ToEmployeeId",
                        column: x => x.ToEmployeeId,
                        principalTable: "Employees",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_WarehouseIssue_Warehouses_FromWarehouseId",
                        column: x => x.FromWarehouseId,
                        principalTable: "Warehouses",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_WarehouseIssue_Warehouses_ToWarehouseId",
                        column: x => x.ToWarehouseId,
                        principalTable: "Warehouses",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Contacts",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Title = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ContactText = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ContactTypeId = table.Column<int>(type: "int", nullable: false),
                    IsMain = table.Column<bool>(type: "bit", nullable: false),
                    CooperatorId = table.Column<int>(type: "int", nullable: true),
                    EmployeeId = table.Column<int>(type: "int", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    CooperatorId1 = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Contacts", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Contacts_ContactTypes_ContactTypeId",
                        column: x => x.ContactTypeId,
                        principalTable: "ContactTypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Contacts_Cooperators_CooperatorId",
                        column: x => x.CooperatorId,
                        principalTable: "Cooperators",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Contacts_Cooperators_CooperatorId1",
                        column: x => x.CooperatorId1,
                        principalTable: "Cooperators",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Contacts_Employees_EmployeeId",
                        column: x => x.EmployeeId,
                        principalTable: "Employees",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "EmployeeComplain",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    EmployeeId = table.Column<int>(type: "int", nullable: false),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeeComplain", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EmployeeComplain_Employees_EmployeeId",
                        column: x => x.EmployeeId,
                        principalTable: "Employees",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeeComplain_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "EmployeeEvaluations",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EmployeeId = table.Column<int>(type: "int", nullable: false),
                    EmployeeEvaluationPeriodId = table.Column<int>(type: "int", nullable: false),
                    CreatedDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    CreatedUserId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeeEvaluations", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EmployeeEvaluations_EmployeeEvaluationPeriods_EmployeeEvaluationPeriodId",
                        column: x => x.EmployeeEvaluationPeriodId,
                        principalTable: "EmployeeEvaluationPeriods",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeeEvaluations_Employees_EmployeeId",
                        column: x => x.EmployeeId,
                        principalTable: "Employees",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeeEvaluations_Users_CreatedUserId",
                        column: x => x.CreatedUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "MeetingParticipants",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    MinutesMeetingId = table.Column<int>(type: "int", nullable: false),
                    ParticipantEmployeeId = table.Column<int>(type: "int", nullable: true),
                    GuestParticipantName = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    UserId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MeetingParticipants", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MeetingParticipants_Employees_ParticipantEmployeeId",
                        column: x => x.ParticipantEmployeeId,
                        principalTable: "Employees",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MeetingParticipants_MinutesMeetings_MinutesMeetingId",
                        column: x => x.MinutesMeetingId,
                        principalTable: "MinutesMeetings",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MeetingParticipants_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "OrganizationPostHistories",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EmployeeId = table.Column<int>(type: "int", nullable: false),
                    OrganizationPostId = table.Column<int>(type: "int", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    StartDate = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    CreationTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    CreatorId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OrganizationPostHistories", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OrganizationPostHistories_Employees_EmployeeId",
                        column: x => x.EmployeeId,
                        principalTable: "Employees",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OrganizationPostHistories_OrganizationPosts_OrganizationPostId",
                        column: x => x.OrganizationPostId,
                        principalTable: "OrganizationPosts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OrganizationPostHistories_Users_CreatorId",
                        column: x => x.CreatorId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProductionOperationEmployees",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EmployeeId = table.Column<int>(type: "int", nullable: false),
                    ProductionOperationEmployeeGroupId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductionOperationEmployees", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProductionOperationEmployees_Employees_EmployeeId",
                        column: x => x.EmployeeId,
                        principalTable: "Employees",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProductionOperationEmployees_ProductionOperationEmployeeGroups_ProductionOperationEmployeeGroupId",
                        column: x => x.ProductionOperationEmployeeGroupId,
                        principalTable: "ProductionOperationEmployeeGroups",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProductionTerminals",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ProductionLineId = table.Column<int>(type: "int", nullable: false),
                    NetworkId = table.Column<int>(type: "int", nullable: false),
                    EmployeeId = table.Column<int>(type: "int", nullable: true),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    Type = table.Column<byte>(type: "tinyint", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductionTerminals", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProductionTerminals_Employees_EmployeeId",
                        column: x => x.EmployeeId,
                        principalTable: "Employees",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProductionTerminals_ProductionLines_ProductionLineId",
                        column: x => x.ProductionLineId,
                        principalTable: "ProductionLines",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SoftwareWorkReports",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ReportDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    CreatedDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    EmployeeId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SoftwareWorkReports", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SoftwareWorkReports_Employees_EmployeeId",
                        column: x => x.EmployeeId,
                        principalTable: "Employees",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Suppliers",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    EmployeeId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Suppliers", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Suppliers_Employees_EmployeeId",
                        column: x => x.EmployeeId,
                        principalTable: "Employees",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Allocations",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BankOrderId = table.Column<int>(type: "int", nullable: false),
                    Amount = table.Column<double>(type: "float", nullable: false),
                    CurrencyId = table.Column<byte>(type: "tinyint", nullable: false),
                    Duration = table.Column<int>(type: "int", nullable: false),
                    Status = table.Column<byte>(type: "tinyint", nullable: false),
                    ReceivedDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    BeginningDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    FinalizationDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    StatisticalRegistrationCertificate = table.Column<int>(type: "int", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    DocumentId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Allocations", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Allocations_BaseEntities_BankOrder_BankOrderId",
                        column: x => x.BankOrderId,
                        principalTable: "BaseEntities_BankOrder",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Allocations_Currencies_CurrencyId",
                        column: x => x.CurrencyId,
                        principalTable: "Currencies",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Allocations_Documents_DocumentId",
                        column: x => x.DocumentId,
                        principalTable: "Documents",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Allocations_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BankOrderDetails",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Index = table.Column<int>(type: "int", nullable: false),
                    Qty = table.Column<double>(type: "float", nullable: false),
                    UnitId = table.Column<byte>(type: "tinyint", nullable: false),
                    Fee = table.Column<double>(type: "float", nullable: false),
                    BankOrderId = table.Column<int>(type: "int", nullable: false),
                    StuffHSGroupId = table.Column<int>(type: "int", nullable: false),
                    Price = table.Column<double>(type: "float", nullable: false),
                    Weight = table.Column<double>(type: "float", nullable: false),
                    GrossWeight = table.Column<double>(type: "float", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BankOrderDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BankOrderDetails_BaseEntities_BankOrder_BankOrderId",
                        column: x => x.BankOrderId,
                        principalTable: "BaseEntities_BankOrder",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BankOrderDetails_StuffHSGroups_StuffHSGroupId",
                        column: x => x.StuffHSGroupId,
                        principalTable: "StuffHSGroups",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BankOrderDetails_Units_UnitId",
                        column: x => x.UnitId,
                        principalTable: "Units",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BankOrderLogs",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BankOrderStatusTypeId = table.Column<int>(type: "int", nullable: false),
                    BankOrderId = table.Column<int>(type: "int", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    BankOrderId1 = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BankOrderLogs", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BankOrderLogs_BankOrderStatusTypes_BankOrderStatusTypeId",
                        column: x => x.BankOrderStatusTypeId,
                        principalTable: "BankOrderStatusTypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BankOrderLogs_BaseEntities_BankOrder_BankOrderId",
                        column: x => x.BankOrderId,
                        principalTable: "BaseEntities_BankOrder",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BankOrderLogs_BaseEntities_BankOrder_BankOrderId1",
                        column: x => x.BankOrderId1,
                        principalTable: "BaseEntities_BankOrder",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BankOrderLogs_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_Lading",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    HasReceiptLicence = table.Column<bool>(type: "bit", nullable: false),
                    Type = table.Column<byte>(type: "tinyint", nullable: false),
                    HasLadingChangeRequest = table.Column<bool>(type: "bit", nullable: false),
                    ReceiptLicenceDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    BankOrderId = table.Column<int>(type: "int", nullable: true),
                    CustomsValue = table.Column<double>(type: "float", nullable: true),
                    ActualWeight = table.Column<double>(type: "float", nullable: true),
                    BoxCount = table.Column<long>(type: "bigint", nullable: true),
                    KotazhCode = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    SataCode = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CityId = table.Column<short>(type: "smallint", nullable: false),
                    DeliveryDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    TransportDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CustomhouseId = table.Column<short>(type: "smallint", nullable: true),
                    IsLocked = table.Column<bool>(type: "bit", nullable: false),
                    LadingBlockerId = table.Column<int>(type: "int", nullable: true),
                    NeedToCost = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_Lading", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_Lading_BaseEntities_BankOrder_BankOrderId",
                        column: x => x.BankOrderId,
                        principalTable: "BaseEntities_BankOrder",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_Lading_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_Lading_Cities_CityId",
                        column: x => x.CityId,
                        principalTable: "Cities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_Lading_Customhouses_CustomhouseId",
                        column: x => x.CustomhouseId,
                        principalTable: "Customhouses",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_Lading_LadingBlockers_LadingBlockerId",
                        column: x => x.LadingBlockerId,
                        principalTable: "LadingBlockers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Enactments",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ActionDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    CollateralType = table.Column<byte>(type: "tinyint", nullable: false),
                    CollateralAmount = table.Column<double>(type: "float", nullable: false),
                    ReceiveDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    BankOrderId = table.Column<int>(type: "int", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Enactments", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Enactments_BaseEntities_BankOrder_BankOrderId",
                        column: x => x.BankOrderId,
                        principalTable: "BaseEntities_BankOrder",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Enactments_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Cottages",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Index = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CustomsDeclarationId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Cottages", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Cottages_BaseEntities_CustomsDeclaration_CustomsDeclarationId",
                        column: x => x.CustomsDeclarationId,
                        principalTable: "BaseEntities_CustomsDeclaration",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_InboundCargo",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    BoxCount = table.Column<short>(type: "smallint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_InboundCargo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_InboundCargo_BaseEntities_Transport_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities_Transport",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_OutboundCargo",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_OutboundCargo", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_OutboundCargo_BaseEntities_Transport_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities_Transport",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Notifications",
                columns: table => new
                {
                    Id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Title = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    DeletedAt = table.Column<DateTime>(type: "datetime2", nullable: true),
                    IsSeen = table.Column<bool>(type: "bit", nullable: false),
                    RequestDate = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    SeenDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    ScrumEntityId = table.Column<int>(type: "int", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    NotificationGroupId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Notifications", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Notifications_NotificationGroups_NotificationGroupId",
                        column: x => x.NotificationGroupId,
                        principalTable: "NotificationGroups",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Notifications_ScrumEntities_ScrumEntityId",
                        column: x => x.ScrumEntityId,
                        principalTable: "ScrumEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Notifications_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ScrumEntities_ScrumProjectGroup",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ScrumEntities_ScrumProjectGroup", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ScrumEntities_ScrumProjectGroup_ScrumEntities_Id",
                        column: x => x.Id,
                        principalTable: "ScrumEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ScrumEntityComments",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    Comment = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    ScrumEntityId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ScrumEntityComments", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ScrumEntityComments_ScrumEntities_ScrumEntityId",
                        column: x => x.ScrumEntityId,
                        principalTable: "ScrumEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ScrumEntityComments_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ScrumEntityDependencies",
                columns: table => new
                {
                    RequisiteScrumEntityId = table.Column<int>(type: "int", nullable: false),
                    NextScrumEntityId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ScrumEntityDependencies", x => new { x.RequisiteScrumEntityId, x.NextScrumEntityId });
                    table.ForeignKey(
                        name: "FK_ScrumEntityDependencies_ScrumEntities_NextScrumEntityId",
                        column: x => x.NextScrumEntityId,
                        principalTable: "ScrumEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ScrumEntityDependencies_ScrumEntities_RequisiteScrumEntityId",
                        column: x => x.RequisiteScrumEntityId,
                        principalTable: "ScrumEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ScrumEntityDocuments",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ScrumEntityId = table.Column<int>(type: "int", nullable: false),
                    DocumentTypeId = table.Column<int>(type: "int", nullable: false),
                    DocumentId = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ScrumEntityDocuments", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ScrumEntityDocuments_DocumentTypes_DocumentTypeId",
                        column: x => x.DocumentTypeId,
                        principalTable: "DocumentTypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ScrumEntityDocuments_ScrumEntities_ScrumEntityId",
                        column: x => x.ScrumEntityId,
                        principalTable: "ScrumEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ScrumEntityLogs",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ScrumEntityId = table.Column<int>(type: "int", nullable: false),
                    FieldName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    OldValue = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    NewValue = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ScrumEntityLogs", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ScrumEntityLogs_ScrumEntities_ScrumEntityId",
                        column: x => x.ScrumEntityId,
                        principalTable: "ScrumEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ScrumEntityLogs_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CustomerComplaintDepartments",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    CustomerComplaintSummaryId = table.Column<int>(type: "int", nullable: false),
                    DepartmentId = table.Column<short>(type: "smallint", nullable: false),
                    InhibitionAction = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DateOfInhibition = table.Column<DateTime>(type: "datetime2", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CustomerComplaintDepartments", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CustomerComplaintDepartments_CustomerComplaintSummaries_CustomerComplaintSummaryId",
                        column: x => x.CustomerComplaintSummaryId,
                        principalTable: "CustomerComplaintSummaries",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CustomerComplaintDepartments_Departments_DepartmentId",
                        column: x => x.DepartmentId,
                        principalTable: "Departments",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "WorkStationOperations",
                columns: table => new
                {
                    WorkStationId = table.Column<short>(type: "smallint", nullable: false),
                    OperationId = table.Column<short>(type: "smallint", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WorkStationOperations", x => new { x.WorkStationId, x.OperationId });
                    table.ForeignKey(
                        name: "FK_WorkStationOperations_Operations_OperationId",
                        column: x => x.OperationId,
                        principalTable: "Operations",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WorkStationOperations_WorkStations_WorkStationId",
                        column: x => x.WorkStationId,
                        principalTable: "WorkStations",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "WorkStationParts",
                columns: table => new
                {
                    Id = table.Column<short>(type: "smallint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    WorkStationId = table.Column<short>(type: "smallint", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WorkStationParts", x => x.Id);
                    table.ForeignKey(
                        name: "FK_WorkStationParts_WorkStations_WorkStationId",
                        column: x => x.WorkStationId,
                        principalTable: "WorkStations",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_RequestWarehouseIssue",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_RequestWarehouseIssue", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_RequestWarehouseIssue_BaseEntities_WarehouseIssue_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities_WarehouseIssue",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_ResponseWarehouseIssue",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    WarehouseIssueId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_ResponseWarehouseIssue", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ResponseWarehouseIssue_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ResponseWarehouseIssue_BaseEntities_WarehouseIssue_WarehouseIssueId",
                        column: x => x.WarehouseIssueId,
                        principalTable: "BaseEntities_WarehouseIssue",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "EmployeeComplainItem",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EmployeeComplainId = table.Column<int>(type: "int", nullable: false),
                    Type = table.Column<byte>(type: "tinyint", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeeComplainItem", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EmployeeComplainItem_EmployeeComplain_EmployeeComplainId",
                        column: x => x.EmployeeComplainId,
                        principalTable: "EmployeeComplain",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "EmployeeEvaluationItems",
                columns: table => new
                {
                    EmployeeEvaluationId = table.Column<int>(type: "int", nullable: false),
                    EvaluationCategoryId = table.Column<int>(type: "int", nullable: false),
                    Status = table.Column<byte>(type: "tinyint", nullable: false),
                    PermanentDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeeEvaluationItems", x => new { x.EmployeeEvaluationId, x.EvaluationCategoryId });
                    table.ForeignKey(
                        name: "FK_EmployeeEvaluationItems_EmployeeEvaluations_EmployeeEvaluationId",
                        column: x => x.EmployeeEvaluationId,
                        principalTable: "EmployeeEvaluations",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeeEvaluationItems_EvaluationCategories_EvaluationCategoryId",
                        column: x => x.EvaluationCategoryId,
                        principalTable: "EvaluationCategories",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeeEvaluationItems_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SoftwareWorkReportItems",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SoftwareWorkReportId = table.Column<int>(type: "int", nullable: false),
                    Spent = table.Column<int>(type: "int", nullable: false),
                    Estimated = table.Column<int>(type: "int", nullable: false),
                    Issue = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    RestTimeIssue = table.Column<byte>(type: "tinyint", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SoftwareWorkReportItems", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SoftwareWorkReportItems_SoftwareWorkReports_SoftwareWorkReportId",
                        column: x => x.SoftwareWorkReportId,
                        principalTable: "SoftwareWorkReports",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProvisionersCarts",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ReportDate = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    Status = table.Column<byte>(type: "tinyint", nullable: true),
                    SupplierId = table.Column<int>(type: "int", nullable: true),
                    ResponsibleEmployeeId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProvisionersCarts", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProvisionersCarts_Suppliers_SupplierId",
                        column: x => x.SupplierId,
                        principalTable: "Suppliers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProvisionersCarts_Users_ResponsibleEmployeeId",
                        column: x => x.ResponsibleEmployeeId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BankOrderCurrencySources",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    HasFinancialDocumentBankOrder = table.Column<bool>(type: "bit", nullable: false),
                    BankOrderId = table.Column<int>(type: "int", nullable: false),
                    FOB = table.Column<double>(type: "float", nullable: false),
                    TransferCost = table.Column<double>(type: "float", nullable: false),
                    BoxCount = table.Column<int>(type: "int", nullable: false),
                    SataCode = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ActualWeight = table.Column<double>(type: "float", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    LadingId = table.Column<int>(type: "int", nullable: false),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BankOrderCurrencySources", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BankOrderCurrencySources_BaseEntities_BankOrder_BankOrderId",
                        column: x => x.BankOrderId,
                        principalTable: "BaseEntities_BankOrder",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BankOrderCurrencySources_BaseEntities_Lading_LadingId",
                        column: x => x.LadingId,
                        principalTable: "BaseEntities_Lading",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BankOrderCurrencySources_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "LadingBankOrderLogs",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LadingId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    LadingBankOrderStatusId = table.Column<int>(type: "int", nullable: false),
                    LadingId1 = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LadingBankOrderLogs", x => x.Id);
                    table.ForeignKey(
                        name: "FK_LadingBankOrderLogs_BaseEntities_Lading_LadingId",
                        column: x => x.LadingId,
                        principalTable: "BaseEntities_Lading",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_LadingBankOrderLogs_BaseEntities_Lading_LadingId1",
                        column: x => x.LadingId1,
                        principalTable: "BaseEntities_Lading",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_LadingBankOrderLogs_LadingBankOrderStatus_LadingBankOrderStatusId",
                        column: x => x.LadingBankOrderStatusId,
                        principalTable: "LadingBankOrderStatus",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_LadingBankOrderLogs_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "LadingChangeRequests",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LadingId = table.Column<int>(type: "int", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    ConfirmerUserId = table.Column<int>(type: "int", nullable: true),
                    RequestDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    ConfirmDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    LadingType = table.Column<byte>(type: "tinyint", nullable: false),
                    Status = table.Column<byte>(type: "tinyint", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LadingChangeRequests", x => x.Id);
                    table.ForeignKey(
                        name: "FK_LadingChangeRequests_BaseEntities_Lading_LadingId",
                        column: x => x.LadingId,
                        principalTable: "BaseEntities_Lading",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_LadingChangeRequests_Users_ConfirmerUserId",
                        column: x => x.ConfirmerUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_LadingChangeRequests_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "LadingCustomhouseLogs",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LadingId = table.Column<int>(type: "int", nullable: false),
                    LadingCustomhouseStatusId = table.Column<int>(type: "int", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    LadingId1 = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LadingCustomhouseLogs", x => x.Id);
                    table.ForeignKey(
                        name: "FK_LadingCustomhouseLogs_BaseEntities_Lading_LadingId",
                        column: x => x.LadingId,
                        principalTable: "BaseEntities_Lading",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_LadingCustomhouseLogs_BaseEntities_Lading_LadingId1",
                        column: x => x.LadingId1,
                        principalTable: "BaseEntities_Lading",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_LadingCustomhouseLogs_LadingCustomhouseStatuses_LadingCustomhouseStatusId",
                        column: x => x.LadingCustomhouseStatusId,
                        principalTable: "LadingCustomhouseStatuses",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_LadingCustomhouseLogs_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "EnactmentActionProcessLogs",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EnactmentId = table.Column<int>(type: "int", nullable: false),
                    EnactmentActionProcessId = table.Column<int>(type: "int", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    EnactmentId1 = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EnactmentActionProcessLogs", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EnactmentActionProcessLogs_EnactmentActionProcesses_EnactmentActionProcessId",
                        column: x => x.EnactmentActionProcessId,
                        principalTable: "EnactmentActionProcesses",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EnactmentActionProcessLogs_Enactments_EnactmentId",
                        column: x => x.EnactmentId,
                        principalTable: "Enactments",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EnactmentActionProcessLogs_Enactments_EnactmentId1",
                        column: x => x.EnactmentId1,
                        principalTable: "Enactments",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EnactmentActionProcessLogs_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CottageItems",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    BankOrderDetailId = table.Column<int>(type: "int", nullable: true),
                    StuffHSGroupId = table.Column<int>(type: "int", nullable: false),
                    CottageId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CottageItems", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CottageItems_BankOrderDetails_BankOrderDetailId",
                        column: x => x.BankOrderDetailId,
                        principalTable: "BankOrderDetails",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CottageItems_Cottages_CottageId",
                        column: x => x.CottageId,
                        principalTable: "Cottages",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CottageItems_StuffHSGroups_StuffHSGroupId",
                        column: x => x.StuffHSGroupId,
                        principalTable: "StuffHSGroups",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "InboundCargoCooperators",
                columns: table => new
                {
                    CooperatorId = table.Column<int>(type: "int", nullable: false),
                    InboundCargoId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_InboundCargoCooperators", x => new { x.InboundCargoId, x.CooperatorId });
                    table.ForeignKey(
                        name: "FK_InboundCargoCooperators_BaseEntities_InboundCargo_InboundCargoId",
                        column: x => x.InboundCargoId,
                        principalTable: "BaseEntities_InboundCargo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_InboundCargoCooperators_Cooperators_CooperatorId",
                        column: x => x.CooperatorId,
                        principalTable: "Cooperators",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_ExitReceipt",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    Confirmed = table.Column<bool>(type: "bit", nullable: true),
                    OutboundCargoId = table.Column<int>(type: "int", nullable: true),
                    CooperatorId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_ExitReceipt", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ExitReceipt_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ExitReceipt_BaseEntities_OutboundCargo_OutboundCargoId",
                        column: x => x.OutboundCargoId,
                        principalTable: "BaseEntities_OutboundCargo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ExitReceipt_Cooperators_CooperatorId",
                        column: x => x.CooperatorId,
                        principalTable: "Cooperators",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ScrumEntities_ProjectHeader",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    OwnerCustomerId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ScrumEntities_ProjectHeader", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ScrumEntities_ProjectHeader_Cooperators_OwnerCustomerId",
                        column: x => x.OwnerCustomerId,
                        principalTable: "Cooperators",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ScrumEntities_ProjectHeader_ScrumEntities_ScrumProjectGroup_Id",
                        column: x => x.Id,
                        principalTable: "ScrumEntities_ScrumProjectGroup",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ScrumEntities_ScrumProject",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    ScrumProjectGroupId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ScrumEntities_ScrumProject", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ScrumEntities_ScrumProject_ScrumEntities_Id",
                        column: x => x.Id,
                        principalTable: "ScrumEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ScrumEntities_ScrumProject_ScrumEntities_ScrumProjectGroup_ScrumProjectGroupId",
                        column: x => x.ScrumProjectGroupId,
                        principalTable: "ScrumEntities_ScrumProjectGroup",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "WorkStationParts_MachineType",
                columns: table => new
                {
                    Id = table.Column<short>(type: "smallint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WorkStationParts_MachineType", x => x.Id);
                    table.ForeignKey(
                        name: "FK_WorkStationParts_MachineType_WorkStationParts_Id",
                        column: x => x.Id,
                        principalTable: "WorkStationParts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "WorkStationParts_OperatorType",
                columns: table => new
                {
                    Id = table.Column<short>(type: "smallint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WorkStationParts_OperatorType", x => x.Id);
                    table.ForeignKey(
                        name: "FK_WorkStationParts_OperatorType_WorkStationParts_Id",
                        column: x => x.Id,
                        principalTable: "WorkStationParts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "EmployeeComplainDepartment",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DepartmentId = table.Column<short>(type: "smallint", nullable: false),
                    EmployeeComplainItemId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeeComplainDepartment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EmployeeComplainDepartment_Departments_DepartmentId",
                        column: x => x.DepartmentId,
                        principalTable: "Departments",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeeComplainDepartment_EmployeeComplainItem_EmployeeComplainItemId",
                        column: x => x.EmployeeComplainItemId,
                        principalTable: "EmployeeComplainItem",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "QAReviewEmployeeComplain",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EmployeeComplainItemId = table.Column<int>(type: "int", nullable: false),
                    ActionDescription = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CreatorUserId = table.Column<int>(type: "int", nullable: false),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    ActionResponsibleUserId = table.Column<int>(type: "int", nullable: false),
                    ActionStartDate = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    ActionFinishDate = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    ActionResult = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Status = table.Column<byte>(type: "tinyint", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_QAReviewEmployeeComplain", x => x.Id);
                    table.ForeignKey(
                        name: "FK_QAReviewEmployeeComplain_EmployeeComplainItem_EmployeeComplainItemId",
                        column: x => x.EmployeeComplainItemId,
                        principalTable: "EmployeeComplainItem",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_QAReviewEmployeeComplain_Users_ActionResponsibleUserId",
                        column: x => x.ActionResponsibleUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_QAReviewEmployeeComplain_Users_CreatorUserId",
                        column: x => x.CreatorUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "EmployeeEvaluationItemDetails",
                columns: table => new
                {
                    EmployeeEvaluationId = table.Column<int>(type: "int", nullable: false),
                    EvaluationCategoryId = table.Column<int>(type: "int", nullable: false),
                    EvaluationCategoryItemId = table.Column<int>(type: "int", nullable: false),
                    Score = table.Column<byte>(type: "tinyint", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeeEvaluationItemDetails", x => new { x.EmployeeEvaluationId, x.EvaluationCategoryId, x.EvaluationCategoryItemId });
                    table.ForeignKey(
                        name: "FK_EmployeeEvaluationItemDetails_EmployeeEvaluationItems_EmployeeEvaluationId_EvaluationCategoryId",
                        columns: x => new { x.EmployeeEvaluationId, x.EvaluationCategoryId },
                        principalTable: "EmployeeEvaluationItems",
                        principalColumns: new[] { "EmployeeEvaluationId", "EvaluationCategoryId" },
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeeEvaluationItemDetails_EvaluationCategoryItems_EvaluationCategoryItemId",
                        column: x => x.EvaluationCategoryItemId,
                        principalTable: "EvaluationCategoryItems",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "AddLadingItemDetailInputs",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Qty = table.Column<double>(type: "float", nullable: false),
                    LadingIemId = table.Column<int>(type: "int", nullable: false),
                    CargoItemId = table.Column<int>(type: "int", nullable: false),
                    CargoItemDetailId = table.Column<int>(type: "int", nullable: false),
                    LadingChangeRequestId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AddLadingItemDetailInputs", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AddLadingItemDetailInputs_LadingChangeRequests_LadingChangeRequestId",
                        column: x => x.LadingChangeRequestId,
                        principalTable: "LadingChangeRequests",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "DeleteLadingItemDetailInput",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LadingIemId = table.Column<int>(type: "int", nullable: false),
                    CargoItemId = table.Column<int>(type: "int", nullable: false),
                    LadingItemDetailId = table.Column<int>(type: "int", nullable: false),
                    LadingChangeRequestId = table.Column<int>(type: "int", nullable: false),
                    LadingItemDetailRowVersion = table.Column<byte[]>(type: "varbinary(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_DeleteLadingItemDetailInput", x => x.Id);
                    table.ForeignKey(
                        name: "FK_DeleteLadingItemDetailInput_LadingChangeRequests_LadingChangeRequestId",
                        column: x => x.LadingChangeRequestId,
                        principalTable: "LadingChangeRequests",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "EditLadingItemDetailInput",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Qty = table.Column<double>(type: "float", nullable: false),
                    LadingIemId = table.Column<int>(type: "int", nullable: false),
                    CargoItemId = table.Column<int>(type: "int", nullable: false),
                    CargoItemDetailId = table.Column<int>(type: "int", nullable: false),
                    LadingItemDetailId = table.Column<int>(type: "int", nullable: false),
                    LadingChangeRequestId = table.Column<int>(type: "int", nullable: false),
                    LadingItemDetailRowVersion = table.Column<byte[]>(type: "varbinary(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EditLadingItemDetailInput", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EditLadingItemDetailInput_LadingChangeRequests_LadingChangeRequestId",
                        column: x => x.LadingChangeRequestId,
                        principalTable: "LadingChangeRequests",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ExitReceiptDeleteRequests",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreateDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    ChangeStatusDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CreatorUserId = table.Column<int>(type: "int", nullable: false),
                    ChangeStatusUserId = table.Column<int>(type: "int", nullable: true),
                    Status = table.Column<byte>(type: "tinyint", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ExitReceiptId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ExitReceiptDeleteRequests", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ExitReceiptDeleteRequests_BaseEntities_ExitReceipt_ExitReceiptId",
                        column: x => x.ExitReceiptId,
                        principalTable: "BaseEntities_ExitReceipt",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ExitReceiptDeleteRequests_Users_ChangeStatusUserId",
                        column: x => x.ChangeStatusUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ExitReceiptDeleteRequests_Users_CreatorUserId",
                        column: x => x.CreatorUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ScrumEntities_Project",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ScrumEntities_Project", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ScrumEntities_Project_ScrumEntities_ScrumProject_Id",
                        column: x => x.Id,
                        principalTable: "ScrumEntities_ScrumProject",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ScrumEntities_ScrumSprint",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    ScrumProjectId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ScrumEntities_ScrumSprint", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ScrumEntities_ScrumSprint_ScrumEntities_Id",
                        column: x => x.Id,
                        principalTable: "ScrumEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ScrumEntities_ScrumSprint_ScrumEntities_ScrumProject_ScrumProjectId",
                        column: x => x.ScrumProjectId,
                        principalTable: "ScrumEntities_ScrumProject",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Machines",
                columns: table => new
                {
                    Id = table.Column<short>(type: "smallint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    MachineTypeId = table.Column<short>(type: "smallint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Machines", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Machines_WorkStationParts_MachineType_MachineTypeId",
                        column: x => x.MachineTypeId,
                        principalTable: "WorkStationParts_MachineType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "MachineTypeParameters",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    MachineTypeId = table.Column<short>(type: "smallint", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MachineTypeParameters", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MachineTypeParameters_WorkStationParts_MachineType_MachineTypeId",
                        column: x => x.MachineTypeId,
                        principalTable: "WorkStationParts_MachineType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "EmployeeOperatorTypes",
                columns: table => new
                {
                    EmployeeId = table.Column<int>(type: "int", nullable: false),
                    OperatorTypeId = table.Column<short>(type: "smallint", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeeOperatorTypes", x => new { x.EmployeeId, x.OperatorTypeId });
                    table.ForeignKey(
                        name: "FK_EmployeeOperatorTypes_Employees_EmployeeId",
                        column: x => x.EmployeeId,
                        principalTable: "Employees",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeeOperatorTypes_WorkStationParts_OperatorType_OperatorTypeId",
                        column: x => x.OperatorTypeId,
                        principalTable: "WorkStationParts_OperatorType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "MachineTypeOperatorTypes",
                columns: table => new
                {
                    Id = table.Column<short>(type: "smallint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    OperatorTypeId = table.Column<short>(type: "smallint", nullable: false),
                    MachineTypeId = table.Column<short>(type: "smallint", nullable: false),
                    Title = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IsNecessary = table.Column<bool>(type: "bit", nullable: false),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MachineTypeOperatorTypes", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MachineTypeOperatorTypes_WorkStationParts_MachineType_MachineTypeId",
                        column: x => x.MachineTypeId,
                        principalTable: "WorkStationParts_MachineType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_MachineTypeOperatorTypes_WorkStationParts_OperatorType_OperatorTypeId",
                        column: x => x.OperatorTypeId,
                        principalTable: "WorkStationParts_OperatorType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ResponsibleDepartment",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EmployeeComplainDepartmentId = table.Column<int>(type: "int", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    Opinion = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ResponsibleDepartment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ResponsibleDepartment_EmployeeComplainDepartment_EmployeeComplainDepartmentId",
                        column: x => x.EmployeeComplainDepartmentId,
                        principalTable: "EmployeeComplainDepartment",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ExitReceiptDeleteRequestConfirmationLogs",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ExitReceiptDeleteRequestId = table.Column<int>(type: "int", nullable: false),
                    ConfirmerUserId = table.Column<int>(type: "int", nullable: false),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Status = table.Column<byte>(type: "tinyint", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ExitReceiptDeleteRequestConfirmationLogs", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ExitReceiptDeleteRequestConfirmationLogs_ExitReceiptDeleteRequests_ExitReceiptDeleteRequestId",
                        column: x => x.ExitReceiptDeleteRequestId,
                        principalTable: "ExitReceiptDeleteRequests",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ExitReceiptDeleteRequestConfirmationLogs_Users_ConfirmerUserId",
                        column: x => x.ConfirmerUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProjectRelatedPeoples",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Post = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PhoneNumber = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ProjectId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProjectRelatedPeoples", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProjectRelatedPeoples_ScrumEntities_Project_ProjectId",
                        column: x => x.ProjectId,
                        principalTable: "ScrumEntities_Project",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ScrumEntities_ProductRequest",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    Response = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ScrumEntities_ProductRequest", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ScrumEntities_ProductRequest_ScrumEntities_Project_Id",
                        column: x => x.Id,
                        principalTable: "ScrumEntities_Project",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ScrumEntities_ProjectStep",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ScrumEntities_ProjectStep", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ScrumEntities_ProjectStep_ScrumEntities_ScrumSprint_Id",
                        column: x => x.Id,
                        principalTable: "ScrumEntities_ScrumSprint",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ScrumEntities_ScrumBackLog",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    ScrumSprintId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ScrumEntities_ScrumBackLog", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ScrumEntities_ScrumBackLog_ScrumEntities_Id",
                        column: x => x.Id,
                        principalTable: "ScrumEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ScrumEntities_ScrumBackLog_ScrumEntities_ScrumSprint_ScrumSprintId",
                        column: x => x.ScrumSprintId,
                        principalTable: "ScrumEntities_ScrumSprint",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ScrumEntities_ProjectWork",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ScrumEntities_ProjectWork", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ScrumEntities_ProjectWork_ScrumEntities_ScrumBackLog_Id",
                        column: x => x.Id,
                        principalTable: "ScrumEntities_ScrumBackLog",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ScrumEntities_ScrumTask",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    ScrumTaskTypeId = table.Column<int>(type: "int", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: true),
                    SpentTime = table.Column<long>(type: "bigint", nullable: false),
                    RemainedTime = table.Column<long>(type: "bigint", nullable: false),
                    ScrumBackLogId = table.Column<int>(type: "int", nullable: false),
                    ScrumTaskStep = table.Column<byte>(type: "tinyint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ScrumEntities_ScrumTask", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ScrumEntities_ScrumTask_ScrumEntities_Id",
                        column: x => x.Id,
                        principalTable: "ScrumEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ScrumEntities_ScrumTask_ScrumEntities_ScrumBackLog_ScrumBackLogId",
                        column: x => x.ScrumBackLogId,
                        principalTable: "ScrumEntities_ScrumBackLog",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ScrumEntities_ScrumTask_ScrumTaskTypes_ScrumTaskTypeId",
                        column: x => x.ScrumTaskTypeId,
                        principalTable: "ScrumTaskTypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ScrumEntities_ScrumTask_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ScrumEntities_ProjectWorkItem",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ScrumEntities_ProjectWorkItem", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ScrumEntities_ProjectWorkItem_ScrumEntities_ScrumTask_Id",
                        column: x => x.Id,
                        principalTable: "ScrumEntities_ScrumTask",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BankOrderIssues",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    DeletedAt = table.Column<DateTime>(type: "datetime2", nullable: true),
                    FinancialDocumentId = table.Column<int>(type: "int", nullable: false),
                    Number = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    BankOrderIssueTypeId = table.Column<int>(type: "int", nullable: false),
                    AllocationId = table.Column<int>(type: "int", nullable: false),
                    NetAmountPaid = table.Column<double>(type: "float", nullable: false),
                    ConvertRate = table.Column<double>(type: "float", nullable: false),
                    CurrencyFee = table.Column<double>(type: "float", nullable: false),
                    RialFee = table.Column<double>(type: "float", nullable: false),
                    DailyUSDRate = table.Column<double>(type: "float", nullable: false),
                    FinishedCurrencyRate = table.Column<double>(type: "float", nullable: false),
                    DailyExchangeRateUSD = table.Column<double>(type: "float", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BankOrderIssues", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BankOrderIssues_Allocations_AllocationId",
                        column: x => x.AllocationId,
                        principalTable: "Allocations",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BankOrderIssues_BankOrderIssueTypes_BankOrderIssueTypeId",
                        column: x => x.BankOrderIssueTypeId,
                        principalTable: "BankOrderIssueTypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "AssetLogs",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AssetId = table.Column<int>(type: "int", nullable: false),
                    EmployeeId = table.Column<int>(type: "int", nullable: true),
                    DepartmentId = table.Column<short>(type: "smallint", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    CreateDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AssetLogs", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AssetLogs_Departments_DepartmentId",
                        column: x => x.DepartmentId,
                        principalTable: "Departments",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_AssetLogs_Employees_EmployeeId",
                        column: x => x.EmployeeId,
                        principalTable: "Employees",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_AssetLogs_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "AssetTransferRequests",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AssetId = table.Column<int>(type: "int", nullable: false),
                    NewEmployeeId = table.Column<int>(type: "int", nullable: true),
                    NewDepartmentId = table.Column<short>(type: "smallint", nullable: true),
                    RequestingUserId = table.Column<int>(type: "int", nullable: false),
                    ConfirmerUserId = table.Column<int>(type: "int", nullable: true),
                    RequestDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    ConfirmDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Status = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AssetTransferRequests", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AssetTransferRequests_Departments_NewDepartmentId",
                        column: x => x.NewDepartmentId,
                        principalTable: "Departments",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_AssetTransferRequests_Employees_NewEmployeeId",
                        column: x => x.NewEmployeeId,
                        principalTable: "Employees",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_AssetTransferRequests_Users_ConfirmerUserId",
                        column: x => x.ConfirmerUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_AssetTransferRequests_Users_RequestingUserId",
                        column: x => x.RequestingUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_BillOfMaterialPublishRequest",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    BillOfMaterialVersion = table.Column<short>(type: "smallint", nullable: false),
                    BillOfMaterialStuffId = table.Column<int>(type: "int", nullable: false),
                    Status = table.Column<byte>(type: "tinyint", nullable: false),
                    Type = table.Column<byte>(type: "tinyint", nullable: false),
                    BillOfMaterialStuffId1 = table.Column<int>(type: "int", nullable: true),
                    BillOfMaterialVersion1 = table.Column<short>(type: "smallint", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_BillOfMaterialPublishRequest", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_BillOfMaterialPublishRequest_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_CargoItem",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    CargoId = table.Column<int>(type: "int", nullable: false),
                    PurchaseOrderId = table.Column<int>(type: "int", nullable: false),
                    Qty = table.Column<double>(type: "float", nullable: false),
                    UnitId = table.Column<byte>(type: "tinyint", nullable: false),
                    Status = table.Column<short>(type: "smallint", nullable: false),
                    LadingId = table.Column<int>(type: "int", nullable: true),
                    HowToBuyId = table.Column<short>(type: "smallint", nullable: false),
                    EstimateDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    CargoItemDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    IsArchived = table.Column<bool>(type: "bit", nullable: false),
                    ForwarderId = table.Column<int>(type: "int", nullable: true),
                    ForwarderDocumentId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    BuyingProcess = table.Column<byte>(type: "tinyint", nullable: true),
                    LatestRiskId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_CargoItem", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_CargoItem_BaseEntities_Cargo_CargoId",
                        column: x => x.CargoId,
                        principalTable: "BaseEntities_Cargo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_CargoItem_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_CargoItem_Forwarders_ForwarderId",
                        column: x => x.ForwarderId,
                        principalTable: "Forwarders",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_CargoItem_HowToBuys_HowToBuyId",
                        column: x => x.HowToBuyId,
                        principalTable: "HowToBuys",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_CargoItem_Units_UnitId",
                        column: x => x.UnitId,
                        principalTable: "Units",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_LadingItem",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    Qty = table.Column<double>(type: "float", nullable: false),
                    LadingId = table.Column<int>(type: "int", nullable: false),
                    CargoItemId = table.Column<int>(type: "int", nullable: false),
                    Status = table.Column<short>(type: "smallint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_LadingItem", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_LadingItem_BaseEntities_CargoItem_CargoItemId",
                        column: x => x.CargoItemId,
                        principalTable: "BaseEntities_CargoItem",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_LadingItem_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_LadingItem_BaseEntities_Lading_LadingId",
                        column: x => x.LadingId,
                        principalTable: "BaseEntities_Lading",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_PurchaseStep",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    HowToBuyDetailId = table.Column<int>(type: "int", nullable: false),
                    FollowUpDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    IsCurrentStep = table.Column<bool>(type: "bit", nullable: false),
                    CargoItemId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_PurchaseStep", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_PurchaseStep_BaseEntities_CargoItem_CargoItemId",
                        column: x => x.CargoItemId,
                        principalTable: "BaseEntities_CargoItem",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_PurchaseStep_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_PurchaseStep_HowToBuyDetails_HowToBuyDetailId",
                        column: x => x.HowToBuyDetailId,
                        principalTable: "HowToBuyDetails",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CargoItemLogs",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ModifierUserId = table.Column<int>(type: "int", nullable: false),
                    ModifyDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    CargoItemId = table.Column<int>(type: "int", nullable: false),
                    CargoItemCode = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    DeletedAt = table.Column<DateTime>(type: "datetime2", nullable: true),
                    NewCargoItemQty = table.Column<double>(type: "float", nullable: false),
                    OldCargoItemDetailQty = table.Column<double>(type: "float", nullable: false),
                    CargoItemLogStatus = table.Column<byte>(type: "tinyint", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CargoItemLogs", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CargoItemLogs_BaseEntities_CargoItem_CargoItemId",
                        column: x => x.CargoItemId,
                        principalTable: "BaseEntities_CargoItem",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CargoItemLogs_Users_ModifierUserId",
                        column: x => x.ModifierUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CargoItemSummaries",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ReceiptedQty = table.Column<double>(type: "float", nullable: false),
                    QualityControlPassedQty = table.Column<double>(type: "float", nullable: false),
                    QualityControlFailedQty = table.Column<double>(type: "float", nullable: false),
                    CargoItemId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    LadingItemQty = table.Column<double>(type: "float", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CargoItemSummaries", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CargoItemSummaries_BaseEntities_CargoItem_CargoItemId",
                        column: x => x.CargoItemId,
                        principalTable: "BaseEntities_CargoItem",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "LadingItemSummaries",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ReceiptedQty = table.Column<double>(type: "float", nullable: false),
                    QualityControlPassedQty = table.Column<double>(type: "float", nullable: false),
                    QualityControlFailedQty = table.Column<double>(type: "float", nullable: false),
                    LadingItemId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LadingItemSummaries", x => x.Id);
                    table.ForeignKey(
                        name: "FK_LadingItemSummaries_BaseEntities_LadingItem_LadingItemId",
                        column: x => x.LadingItemId,
                        principalTable: "BaseEntities_LadingItem",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_CargoItemDetail",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    CargoItemId = table.Column<int>(type: "int", nullable: false),
                    PurchaseOrderDetailId = table.Column<int>(type: "int", nullable: true),
                    Qty = table.Column<double>(type: "float", nullable: false),
                    UnitId = table.Column<byte>(type: "tinyint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_CargoItemDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_CargoItemDetail_BaseEntities_CargoItem_CargoItemId",
                        column: x => x.CargoItemId,
                        principalTable: "BaseEntities_CargoItem",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_CargoItemDetail_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_CargoItemDetail_Units_UnitId",
                        column: x => x.UnitId,
                        principalTable: "Units",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_LadingItemDetail",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    Qty = table.Column<double>(type: "float", nullable: false),
                    LadingItemId = table.Column<int>(type: "int", nullable: false),
                    CargoItemDetailId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_LadingItemDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_LadingItemDetail_BaseEntities_CargoItemDetail_CargoItemDetailId",
                        column: x => x.CargoItemDetailId,
                        principalTable: "BaseEntities_CargoItemDetail",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_LadingItemDetail_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_LadingItemDetail_BaseEntities_LadingItem_LadingItemId",
                        column: x => x.LadingItemId,
                        principalTable: "BaseEntities_LadingItem",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CargoItemDetailSummaries",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ReceiptedQty = table.Column<double>(type: "float", nullable: false),
                    QualityControlPassedQty = table.Column<double>(type: "float", nullable: false),
                    QualityControlFailedQty = table.Column<double>(type: "float", nullable: false),
                    LadingItemDetailQty = table.Column<double>(type: "float", nullable: false),
                    CargoItemDetailId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CargoItemDetailSummaries", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CargoItemDetailSummaries_BaseEntities_CargoItemDetail_CargoItemDetailId",
                        column: x => x.CargoItemDetailId,
                        principalTable: "BaseEntities_CargoItemDetail",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "LadingItemDetailSummaries",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ReceiptedQty = table.Column<double>(type: "float", nullable: false),
                    QualityControlPassedQty = table.Column<double>(type: "float", nullable: false),
                    QualityControlFailedQty = table.Column<double>(type: "float", nullable: false),
                    LadingItemDetailId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LadingItemDetailSummaries", x => x.Id);
                    table.ForeignKey(
                        name: "FK_LadingItemDetailSummaries_BaseEntities_LadingItemDetail_LadingItemDetailId",
                        column: x => x.LadingItemDetailId,
                        principalTable: "BaseEntities_LadingItemDetail",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_CheckOrderItem",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    OrderItemConfirmationId = table.Column<int>(type: "int", nullable: false),
                    Confirmed = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_CheckOrderItem", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_CheckOrderItem_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_ProductionRequest",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    Qty = table.Column<double>(type: "float", nullable: false),
                    UnitId = table.Column<byte>(type: "tinyint", nullable: false),
                    DeadlineDate = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    CheckOrderItemId = table.Column<int>(type: "int", nullable: false),
                    Status = table.Column<short>(type: "smallint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_ProductionRequest", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ProductionRequest_BaseEntities_CheckOrderItem_CheckOrderItemId",
                        column: x => x.CheckOrderItemId,
                        principalTable: "BaseEntities_CheckOrderItem",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ProductionRequest_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ProductionRequest_Units_UnitId",
                        column: x => x.UnitId,
                        principalTable: "Units",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProductionRequestSummaries",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PlannedQty = table.Column<double>(type: "float", nullable: false),
                    ScheduledQty = table.Column<double>(type: "float", nullable: false),
                    ProducedQty = table.Column<double>(type: "float", nullable: false),
                    ProductionRequestId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductionRequestSummaries", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProductionRequestSummaries_BaseEntities_ProductionRequest_ProductionRequestId",
                        column: x => x.ProductionRequestId,
                        principalTable: "BaseEntities_ProductionRequest",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_ConditionalQualityControl",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    QualityControlAccepterId = table.Column<int>(type: "int", nullable: false),
                    QualityControlConfirmationId = table.Column<int>(type: "int", nullable: false),
                    WarrantyExpirationExceptionTypeId = table.Column<int>(type: "int", nullable: true),
                    ResponseConditionalConfirmationDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ResponseConditionalConfirmationUserId = table.Column<int>(type: "int", nullable: true),
                    Status = table.Column<byte>(type: "tinyint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_ConditionalQualityControl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ConditionalQualityControl_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ConditionalQualityControl_QualityControlAccepters_QualityControlAccepterId",
                        column: x => x.QualityControlAccepterId,
                        principalTable: "QualityControlAccepters",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ConditionalQualityControl_Users_ResponseConditionalConfirmationUserId",
                        column: x => x.ResponseConditionalConfirmationUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ConditionalQualityControl_WarrantyExpirationExceptionTypes_WarrantyExpirationExceptionTypeId",
                        column: x => x.WarrantyExpirationExceptionTypeId,
                        principalTable: "WarrantyExpirationExceptionTypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_ResponseConditionalQualityControl",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    Status = table.Column<byte>(type: "tinyint", nullable: false),
                    ConditionalQualityControlId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_ResponseConditionalQualityControl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ResponseConditionalQualityControl_BaseEntities_ConditionalQualityControl_ConditionalQualityControlId",
                        column: x => x.ConditionalQualityControlId,
                        principalTable: "BaseEntities_ConditionalQualityControl",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ResponseConditionalQualityControl_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_ConditionalQualityControlItem",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    ConditionalQualityControlId = table.Column<int>(type: "int", nullable: false),
                    QualityControlConfirmationItemId = table.Column<int>(type: "int", nullable: false),
                    Qty = table.Column<double>(type: "float", nullable: false),
                    UnitId = table.Column<byte>(type: "tinyint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_ConditionalQualityControlItem", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ConditionalQualityControlItem_BaseEntities_ConditionalQualityControl_ConditionalQualityControlId",
                        column: x => x.ConditionalQualityControlId,
                        principalTable: "BaseEntities_ConditionalQualityControl",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ConditionalQualityControlItem_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ConditionalQualityControlItem_Units_UnitId",
                        column: x => x.UnitId,
                        principalTable: "Units",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_Decomposition",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    StuffId = table.Column<int>(type: "int", nullable: false),
                    StuffSerialCode = table.Column<long>(type: "bigint", nullable: true),
                    ProductionOperationId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_Decomposition", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_Decomposition_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_EquivalentStuffUsage",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    EquivalentStuffId = table.Column<int>(type: "int", nullable: false),
                    UsageQty = table.Column<double>(type: "float", nullable: false),
                    Status = table.Column<byte>(type: "tinyint", nullable: false),
                    ProductionPlanDetailId = table.Column<int>(type: "int", nullable: true),
                    ProductionOrderId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_EquivalentStuffUsage", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_EquivalentStuffUsage_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_EquivalentStuffUsageConfirmation",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    EquivalentStuffUsageId = table.Column<int>(type: "int", nullable: false),
                    Status = table.Column<byte>(type: "tinyint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_EquivalentStuffUsageConfirmation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_EquivalentStuffUsageConfirmation_BaseEntities_EquivalentStuffUsage_EquivalentStuffUsageId",
                        column: x => x.EquivalentStuffUsageId,
                        principalTable: "BaseEntities_EquivalentStuffUsage",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_EquivalentStuffUsageConfirmation_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_ExitReceiptRequest",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    Qty = table.Column<double>(type: "float", nullable: false),
                    UnitId = table.Column<byte>(type: "tinyint", nullable: false),
                    ExitReceiptRequestTypeId = table.Column<int>(type: "int", nullable: false),
                    WarehouseId = table.Column<short>(type: "smallint", nullable: false),
                    StuffId = table.Column<int>(type: "int", nullable: false),
                    Status = table.Column<short>(type: "smallint", nullable: false),
                    Address = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CooperatorId = table.Column<int>(type: "int", nullable: false),
                    PriceAnnunciationItemId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_ExitReceiptRequest", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ExitReceiptRequest_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ExitReceiptRequest_Cooperators_CooperatorId",
                        column: x => x.CooperatorId,
                        principalTable: "Cooperators",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ExitReceiptRequest_ExitReceiptRequestTypes_ExitReceiptRequestTypeId",
                        column: x => x.ExitReceiptRequestTypeId,
                        principalTable: "ExitReceiptRequestTypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ExitReceiptRequest_Units_UnitId",
                        column: x => x.UnitId,
                        principalTable: "Units",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ExitReceiptRequest_Warehouses_WarehouseId",
                        column: x => x.WarehouseId,
                        principalTable: "Warehouses",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_SendPermission",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    Qty = table.Column<double>(type: "float", nullable: false),
                    UnitId = table.Column<byte>(type: "tinyint", nullable: false),
                    SendPermissionStatusType = table.Column<short>(type: "smallint", nullable: false),
                    ExitReceiptRequestId = table.Column<int>(type: "int", nullable: false),
                    ConfirmDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ConfirmerUserId = table.Column<int>(type: "int", nullable: true),
                    ConfirmDescription = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_SendPermission", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_SendPermission_BaseEntities_ExitReceiptRequest_ExitReceiptRequestId",
                        column: x => x.ExitReceiptRequestId,
                        principalTable: "BaseEntities_ExitReceiptRequest",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_SendPermission_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_SendPermission_Units_UnitId",
                        column: x => x.UnitId,
                        principalTable: "Units",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_SendPermission_Users_ConfirmerUserId",
                        column: x => x.ConfirmerUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ExitReceiptRequestSummaries",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PermissionQty = table.Column<double>(type: "float", nullable: false),
                    PreparingSendingQty = table.Column<double>(type: "float", nullable: false),
                    SendedQty = table.Column<double>(type: "float", nullable: false),
                    ExitReceiptRequestId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ExitReceiptRequestSummaries", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ExitReceiptRequestSummaries_BaseEntities_ExitReceiptRequest_ExitReceiptRequestId",
                        column: x => x.ExitReceiptRequestId,
                        principalTable: "BaseEntities_ExitReceiptRequest",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_PreparingSending",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    SendPermissionId = table.Column<int>(type: "int", nullable: false),
                    Status = table.Column<byte>(type: "tinyint", nullable: false),
                    Qty = table.Column<double>(type: "float", nullable: false),
                    UnitId = table.Column<byte>(type: "tinyint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_PreparingSending", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_PreparingSending_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_PreparingSending_BaseEntities_SendPermission_SendPermissionId",
                        column: x => x.SendPermissionId,
                        principalTable: "BaseEntities_SendPermission",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_PreparingSending_Units_UnitId",
                        column: x => x.UnitId,
                        principalTable: "Units",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SendPermissionSummaries",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PreparingSendingQty = table.Column<double>(type: "float", nullable: false),
                    SendedQty = table.Column<double>(type: "float", nullable: false),
                    SendPermissionId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SendPermissionSummaries", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SendPermissionSummaries_BaseEntities_SendPermission_SendPermissionId",
                        column: x => x.SendPermissionId,
                        principalTable: "BaseEntities_SendPermission",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_SendProduct",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    ExitReceiptId = table.Column<int>(type: "int", nullable: false),
                    PreparingSendingId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_SendProduct", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_SendProduct_BaseEntities_ExitReceipt_ExitReceiptId",
                        column: x => x.ExitReceiptId,
                        principalTable: "BaseEntities_ExitReceipt",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_SendProduct_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_SendProduct_BaseEntities_PreparingSending_PreparingSendingId",
                        column: x => x.PreparingSendingId,
                        principalTable: "BaseEntities_PreparingSending",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_FinancialDocument",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    Type = table.Column<byte>(type: "tinyint", nullable: false),
                    FinancialAccountId = table.Column<int>(type: "int", nullable: false),
                    DocumentId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    DocumentDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    DebitAmount = table.Column<double>(type: "float", nullable: false),
                    CreditAmount = table.Column<double>(type: "float", nullable: false),
                    FinanceId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_FinancialDocument", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_FinancialDocument_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_FinancialDocument_FinancialAccounts_FinancialAccountId",
                        column: x => x.FinancialAccountId,
                        principalTable: "FinancialAccounts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "FinancialDocumentBankOrders",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BankOrderId = table.Column<int>(type: "int", nullable: false),
                    BankOrderAmount = table.Column<double>(type: "float", nullable: false),
                    FOB = table.Column<double>(type: "float", nullable: false),
                    TransferCost = table.Column<double>(type: "float", nullable: false),
                    FinancialDocumentId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinancialDocumentBankOrders", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinancialDocumentBankOrders_BaseEntities_BankOrder_BankOrderId",
                        column: x => x.BankOrderId,
                        principalTable: "BaseEntities_BankOrder",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FinancialDocumentBankOrders_BaseEntities_FinancialDocument_FinancialDocumentId",
                        column: x => x.FinancialDocumentId,
                        principalTable: "BaseEntities_FinancialDocument",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "FinancialDocumentBeginnings",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FinancialDocumentId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    FinancialTransactionLevel = table.Column<byte>(type: "tinyint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinancialDocumentBeginnings", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinancialDocumentBeginnings_BaseEntities_FinancialDocument_FinancialDocumentId",
                        column: x => x.FinancialDocumentId,
                        principalTable: "BaseEntities_FinancialDocument",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "FinancialDocumentCorrections",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    FinancialDocumentId = table.Column<int>(type: "int", nullable: false),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    FinancialTransactionLevel = table.Column<byte>(type: "tinyint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinancialDocumentCorrections", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinancialDocumentCorrections_BaseEntities_FinancialDocument_FinancialDocumentId",
                        column: x => x.FinancialDocumentId,
                        principalTable: "BaseEntities_FinancialDocument",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "FinancialDocumentCosts",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CostType = table.Column<byte>(type: "tinyint", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    CargoWeight = table.Column<double>(type: "float", nullable: true),
                    LadingWeight = table.Column<double>(type: "float", nullable: true),
                    PurchaseOrderWeight = table.Column<double>(type: "float", nullable: true),
                    EntranceRightsCost = table.Column<double>(type: "float", nullable: true),
                    KotazhTransPort = table.Column<double>(type: "float", nullable: true),
                    FinancialDocumentId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinancialDocumentCosts", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinancialDocumentCosts_BaseEntities_FinancialDocument_FinancialDocumentId",
                        column: x => x.FinancialDocumentId,
                        principalTable: "BaseEntities_FinancialDocument",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "FinancialDocumentDiscounts",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DiscountType = table.Column<byte>(type: "tinyint", nullable: false),
                    FinancialDocumentId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinancialDocumentDiscounts", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinancialDocumentDiscounts_BaseEntities_FinancialDocument_FinancialDocumentId",
                        column: x => x.FinancialDocumentId,
                        principalTable: "BaseEntities_FinancialDocument",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "FinancialDocumentTransfers",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    ToFinancialAccountId = table.Column<int>(type: "int", nullable: false),
                    ToDebitAmount = table.Column<double>(type: "float", nullable: false),
                    FinancialDocumentId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinancialDocumentTransfers", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinancialDocumentTransfers_BaseEntities_FinancialDocument_FinancialDocumentId",
                        column: x => x.FinancialDocumentId,
                        principalTable: "BaseEntities_FinancialDocument",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FinancialDocumentTransfers_FinancialAccounts_ToFinancialAccountId",
                        column: x => x.ToFinancialAccountId,
                        principalTable: "FinancialAccounts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BankOrderCosts",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    FinancialDocumentCostId = table.Column<int>(type: "int", nullable: false),
                    Amount = table.Column<double>(type: "float", nullable: false),
                    BankOrderId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BankOrderCosts", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BankOrderCosts_BaseEntities_BankOrder_BankOrderId",
                        column: x => x.BankOrderId,
                        principalTable: "BaseEntities_BankOrder",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BankOrderCosts_FinancialDocumentCosts_FinancialDocumentCostId",
                        column: x => x.FinancialDocumentCostId,
                        principalTable: "FinancialDocumentCosts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CargoCosts",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FinancialDocumentCostId = table.Column<int>(type: "int", nullable: false),
                    Amount = table.Column<double>(type: "float", nullable: false),
                    CargoId = table.Column<int>(type: "int", nullable: true),
                    CargoItemId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CargoCosts", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CargoCosts_BaseEntities_Cargo_CargoId",
                        column: x => x.CargoId,
                        principalTable: "BaseEntities_Cargo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CargoCosts_BaseEntities_CargoItem_CargoItemId",
                        column: x => x.CargoItemId,
                        principalTable: "BaseEntities_CargoItem",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_CargoCosts_FinancialDocumentCosts_FinancialDocumentCostId",
                        column: x => x.FinancialDocumentCostId,
                        principalTable: "FinancialDocumentCosts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "LadingCosts",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FinancialDocumentCostId = table.Column<int>(type: "int", nullable: false),
                    Amount = table.Column<double>(type: "float", nullable: false),
                    LadingId = table.Column<int>(type: "int", nullable: true),
                    LadingItemId = table.Column<int>(type: "int", nullable: false),
                    IsTemp = table.Column<bool>(type: "bit", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LadingCosts", x => x.Id);
                    table.ForeignKey(
                        name: "FK_LadingCosts_BaseEntities_Lading_LadingId",
                        column: x => x.LadingId,
                        principalTable: "BaseEntities_Lading",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_LadingCosts_BaseEntities_LadingItem_LadingItemId",
                        column: x => x.LadingItemId,
                        principalTable: "BaseEntities_LadingItem",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_LadingCosts_FinancialDocumentCosts_FinancialDocumentCostId",
                        column: x => x.FinancialDocumentCostId,
                        principalTable: "FinancialDocumentCosts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_ManualTransaction",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    StuffId = table.Column<int>(type: "int", nullable: true),
                    BillOfMaterialVersion = table.Column<int>(type: "int", nullable: true),
                    ProviderId = table.Column<int>(type: "int", nullable: true),
                    WarehouseId = table.Column<short>(type: "smallint", nullable: true),
                    Qty = table.Column<int>(type: "int", nullable: false),
                    QtyPerBox = table.Column<int>(type: "int", nullable: false),
                    UnitId = table.Column<byte>(type: "tinyint", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_ManualTransaction", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ManualTransaction_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ManualTransaction_Cooperators_ProviderId",
                        column: x => x.ProviderId,
                        principalTable: "Cooperators",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ManualTransaction_Units_UnitId",
                        column: x => x.UnitId,
                        principalTable: "Units",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ManualTransaction_Warehouses_WarehouseId",
                        column: x => x.WarehouseId,
                        principalTable: "Warehouses",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_NewShoppingDetail",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    NewShoppingId = table.Column<int>(type: "int", nullable: false),
                    Qty = table.Column<double>(type: "float", nullable: false),
                    UnitId = table.Column<byte>(type: "tinyint", nullable: false),
                    LadingItemDetailId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_NewShoppingDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_NewShoppingDetail_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_NewShoppingDetail_BaseEntities_LadingItemDetail_LadingItemDetailId",
                        column: x => x.LadingItemDetailId,
                        principalTable: "BaseEntities_LadingItemDetail",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_NewShoppingDetail_Units_UnitId",
                        column: x => x.UnitId,
                        principalTable: "Units",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "NewShoppingDetailSummaries",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    QualityControlPassedQty = table.Column<double>(type: "float", nullable: false),
                    QualityControlFailedQty = table.Column<double>(type: "float", nullable: false),
                    QualityControlConsumedQty = table.Column<double>(type: "float", nullable: false),
                    NewShoppingDetailId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_NewShoppingDetailSummaries", x => x.Id);
                    table.ForeignKey(
                        name: "FK_NewShoppingDetailSummaries_BaseEntities_NewShoppingDetail_NewShoppingDetailId",
                        column: x => x.NewShoppingDetailId,
                        principalTable: "BaseEntities_NewShoppingDetail",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_OrderItem",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    OrderId = table.Column<int>(type: "int", nullable: false),
                    StuffId = table.Column<int>(type: "int", nullable: false),
                    Qty = table.Column<double>(type: "float", nullable: false),
                    CanceledQty = table.Column<double>(type: "float", nullable: false),
                    UnitId = table.Column<byte>(type: "tinyint", nullable: false),
                    DeliveryDate = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    RequestDate = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    BillOfMaterialVersion = table.Column<short>(type: "smallint", nullable: true),
                    Status = table.Column<int>(type: "int", nullable: false),
                    HasChange = table.Column<bool>(type: "bit", nullable: false),
                    OrderItemConfirmationDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    OrderItemConfirmationConfirmed = table.Column<bool>(type: "bit", nullable: true),
                    OrderItemHasActivated = table.Column<bool>(type: "bit", nullable: true),
                    CheckOrderItemDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CheckOrderItemConfirmed = table.Column<bool>(type: "bit", nullable: true),
                    OrderItemChangeStatus = table.Column<byte>(type: "tinyint", nullable: false),
                    IsArchive = table.Column<bool>(type: "bit", nullable: false),
                    ProductPackBillOfMaterialVersion = table.Column<short>(type: "smallint", nullable: true),
                    ProductPackBillOfMaterialStuffId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_OrderItem", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_OrderItem_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_OrderItem_Orders_OrderId",
                        column: x => x.OrderId,
                        principalTable: "Orders",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_OrderItem_Units_UnitId",
                        column: x => x.UnitId,
                        principalTable: "Units",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_OrderItemBlock",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    OrderItemId = table.Column<int>(type: "int", nullable: false),
                    OrderItemBlockType = table.Column<byte>(type: "tinyint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_OrderItemBlock", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_OrderItemBlock_BaseEntities_ExitReceiptRequest_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities_ExitReceiptRequest",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_OrderItemBlock_BaseEntities_OrderItem_OrderItemId",
                        column: x => x.OrderItemId,
                        principalTable: "BaseEntities_OrderItem",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_OrderItemChangeRequest",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    Qty = table.Column<double>(type: "float", nullable: false),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    RequestDate = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    DeliveryDate = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    OrderItemId = table.Column<int>(type: "int", nullable: false),
                    UnitId = table.Column<byte>(type: "tinyint", nullable: false),
                    OrderItemChangeStatus = table.Column<byte>(type: "tinyint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_OrderItemChangeRequest", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_OrderItemChangeRequest_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_OrderItemChangeRequest_BaseEntities_OrderItem_OrderItemId",
                        column: x => x.OrderItemId,
                        principalTable: "BaseEntities_OrderItem",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_OrderItemChangeRequest_Units_UnitId",
                        column: x => x.UnitId,
                        principalTable: "Units",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_OrderItemConfirmation",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    Confirmed = table.Column<bool>(type: "bit", nullable: false),
                    OrderItemId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_OrderItemConfirmation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_OrderItemConfirmation_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_OrderItemConfirmation_BaseEntities_OrderItem_OrderItemId",
                        column: x => x.OrderItemId,
                        principalTable: "BaseEntities_OrderItem",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "OrderItemSummaries",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PlannedQty = table.Column<double>(type: "float", nullable: false),
                    ProducedQty = table.Column<double>(type: "float", nullable: false),
                    BlockedQty = table.Column<double>(type: "float", nullable: false),
                    PermissionQty = table.Column<double>(type: "float", nullable: false),
                    PreparingSendingQty = table.Column<double>(type: "float", nullable: false),
                    SendedQty = table.Column<double>(type: "float", nullable: false),
                    SentToOtherCustomersQty = table.Column<double>(type: "float", nullable: false),
                    BlockedQtyOtherCustomers = table.Column<double>(type: "float", nullable: false),
                    OrderItemId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OrderItemSummaries", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OrderItemSummaries_BaseEntities_OrderItem_OrderItemId",
                        column: x => x.OrderItemId,
                        principalTable: "BaseEntities_OrderItem",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_OrderItemProductionBlock",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_OrderItemProductionBlock", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_OrderItemProductionBlock_BaseEntities_OrderItemBlock_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities_OrderItemBlock",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_OrderItemSaleBlock",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    CheckOrderItemId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_OrderItemSaleBlock", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_OrderItemSaleBlock_BaseEntities_CheckOrderItem_CheckOrderItemId",
                        column: x => x.CheckOrderItemId,
                        principalTable: "BaseEntities_CheckOrderItem",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_OrderItemSaleBlock_BaseEntities_OrderItemBlock_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities_OrderItemBlock",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_OrderItemChangeConfirmation",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    OrderItemChangeRequestId = table.Column<int>(type: "int", nullable: false),
                    Confirmed = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_OrderItemChangeConfirmation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_OrderItemChangeConfirmation_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_OrderItemChangeConfirmation_BaseEntities_OrderItemChangeRequest_OrderItemChangeRequestId",
                        column: x => x.OrderItemChangeRequestId,
                        principalTable: "BaseEntities_OrderItemChangeRequest",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_PartitionStuffSerial",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    MainStuffSerialCode = table.Column<long>(type: "bigint", nullable: false),
                    MainStuffSerialStuffId = table.Column<int>(type: "int", nullable: false),
                    WarehouseId = table.Column<short>(type: "smallint", nullable: false),
                    Qty = table.Column<double>(type: "float", nullable: false),
                    UnitId = table.Column<byte>(type: "tinyint", nullable: false),
                    BoxCount = table.Column<int>(type: "int", nullable: false),
                    QtyPerBox = table.Column<double>(type: "float", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_PartitionStuffSerial", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_PartitionStuffSerial_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_PartitionStuffSerial_Units_UnitId",
                        column: x => x.UnitId,
                        principalTable: "Units",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_PartitionStuffSerial_Warehouses_WarehouseId",
                        column: x => x.WarehouseId,
                        principalTable: "Warehouses",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_PreparingSendingItem",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    PreparingSendingId = table.Column<int>(type: "int", nullable: false),
                    Qty = table.Column<double>(type: "float", nullable: false),
                    UnitId = table.Column<byte>(type: "tinyint", nullable: false),
                    StuffId = table.Column<int>(type: "int", nullable: false),
                    StuffSerialCode = table.Column<long>(type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_PreparingSendingItem", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_PreparingSendingItem_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_PreparingSendingItem_BaseEntities_PreparingSending_PreparingSendingId",
                        column: x => x.PreparingSendingId,
                        principalTable: "BaseEntities_PreparingSending",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_PreparingSendingItem_Units_UnitId",
                        column: x => x.UnitId,
                        principalTable: "Units",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_ProductionMaterialRequest",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    ProductionOrderId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_ProductionMaterialRequest", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ProductionMaterialRequest_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_StuffRequest",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    StuffRequestType = table.Column<byte>(type: "tinyint", nullable: false),
                    ScrumEntityId = table.Column<int>(type: "int", nullable: true),
                    FromWarehouseId = table.Column<short>(type: "smallint", nullable: false),
                    ToWarehouseId = table.Column<short>(type: "smallint", nullable: true),
                    ProductionMaterialRequestId = table.Column<int>(type: "int", nullable: true),
                    ToEmployeeId = table.Column<int>(type: "int", nullable: true),
                    ToDepartmentId = table.Column<short>(type: "smallint", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_StuffRequest", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_StuffRequest_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_StuffRequest_BaseEntities_ProductionMaterialRequest_ProductionMaterialRequestId",
                        column: x => x.ProductionMaterialRequestId,
                        principalTable: "BaseEntities_ProductionMaterialRequest",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_StuffRequest_Departments_ToDepartmentId",
                        column: x => x.ToDepartmentId,
                        principalTable: "Departments",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_StuffRequest_Employees_ToEmployeeId",
                        column: x => x.ToEmployeeId,
                        principalTable: "Employees",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_StuffRequest_ScrumEntities_ScrumEntityId",
                        column: x => x.ScrumEntityId,
                        principalTable: "ScrumEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_StuffRequest_Warehouses_FromWarehouseId",
                        column: x => x.FromWarehouseId,
                        principalTable: "Warehouses",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_StuffRequest_Warehouses_ToWarehouseId",
                        column: x => x.ToWarehouseId,
                        principalTable: "Warehouses",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_ProductionOrder",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    ProductionScheduleId = table.Column<int>(type: "int", nullable: true),
                    Qty = table.Column<double>(type: "float", nullable: false),
                    WorkPlanStepId = table.Column<int>(type: "int", nullable: false),
                    UnitId = table.Column<byte>(type: "tinyint", nullable: false),
                    SupervisorEmployeeId = table.Column<int>(type: "int", nullable: false),
                    Status = table.Column<byte>(type: "tinyint", nullable: false),
                    ToleranceQty = table.Column<double>(type: "float", nullable: false),
                    CalendarEventId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_ProductionOrder", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ProductionOrder_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ProductionOrder_CalendarEvents_CalendarEventId",
                        column: x => x.CalendarEventId,
                        principalTable: "CalendarEvents",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ProductionOrder_Employees_SupervisorEmployeeId",
                        column: x => x.SupervisorEmployeeId,
                        principalTable: "Employees",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ProductionOrder_Units_UnitId",
                        column: x => x.UnitId,
                        principalTable: "Units",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProductionMaterialRequestDetails",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProductionOrderId = table.Column<int>(type: "int", nullable: false),
                    ProductionMaterialRequestId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductionMaterialRequestDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProductionMaterialRequestDetails_BaseEntities_ProductionMaterialRequest_ProductionMaterialRequestId",
                        column: x => x.ProductionMaterialRequestId,
                        principalTable: "BaseEntities_ProductionMaterialRequest",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProductionMaterialRequestDetails_BaseEntities_ProductionOrder_ProductionOrderId",
                        column: x => x.ProductionOrderId,
                        principalTable: "BaseEntities_ProductionOrder",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProductionOrderSummaries",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProducedQty = table.Column<double>(type: "float", nullable: false),
                    InProductionQty = table.Column<double>(type: "float", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ProductionOrderId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductionOrderSummaries", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProductionOrderSummaries_BaseEntities_ProductionOrder_ProductionOrderId",
                        column: x => x.ProductionOrderId,
                        principalTable: "BaseEntities_ProductionOrder",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProductionPerformanceInfoes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    DescriptionDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ResponsibleComment = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CorrectiveAction = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Status = table.Column<byte>(type: "tinyint", nullable: true),
                    RegistrationDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ConfirmationDate = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ProductionOrderId = table.Column<int>(type: "int", nullable: false),
                    DepartmentId = table.Column<short>(type: "smallint", nullable: true),
                    RegistratorUserId = table.Column<int>(type: "int", nullable: true),
                    ConfirmatorUserId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductionPerformanceInfoes", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProductionPerformanceInfoes_BaseEntities_ProductionOrder_ProductionOrderId",
                        column: x => x.ProductionOrderId,
                        principalTable: "BaseEntities_ProductionOrder",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProductionPerformanceInfoes_Departments_DepartmentId",
                        column: x => x.DepartmentId,
                        principalTable: "Departments",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProductionPerformanceInfoes_Users_ConfirmatorUserId",
                        column: x => x.ConfirmatorUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProductionPerformanceInfoes_Users_RegistratorUserId",
                        column: x => x.RegistratorUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_ProductionPlan",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    ProductionRequestId = table.Column<int>(type: "int", nullable: true),
                    EstimatedDate = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    Qty = table.Column<double>(type: "float", nullable: false),
                    UnitId = table.Column<byte>(type: "tinyint", nullable: false),
                    Status = table.Column<byte>(type: "tinyint", nullable: false),
                    IsTemporary = table.Column<bool>(type: "bit", nullable: false),
                    BillOfMaterialVersion = table.Column<short>(type: "smallint", nullable: false),
                    BillOfMaterialStuffId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_ProductionPlan", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ProductionPlan_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ProductionPlan_BaseEntities_ProductionRequest_ProductionRequestId",
                        column: x => x.ProductionRequestId,
                        principalTable: "BaseEntities_ProductionRequest",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ProductionPlan_Units_UnitId",
                        column: x => x.UnitId,
                        principalTable: "Units",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProductionPlanSummaries",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProducedQty = table.Column<double>(type: "float", nullable: false),
                    ScheduledQty = table.Column<double>(type: "float", nullable: false),
                    ProductionPlanId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductionPlanSummaries", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProductionPlanSummaries_BaseEntities_ProductionPlan_ProductionPlanId",
                        column: x => x.ProductionPlanId,
                        principalTable: "BaseEntities_ProductionPlan",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_ProductionPlanDetail",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    ProductionPlanId = table.Column<int>(type: "int", nullable: false),
                    Qty = table.Column<double>(type: "float", nullable: false),
                    UnitId = table.Column<byte>(type: "tinyint", nullable: false),
                    ProductionPlanDetailLevelId = table.Column<int>(type: "int", nullable: false),
                    Status = table.Column<byte>(type: "tinyint", nullable: false),
                    BillOfMaterialVersion = table.Column<short>(type: "smallint", nullable: false),
                    BillOfMaterialStuffId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_ProductionPlanDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ProductionPlanDetail_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ProductionPlanDetail_BaseEntities_ProductionPlan_ProductionPlanId",
                        column: x => x.ProductionPlanId,
                        principalTable: "BaseEntities_ProductionPlan",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ProductionPlanDetail_ProductionPlanDetailLevels_ProductionPlanDetailLevelId",
                        column: x => x.ProductionPlanDetailLevelId,
                        principalTable: "ProductionPlanDetailLevels",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ProductionPlanDetail_Units_UnitId",
                        column: x => x.UnitId,
                        principalTable: "Units",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProductionPlanDetailSummaries",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProducedQty = table.Column<double>(type: "float", nullable: false),
                    ScheduledQty = table.Column<double>(type: "float", nullable: false),
                    ProductionPlanDetailId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductionPlanDetailSummaries", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProductionPlanDetailSummaries_BaseEntities_ProductionPlanDetail_ProductionPlanDetailId",
                        column: x => x.ProductionPlanDetailId,
                        principalTable: "BaseEntities_ProductionPlanDetail",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_ProductionSchedule",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    ProductionPlanDetailId = table.Column<int>(type: "int", nullable: false),
                    Qty = table.Column<double>(type: "float", nullable: false),
                    ApplySwitchTime = table.Column<bool>(type: "bit", nullable: false),
                    SwitchTime = table.Column<int>(type: "int", nullable: false),
                    PlanningWithoutMachineLimit = table.Column<bool>(type: "bit", nullable: false),
                    OperatorCount = table.Column<int>(type: "int", nullable: false),
                    Status = table.Column<byte>(type: "tinyint", nullable: false),
                    IsPublished = table.Column<bool>(type: "bit", nullable: false),
                    WorkPlanStepId = table.Column<int>(type: "int", nullable: false),
                    CalendarEventId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_ProductionSchedule", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ProductionSchedule_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ProductionSchedule_BaseEntities_ProductionPlanDetail_ProductionPlanDetailId",
                        column: x => x.ProductionPlanDetailId,
                        principalTable: "BaseEntities_ProductionPlanDetail",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ProductionSchedule_CalendarEvents_CalendarEventId",
                        column: x => x.CalendarEventId,
                        principalTable: "CalendarEvents",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProductionScheduleSummaries",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProducedQty = table.Column<double>(type: "float", nullable: false),
                    ProductionScheduleId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductionScheduleSummaries", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProductionScheduleSummaries_BaseEntities_ProductionSchedule_ProductionScheduleId",
                        column: x => x.ProductionScheduleId,
                        principalTable: "BaseEntities_ProductionSchedule",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_PurchaseOrder",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    StuffId = table.Column<int>(type: "int", nullable: false),
                    ProviderId = table.Column<int>(type: "int", nullable: true),
                    Price = table.Column<double>(type: "float", nullable: true),
                    CurrencyId = table.Column<byte>(type: "tinyint", nullable: true),
                    Deadline = table.Column<DateTime>(type: "datetime2", nullable: false),
                    Qty = table.Column<double>(type: "float", nullable: false),
                    UnitId = table.Column<byte>(type: "tinyint", nullable: false),
                    SupplierId = table.Column<int>(type: "int", nullable: true),
                    PurchaseOrderType = table.Column<byte>(type: "tinyint", nullable: false),
                    Status = table.Column<short>(type: "smallint", nullable: false),
                    PurchaseOrderDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    PurchaseOrderGroupId = table.Column<int>(type: "int", nullable: true),
                    IsArchived = table.Column<bool>(type: "bit", nullable: false),
                    PurchaseOrderPreparingDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    PurchaseOrderStepDetailId = table.Column<int>(type: "int", nullable: true),
                    OrderInvoiceNum = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    LatestRiskId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_PurchaseOrder", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_PurchaseOrder_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_PurchaseOrder_BaseEntities_PurchaseOrderGroup_PurchaseOrderGroupId",
                        column: x => x.PurchaseOrderGroupId,
                        principalTable: "BaseEntities_PurchaseOrderGroup",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_PurchaseOrder_Cooperators_ProviderId",
                        column: x => x.ProviderId,
                        principalTable: "Cooperators",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_PurchaseOrder_Currencies_CurrencyId",
                        column: x => x.CurrencyId,
                        principalTable: "Currencies",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_PurchaseOrder_Suppliers_SupplierId",
                        column: x => x.SupplierId,
                        principalTable: "Suppliers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_PurchaseOrder_Units_UnitId",
                        column: x => x.UnitId,
                        principalTable: "Units",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PurchaseOrderCosts",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Amount = table.Column<double>(type: "float", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    PurchaseOrderGroupId = table.Column<int>(type: "int", nullable: true),
                    PurchaseOrderId = table.Column<int>(type: "int", nullable: false),
                    FinancialDocumentCostId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PurchaseOrderCosts", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PurchaseOrderCosts_BaseEntities_PurchaseOrder_PurchaseOrderId",
                        column: x => x.PurchaseOrderId,
                        principalTable: "BaseEntities_PurchaseOrder",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PurchaseOrderCosts_BaseEntities_PurchaseOrderGroup_PurchaseOrderGroupId",
                        column: x => x.PurchaseOrderGroupId,
                        principalTable: "BaseEntities_PurchaseOrderGroup",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PurchaseOrderCosts_FinancialDocumentCosts_FinancialDocumentCostId",
                        column: x => x.FinancialDocumentCostId,
                        principalTable: "FinancialDocumentCosts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PurchaseOrderDiscounts",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Amount = table.Column<double>(type: "float", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    FinancialDocumentDiscountId = table.Column<int>(type: "int", nullable: false),
                    PurchaseOrderGroupId = table.Column<int>(type: "int", nullable: true),
                    PurchaseOrderId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PurchaseOrderDiscounts", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PurchaseOrderDiscounts_BaseEntities_PurchaseOrder_PurchaseOrderId",
                        column: x => x.PurchaseOrderId,
                        principalTable: "BaseEntities_PurchaseOrder",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PurchaseOrderDiscounts_BaseEntities_PurchaseOrderGroup_PurchaseOrderGroupId",
                        column: x => x.PurchaseOrderGroupId,
                        principalTable: "BaseEntities_PurchaseOrderGroup",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PurchaseOrderDiscounts_FinancialDocumentDiscounts_FinancialDocumentDiscountId",
                        column: x => x.FinancialDocumentDiscountId,
                        principalTable: "FinancialDocumentDiscounts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PurchaseOrderStepDetails",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PurchaseOrderStepId = table.Column<int>(type: "int", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    PurchaseOrderId = table.Column<int>(type: "int", nullable: false),
                    DocumentId = table.Column<Guid>(type: "uniqueidentifier", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PurchaseOrderStepDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PurchaseOrderStepDetails_BaseEntities_PurchaseOrder_PurchaseOrderId",
                        column: x => x.PurchaseOrderId,
                        principalTable: "BaseEntities_PurchaseOrder",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PurchaseOrderStepDetails_PurchaseOrderSteps_PurchaseOrderStepId",
                        column: x => x.PurchaseOrderStepId,
                        principalTable: "PurchaseOrderSteps",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PurchaseOrderStepDetails_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PurchaseOrderSummaries",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CargoedQty = table.Column<double>(type: "float", nullable: false),
                    ReceiptedQty = table.Column<double>(type: "float", nullable: false),
                    QualityControlPassedQty = table.Column<double>(type: "float", nullable: false),
                    QualityControlFailedQty = table.Column<double>(type: "float", nullable: false),
                    PurchaseOrderId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PurchaseOrderSummaries", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PurchaseOrderSummaries_BaseEntities_PurchaseOrder_PurchaseOrderId",
                        column: x => x.PurchaseOrderId,
                        principalTable: "BaseEntities_PurchaseOrder",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StuffPriceDiscrepancies",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    PurchaseOrderId = table.Column<int>(type: "int", nullable: false),
                    PurchaseOrderPrice = table.Column<double>(type: "float", nullable: false),
                    PurchaseOrderCurrencyId = table.Column<byte>(type: "tinyint", nullable: false),
                    PurchaseOrderQty = table.Column<double>(type: "float", nullable: false),
                    CurrentStuffBasePrice = table.Column<double>(type: "float", nullable: true),
                    CurrentStuffBasePriceCurrencyId = table.Column<byte>(type: "tinyint", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    ConfirmationDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ConfirmerUserId = table.Column<int>(type: "int", nullable: true),
                    ConfirmationDescription = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Status = table.Column<byte>(type: "tinyint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StuffPriceDiscrepancies", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StuffPriceDiscrepancies_BaseEntities_PurchaseOrder_PurchaseOrderId",
                        column: x => x.PurchaseOrderId,
                        principalTable: "BaseEntities_PurchaseOrder",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StuffPriceDiscrepancies_Currencies_CurrentStuffBasePriceCurrencyId",
                        column: x => x.CurrentStuffBasePriceCurrencyId,
                        principalTable: "Currencies",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StuffPriceDiscrepancies_Users_ConfirmerUserId",
                        column: x => x.ConfirmerUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_PurchaseOrderDetail",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    PurchaseOrderId = table.Column<int>(type: "int", nullable: false),
                    PurchaseRequestId = table.Column<int>(type: "int", nullable: true),
                    Qty = table.Column<double>(type: "float", nullable: false),
                    UnitId = table.Column<byte>(type: "tinyint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_PurchaseOrderDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_PurchaseOrderDetail_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_PurchaseOrderDetail_BaseEntities_PurchaseOrder_PurchaseOrderId",
                        column: x => x.PurchaseOrderId,
                        principalTable: "BaseEntities_PurchaseOrder",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_PurchaseOrderDetail_Units_UnitId",
                        column: x => x.UnitId,
                        principalTable: "Units",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PurchaseOrderDetailSummaries",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    CargoedQty = table.Column<double>(type: "float", nullable: false),
                    ReceiptedQty = table.Column<double>(type: "float", nullable: false),
                    QualityControlPassedQty = table.Column<double>(type: "float", nullable: false),
                    QualityControlFailedQty = table.Column<double>(type: "float", nullable: false),
                    PurchaseOrderDetailId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PurchaseOrderDetailSummaries", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PurchaseOrderDetailSummaries_BaseEntities_PurchaseOrderDetail_PurchaseOrderDetailId",
                        column: x => x.PurchaseOrderDetailId,
                        principalTable: "BaseEntities_PurchaseOrderDetail",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_PurchaseRequest",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    Deadline = table.Column<DateTime>(type: "datetime2", nullable: false),
                    Qty = table.Column<double>(type: "float", nullable: false),
                    RequestQty = table.Column<double>(type: "float", nullable: false),
                    UnitId = table.Column<byte>(type: "tinyint", nullable: false),
                    StuffId = table.Column<int>(type: "int", nullable: false),
                    DepartmentId = table.Column<short>(type: "smallint", nullable: true),
                    Status = table.Column<short>(type: "smallint", nullable: false),
                    ResponsibleEmployeeId = table.Column<int>(type: "int", nullable: true),
                    EmployeeRequesterId = table.Column<int>(type: "int", nullable: true),
                    OldPlanCode = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    IsArchived = table.Column<bool>(type: "bit", nullable: false),
                    PurchaseRequestStepDetailId = table.Column<int>(type: "int", nullable: true),
                    ProjectCode = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CostCenterId = table.Column<int>(type: "int", nullable: false),
                    Essential = table.Column<bool>(type: "bit", nullable: false),
                    PlanCodeId = table.Column<int>(type: "int", nullable: true),
                    DocumentId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Link = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    SupplyType = table.Column<byte>(type: "tinyint", nullable: true),
                    LatestRiskId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_PurchaseRequest", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_PurchaseRequest_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_PurchaseRequest_CostCenters_CostCenterId",
                        column: x => x.CostCenterId,
                        principalTable: "CostCenters",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_PurchaseRequest_Departments_DepartmentId",
                        column: x => x.DepartmentId,
                        principalTable: "Departments",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_PurchaseRequest_Employees_EmployeeRequesterId",
                        column: x => x.EmployeeRequesterId,
                        principalTable: "Employees",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_PurchaseRequest_Employees_ResponsibleEmployeeId",
                        column: x => x.ResponsibleEmployeeId,
                        principalTable: "Employees",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_PurchaseRequest_PlanCodes_PlanCodeId",
                        column: x => x.PlanCodeId,
                        principalTable: "PlanCodes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_PurchaseRequest_Units_UnitId",
                        column: x => x.UnitId,
                        principalTable: "Units",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProvisionersCartItems",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    ProviderId = table.Column<int>(type: "int", nullable: true),
                    RequestQty = table.Column<double>(type: "float", nullable: true),
                    SuppliedQty = table.Column<double>(type: "float", nullable: true),
                    ProvisionersCartId = table.Column<int>(type: "int", nullable: false),
                    PurchaseRequestId = table.Column<int>(type: "int", nullable: false),
                    Status = table.Column<byte>(type: "tinyint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProvisionersCartItems", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProvisionersCartItems_BaseEntities_PurchaseRequest_PurchaseRequestId",
                        column: x => x.PurchaseRequestId,
                        principalTable: "BaseEntities_PurchaseRequest",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProvisionersCartItems_Cooperators_ProviderId",
                        column: x => x.ProviderId,
                        principalTable: "Cooperators",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProvisionersCartItems_ProvisionersCarts_ProvisionersCartId",
                        column: x => x.ProvisionersCartId,
                        principalTable: "ProvisionersCarts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PurchaseRequestEditLog",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    PurchaseRequestId = table.Column<int>(type: "int", nullable: false),
                    AfterDeadLineDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    BeforeDeadLineDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    BeforeRequestQty = table.Column<double>(type: "float", nullable: true),
                    AfterRequestQty = table.Column<double>(type: "float", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PurchaseRequestEditLog", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PurchaseRequestEditLog_BaseEntities_PurchaseRequest_PurchaseRequestId",
                        column: x => x.PurchaseRequestId,
                        principalTable: "BaseEntities_PurchaseRequest",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PurchaseRequestEditLog_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PurchaseRequestStepDetails",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    PurchaseRequestStepId = table.Column<int>(type: "int", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    PurchaseRequestId = table.Column<int>(type: "int", nullable: false),
                    DocumentId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PurchaseRequestStepDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PurchaseRequestStepDetails_BaseEntities_PurchaseRequest_PurchaseRequestId",
                        column: x => x.PurchaseRequestId,
                        principalTable: "BaseEntities_PurchaseRequest",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PurchaseRequestStepDetails_PurchaseRequestSteps_PurchaseRequestStepId",
                        column: x => x.PurchaseRequestStepId,
                        principalTable: "PurchaseRequestSteps",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PurchaseRequestStepDetails_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PurchaseRequestSummaries",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    OrderedQty = table.Column<double>(type: "float", nullable: false),
                    CargoedQty = table.Column<double>(type: "float", nullable: false),
                    ReceiptedQty = table.Column<double>(type: "float", nullable: false),
                    QualityControlPassedQty = table.Column<double>(type: "float", nullable: false),
                    QualityControlFailedQty = table.Column<double>(type: "float", nullable: false),
                    PurchaseRequestId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PurchaseRequestSummaries", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PurchaseRequestSummaries_BaseEntities_PurchaseRequest_PurchaseRequestId",
                        column: x => x.PurchaseRequestId,
                        principalTable: "BaseEntities_PurchaseRequest",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProvisionersCartItemDetails",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    ProviderId = table.Column<int>(type: "int", nullable: true),
                    SupplyQty = table.Column<double>(type: "float", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    UnitPrice = table.Column<int>(type: "int", nullable: false),
                    CurrencyId = table.Column<int>(type: "int", nullable: false),
                    DateTime = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ProvisionersCartItemId = table.Column<int>(type: "int", nullable: false),
                    PurchaseOrderId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProvisionersCartItemDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProvisionersCartItemDetails_BaseEntities_PurchaseOrder_PurchaseOrderId",
                        column: x => x.PurchaseOrderId,
                        principalTable: "BaseEntities_PurchaseOrder",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProvisionersCartItemDetails_Cooperators_ProviderId",
                        column: x => x.ProviderId,
                        principalTable: "Cooperators",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProvisionersCartItemDetails_ProvisionersCartItems_ProvisionersCartItemId",
                        column: x => x.ProvisionersCartItemId,
                        principalTable: "ProvisionersCartItems",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_QtyCorrectionRequest",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    Qty = table.Column<double>(type: "float", nullable: false),
                    UnitId = table.Column<byte>(type: "tinyint", nullable: false),
                    StuffId = table.Column<int>(type: "int", nullable: false),
                    StuffSerialCode = table.Column<long>(type: "bigint", nullable: true),
                    Type = table.Column<byte>(type: "tinyint", nullable: false),
                    Status = table.Column<byte>(type: "tinyint", nullable: false),
                    WarehouseId = table.Column<short>(type: "smallint", nullable: false),
                    StockCheckingTagId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_QtyCorrectionRequest", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_QtyCorrectionRequest_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_QtyCorrectionRequest_Units_UnitId",
                        column: x => x.UnitId,
                        principalTable: "Units",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_QtyCorrectionRequest_Warehouses_WarehouseId",
                        column: x => x.WarehouseId,
                        principalTable: "Warehouses",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_QualityControl",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    QualityControlType = table.Column<byte>(type: "tinyint", nullable: false),
                    StuffId = table.Column<int>(type: "int", nullable: false),
                    WarehouseId = table.Column<short>(type: "smallint", nullable: false),
                    Status = table.Column<byte>(type: "tinyint", nullable: false),
                    UnitId = table.Column<byte>(type: "tinyint", nullable: false),
                    Qty = table.Column<double>(type: "float", nullable: false),
                    DepartmentId = table.Column<short>(type: "smallint", nullable: false),
                    EmployeeId = table.Column<int>(type: "int", nullable: true),
                    DocumentId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    ConfirmationDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ConfirmationUserId = table.Column<int>(type: "int", nullable: true),
                    QualityControlPaymentSuggestStatus = table.Column<byte>(type: "tinyint", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_QualityControl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_QualityControl_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_QualityControl_Departments_DepartmentId",
                        column: x => x.DepartmentId,
                        principalTable: "Departments",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_QualityControl_Employees_EmployeeId",
                        column: x => x.EmployeeId,
                        principalTable: "Employees",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_QualityControl_Units_UnitId",
                        column: x => x.UnitId,
                        principalTable: "Units",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_QualityControl_Users_ConfirmationUserId",
                        column: x => x.ConfirmationUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_QualityControl_Warehouses_WarehouseId",
                        column: x => x.WarehouseId,
                        principalTable: "Warehouses",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_CustomQualityControl",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_CustomQualityControl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_CustomQualityControl_BaseEntities_QualityControl_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities_QualityControl",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_GiveBackExitReceiptRequest",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    QualityControlId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_GiveBackExitReceiptRequest", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_GiveBackExitReceiptRequest_BaseEntities_ExitReceiptRequest_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities_ExitReceiptRequest",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_GiveBackExitReceiptRequest_BaseEntities_QualityControl_QualityControlId",
                        column: x => x.QualityControlId,
                        principalTable: "BaseEntities_QualityControl",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_ProductionQualityControl",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_ProductionQualityControl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ProductionQualityControl_BaseEntities_QualityControl_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities_QualityControl",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_QualityControlConfirmation",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    Status = table.Column<byte>(type: "tinyint", nullable: false),
                    IsEmergency = table.Column<bool>(type: "bit", nullable: true),
                    QualityControlId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_QualityControlConfirmation", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_QualityControlConfirmation_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_QualityControlConfirmation_BaseEntities_QualityControl_QualityControlId",
                        column: x => x.QualityControlId,
                        principalTable: "BaseEntities_QualityControl",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PaymentSuggestStatusLogs",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    QualityControlId = table.Column<int>(type: "int", nullable: false),
                    RegisterDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    RegisterarUserId = table.Column<int>(type: "int", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    QualityControlPaymentSuggestStatus = table.Column<byte>(type: "tinyint", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PaymentSuggestStatusLogs", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PaymentSuggestStatusLogs_BaseEntities_QualityControl_QualityControlId",
                        column: x => x.QualityControlId,
                        principalTable: "BaseEntities_QualityControl",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PaymentSuggestStatusLogs_Users_RegisterarUserId",
                        column: x => x.RegisterarUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PayRequests",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DateTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    PayedAmount = table.Column<double>(type: "float", nullable: false),
                    DiscountedTotalPrice = table.Column<double>(type: "float", nullable: true),
                    Status = table.Column<byte>(type: "tinyint", nullable: false),
                    QualityControlId = table.Column<int>(type: "int", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    DeletedAt = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    FinancialTransactionBatchId = table.Column<int>(type: "int", nullable: true),
                    DocumentId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PayRequests", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PayRequests_BaseEntities_QualityControl_QualityControlId",
                        column: x => x.QualityControlId,
                        principalTable: "BaseEntities_QualityControl",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PayRequests_FinancialTransactionBatches_FinancialTransactionBatchId",
                        column: x => x.FinancialTransactionBatchId,
                        principalTable: "FinancialTransactionBatches",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PayRequests_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "QualityControlSummaries",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AcceptedQty = table.Column<double>(type: "float", nullable: false),
                    FailedQty = table.Column<double>(type: "float", nullable: false),
                    ConditionalRequestQty = table.Column<double>(type: "float", nullable: false),
                    ConditionalQty = table.Column<double>(type: "float", nullable: false),
                    ConditionalRejectedQty = table.Column<double>(type: "float", nullable: false),
                    ReturnedQty = table.Column<double>(type: "float", nullable: false),
                    ConsumedQty = table.Column<double>(type: "float", nullable: false),
                    QualityControlId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_QualityControlSummaries", x => x.Id);
                    table.ForeignKey(
                        name: "FK_QualityControlSummaries_BaseEntities_QualityControl_QualityControlId",
                        column: x => x.QualityControlId,
                        principalTable: "BaseEntities_QualityControl",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_QualityControlConfirmationItem",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    RemainedQty = table.Column<double>(type: "float", nullable: false),
                    TestQty = table.Column<double>(type: "float", nullable: false),
                    ConsumeQty = table.Column<double>(type: "float", nullable: false),
                    UnitId = table.Column<byte>(type: "tinyint", nullable: false),
                    QualityControlConfirmationId = table.Column<int>(type: "int", nullable: false),
                    QualityControlItemId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_QualityControlConfirmationItem", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_QualityControlConfirmationItem_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_QualityControlConfirmationItem_BaseEntities_QualityControlConfirmation_QualityControlConfirmationId",
                        column: x => x.QualityControlConfirmationId,
                        principalTable: "BaseEntities_QualityControlConfirmation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_QualityControlConfirmationItem_Units_UnitId",
                        column: x => x.UnitId,
                        principalTable: "Units",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_QualityControlItem",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    QualityControlId = table.Column<int>(type: "int", nullable: false),
                    StuffId = table.Column<int>(type: "int", nullable: false),
                    StuffSerialCode = table.Column<long>(type: "bigint", nullable: true),
                    Qty = table.Column<double>(type: "float", nullable: false),
                    UnitId = table.Column<byte>(type: "tinyint", nullable: false),
                    Status = table.Column<bool>(type: "bit", nullable: false),
                    ReturnOfSaleId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_QualityControlItem", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_QualityControlItem_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_QualityControlItem_BaseEntities_QualityControl_QualityControlId",
                        column: x => x.QualityControlId,
                        principalTable: "BaseEntities_QualityControl",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_QualityControlItem_Units_UnitId",
                        column: x => x.UnitId,
                        principalTable: "Units",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "QualityControlSamples",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    StatusChangerUserId = table.Column<int>(type: "int", nullable: true),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    Qty = table.Column<double>(type: "float", nullable: false),
                    TestQty = table.Column<double>(type: "float", nullable: true),
                    ConsumeQty = table.Column<double>(type: "float", nullable: true),
                    Status = table.Column<byte>(type: "tinyint", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    QualityControlItemId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_QualityControlSamples", x => x.Id);
                    table.ForeignKey(
                        name: "FK_QualityControlSamples_BaseEntities_QualityControlItem_QualityControlItemId",
                        column: x => x.QualityControlItemId,
                        principalTable: "BaseEntities_QualityControlItem",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_QualityControlSamples_Users_StatusChangerUserId",
                        column: x => x.StatusChangerUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_QualityControlSamples_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_RepairProductionFault",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    ProductionFaultTypeId = table.Column<int>(type: "int", nullable: false),
                    RepairProductionId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_RepairProductionFault", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_RepairProductionFault_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_RepairProductionFault_ProductionFaultTypes_ProductionFaultTypeId",
                        column: x => x.ProductionFaultTypeId,
                        principalTable: "ProductionFaultTypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_ResponseStuffRequestItem",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    StuffRequestItemId = table.Column<int>(type: "int", nullable: false),
                    Qty = table.Column<double>(type: "float", nullable: false),
                    Status = table.Column<byte>(type: "tinyint", nullable: false),
                    RequestWarehouseIssueId = table.Column<int>(type: "int", nullable: true),
                    StuffId = table.Column<int>(type: "int", nullable: true),
                    BillOfMaterialVersion = table.Column<short>(type: "smallint", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_ResponseStuffRequestItem", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ResponseStuffRequestItem_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ResponseStuffRequestItem_BaseEntities_RequestWarehouseIssue_RequestWarehouseIssueId",
                        column: x => x.RequestWarehouseIssueId,
                        principalTable: "BaseEntities_RequestWarehouseIssue",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_ReturnOfSale",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    Type = table.Column<byte>(type: "tinyint", nullable: false),
                    Qty = table.Column<double>(type: "float", nullable: false),
                    UnitId = table.Column<byte>(type: "tinyint", nullable: false),
                    Status = table.Column<byte>(type: "tinyint", nullable: false),
                    ReturnStoreReceiptId = table.Column<int>(type: "int", nullable: false),
                    StuffSerialCode = table.Column<long>(type: "bigint", nullable: true),
                    StuffId = table.Column<int>(type: "int", nullable: false),
                    SendProductId = table.Column<int>(type: "int", nullable: true),
                    MainStuffId = table.Column<int>(type: "int", nullable: true),
                    ExitReceiptCode = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_ReturnOfSale", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ReturnOfSale_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ReturnOfSale_BaseEntities_SendProduct_SendProductId",
                        column: x => x.SendProductId,
                        principalTable: "BaseEntities_SendProduct",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ReturnOfSale_Units_UnitId",
                        column: x => x.UnitId,
                        principalTable: "Units",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntityLogs_ReturnOfSaleStatusLog",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    Status = table.Column<byte>(type: "tinyint", nullable: false),
                    ReturnOfSaleId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntityLogs_ReturnOfSaleStatusLog", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntityLogs_ReturnOfSaleStatusLog_BaseEntities_ReturnOfSale_ReturnOfSaleId",
                        column: x => x.ReturnOfSaleId,
                        principalTable: "BaseEntities_ReturnOfSale",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntityLogs_ReturnOfSaleStatusLog_BaseEntityLogs_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntityLogs",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ReturnOfSaleSummaries",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    QualityControlPassedQty = table.Column<double>(type: "float", nullable: false),
                    QualityControlFailedQty = table.Column<double>(type: "float", nullable: false),
                    QualityControlConsumedQty = table.Column<double>(type: "float", nullable: false),
                    ReceiptQualityControlPassedQty = table.Column<double>(type: "float", nullable: false),
                    ReceiptQualityControlFailedQty = table.Column<double>(type: "float", nullable: false),
                    ReceiptQualityControlConsumedQty = table.Column<double>(type: "float", nullable: false),
                    ReturnOfSaleId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ReturnOfSaleSummaries", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ReturnOfSaleSummaries_BaseEntities_ReturnOfSale_ReturnOfSaleId",
                        column: x => x.ReturnOfSaleId,
                        principalTable: "BaseEntities_ReturnOfSale",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_StockAdjustment",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    StockCheckingTagId = table.Column<int>(type: "int", nullable: false),
                    Amount = table.Column<double>(type: "float", nullable: false),
                    UnitId = table.Column<byte>(type: "tinyint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_StockAdjustment", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_StockAdjustment_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_StockAdjustment_Units_UnitId",
                        column: x => x.UnitId,
                        principalTable: "Units",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_StoreReceipt",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    CooperatorId = table.Column<int>(type: "int", nullable: false),
                    StuffId = table.Column<int>(type: "int", nullable: false),
                    BillOfMaterialVersion = table.Column<short>(type: "smallint", nullable: true),
                    Amount = table.Column<double>(type: "float", nullable: false),
                    UnitId = table.Column<byte>(type: "tinyint", nullable: false),
                    ReceiptId = table.Column<int>(type: "int", nullable: true),
                    InboundCargoId = table.Column<int>(type: "int", nullable: false),
                    WarehouseId = table.Column<short>(type: "smallint", nullable: false),
                    StoreReceiptType = table.Column<byte>(type: "tinyint", nullable: false),
                    StuffNeedToQualityControl = table.Column<bool>(type: "bit", nullable: false),
                    CurrentPurchasePriceId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_StoreReceipt", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_StoreReceipt_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_StoreReceipt_BaseEntities_InboundCargo_InboundCargoId",
                        column: x => x.InboundCargoId,
                        principalTable: "BaseEntities_InboundCargo",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_StoreReceipt_BaseEntities_Receipt_ReceiptId",
                        column: x => x.ReceiptId,
                        principalTable: "BaseEntities_Receipt",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_StoreReceipt_Cooperators_CooperatorId",
                        column: x => x.CooperatorId,
                        principalTable: "Cooperators",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_StoreReceipt_Units_UnitId",
                        column: x => x.UnitId,
                        principalTable: "Units",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_StoreReceipt_Warehouses_WarehouseId",
                        column: x => x.WarehouseId,
                        principalTable: "Warehouses",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_NewShopping",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    QtyPerBox = table.Column<double>(type: "float", nullable: false),
                    BoxNo = table.Column<int>(type: "int", nullable: false),
                    LadingItemId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_NewShopping", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_NewShopping_BaseEntities_LadingItem_LadingItemId",
                        column: x => x.LadingItemId,
                        principalTable: "BaseEntities_LadingItem",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_NewShopping_BaseEntities_StoreReceipt_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities_StoreReceipt",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_ReceiptQualityControl",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    StoreReceiptId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_ReceiptQualityControl", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ReceiptQualityControl_BaseEntities_QualityControl_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities_QualityControl",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ReceiptQualityControl_BaseEntities_StoreReceipt_StoreReceiptId",
                        column: x => x.StoreReceiptId,
                        principalTable: "BaseEntities_StoreReceipt",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_ReturnStoreReceipt",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_ReturnStoreReceipt", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ReturnStoreReceipt_BaseEntities_StoreReceipt_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities_StoreReceipt",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StoreReceiptDeleteRequests",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreReceiptId = table.Column<int>(type: "int", nullable: false),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    Status = table.Column<int>(type: "int", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    DeletedAt = table.Column<DateTime>(type: "datetime2", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StoreReceiptDeleteRequests", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StoreReceiptDeleteRequests_BaseEntities_StoreReceipt_StoreReceiptId",
                        column: x => x.StoreReceiptId,
                        principalTable: "BaseEntities_StoreReceipt",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StoreReceiptDeleteRequests_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StoreReceiptSummaries",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    QualityControlPassedQty = table.Column<double>(type: "float", nullable: false),
                    QualityControlFailedQty = table.Column<double>(type: "float", nullable: false),
                    QualityControlConsumedQty = table.Column<double>(type: "float", nullable: false),
                    ReceiptQualityControlPassedQty = table.Column<double>(type: "float", nullable: false),
                    ReceiptQualityControlFailedQty = table.Column<double>(type: "float", nullable: false),
                    ReceiptQualityControlConsumedQty = table.Column<double>(type: "float", nullable: false),
                    StoreReceiptId = table.Column<int>(type: "int", nullable: false),
                    PayedAmount = table.Column<double>(type: "float", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StoreReceiptSummaries", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StoreReceiptSummaries_BaseEntities_StoreReceipt_StoreReceiptId",
                        column: x => x.StoreReceiptId,
                        principalTable: "BaseEntities_StoreReceipt",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_ReturnedExitReceiptRequest",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    ReturnStoreReceiptId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_ReturnedExitReceiptRequest", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ReturnedExitReceiptRequest_BaseEntities_ExitReceiptRequest_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities_ExitReceiptRequest",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_ReturnedExitReceiptRequest_BaseEntities_ReturnStoreReceipt_ReturnStoreReceiptId",
                        column: x => x.ReturnStoreReceiptId,
                        principalTable: "BaseEntities_ReturnStoreReceipt",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StoreReceiptDeleteRequestConfirmationLogs",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreReceiptDeleteRequestId = table.Column<int>(type: "int", nullable: false),
                    ConfirmerUserId = table.Column<int>(type: "int", nullable: false),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Status = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StoreReceiptDeleteRequestConfirmationLogs", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StoreReceiptDeleteRequestConfirmationLogs_StoreReceiptDeleteRequests_StoreReceiptDeleteRequestId",
                        column: x => x.StoreReceiptDeleteRequestId,
                        principalTable: "StoreReceiptDeleteRequests",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StoreReceiptDeleteRequestConfirmationLogs_Users_ConfirmerUserId",
                        column: x => x.ConfirmerUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_StuffPrice",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    Price = table.Column<double>(type: "float", nullable: false),
                    Type = table.Column<byte>(type: "tinyint", nullable: false),
                    Status = table.Column<short>(type: "smallint", nullable: false),
                    StuffId = table.Column<int>(type: "int", nullable: false),
                    CurrencyId = table.Column<byte>(type: "tinyint", nullable: false),
                    ConfirmUserId = table.Column<int>(type: "int", nullable: true),
                    ConfirmDate = table.Column<DateTime>(type: "smalldatetime", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_StuffPrice", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_StuffPrice_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_StuffPrice_Currencies_CurrencyId",
                        column: x => x.CurrencyId,
                        principalTable: "Currencies",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_StuffPrice_Users_ConfirmUserId",
                        column: x => x.ConfirmUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_EstimatedPurchasePrice",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    PurchaseOrderId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_EstimatedPurchasePrice", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_EstimatedPurchasePrice_BaseEntities_PurchaseOrder_PurchaseOrderId",
                        column: x => x.PurchaseOrderId,
                        principalTable: "BaseEntities_PurchaseOrder",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_EstimatedPurchasePrice_BaseEntities_StuffPrice_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities_StuffPrice",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_PurchasePrice",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    StoreReceiptId = table.Column<int>(type: "int", nullable: false),
                    CurrencyRate = table.Column<double>(type: "float", nullable: false),
                    RialPrice = table.Column<double>(type: "float", nullable: false),
                    TransferCost = table.Column<double>(type: "float", nullable: false),
                    DutyCost = table.Column<double>(type: "float", nullable: false),
                    OtherCost = table.Column<double>(type: "float", nullable: false),
                    Discount = table.Column<double>(type: "float", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_PurchasePrice", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_PurchasePrice_BaseEntities_StoreReceipt_StoreReceiptId",
                        column: x => x.StoreReceiptId,
                        principalTable: "BaseEntities_StoreReceipt",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_PurchasePrice_BaseEntities_StuffPrice_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities_StuffPrice",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_StuffBasePrice",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    StuffBasePriceType = table.Column<byte>(type: "tinyint", nullable: false),
                    MainPrice = table.Column<double>(type: "float", nullable: false),
                    PurchaseOrderId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_StuffBasePrice", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_StuffBasePrice_BaseEntities_PurchaseOrder_PurchaseOrderId",
                        column: x => x.PurchaseOrderId,
                        principalTable: "BaseEntities_PurchaseOrder",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_StuffBasePrice_BaseEntities_StuffPrice_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities_StuffPrice",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StuffBasePriceCustoms",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Type = table.Column<byte>(type: "tinyint", nullable: false),
                    Tariff = table.Column<double>(type: "float", nullable: true),
                    Percent = table.Column<double>(type: "float", nullable: true),
                    HowToBuyRatio = table.Column<double>(type: "float", nullable: true),
                    Price = table.Column<double>(type: "float", nullable: false),
                    HowToBuyId = table.Column<short>(type: "smallint", nullable: true),
                    Weight = table.Column<double>(type: "float", nullable: true),
                    CurrencyId = table.Column<byte>(type: "tinyint", nullable: false),
                    StuffBasePriceId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StuffBasePriceCustoms", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StuffBasePriceCustoms_BaseEntities_StuffBasePrice_StuffBasePriceId",
                        column: x => x.StuffBasePriceId,
                        principalTable: "BaseEntities_StuffBasePrice",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StuffBasePriceCustoms_Currencies_CurrencyId",
                        column: x => x.CurrencyId,
                        principalTable: "Currencies",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StuffBasePriceCustoms_HowToBuys_HowToBuyId",
                        column: x => x.HowToBuyId,
                        principalTable: "HowToBuys",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StuffBasePriceTransports",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Type = table.Column<byte>(type: "tinyint", nullable: false),
                    ComputeType = table.Column<byte>(type: "tinyint", nullable: true),
                    Percent = table.Column<double>(type: "float", nullable: true),
                    Price = table.Column<double>(type: "float", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    StuffBasePriceId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StuffBasePriceTransports", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StuffBasePriceTransports_BaseEntities_StuffBasePrice_StuffBasePriceId",
                        column: x => x.StuffBasePriceId,
                        principalTable: "BaseEntities_StuffBasePrice",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_StuffRequestItem",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    StuffId = table.Column<int>(type: "int", nullable: true),
                    Qty = table.Column<double>(type: "float", nullable: false),
                    ResponsedQty = table.Column<double>(type: "float", nullable: false),
                    UnitId = table.Column<byte>(type: "tinyint", nullable: false),
                    StuffRequestId = table.Column<int>(type: "int", nullable: false),
                    Status = table.Column<byte>(type: "tinyint", nullable: false),
                    BillOfMaterialVersion = table.Column<short>(type: "smallint", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_StuffRequestItem", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_StuffRequestItem_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_StuffRequestItem_BaseEntities_StuffRequest_StuffRequestId",
                        column: x => x.StuffRequestId,
                        principalTable: "BaseEntities_StuffRequest",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_StuffRequestItem_Units_UnitId",
                        column: x => x.UnitId,
                        principalTable: "Units",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_StuffRequestMilestoneDetail",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    StuffRequestMilestoneId = table.Column<int>(type: "int", nullable: false),
                    Qty = table.Column<double>(type: "float", nullable: false),
                    StuffId = table.Column<int>(type: "int", nullable: false),
                    UnitId = table.Column<byte>(type: "tinyint", nullable: false),
                    Status = table.Column<byte>(type: "tinyint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_StuffRequestMilestoneDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_StuffRequestMilestoneDetail_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_StuffRequestMilestoneDetail_BaseEntities_StuffRequestMilestone_StuffRequestMilestoneId",
                        column: x => x.StuffRequestMilestoneId,
                        principalTable: "BaseEntities_StuffRequestMilestone",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_StuffRequestMilestoneDetail_Units_UnitId",
                        column: x => x.UnitId,
                        principalTable: "Units",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StuffRequestMilestoneDetailSummaries",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    OrderedQty = table.Column<double>(type: "float", nullable: false),
                    CargoedQty = table.Column<double>(type: "float", nullable: false),
                    ReciptedQty = table.Column<double>(type: "float", nullable: false),
                    StuffRequestMilestoneDetailId = table.Column<int>(type: "int", nullable: false),
                    QualityControlPassedQty = table.Column<double>(type: "float", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StuffRequestMilestoneDetailSummaries", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StuffRequestMilestoneDetailSummaries_BaseEntities_StuffRequestMilestoneDetail_StuffRequestMilestoneDetailId",
                        column: x => x.StuffRequestMilestoneDetailId,
                        principalTable: "BaseEntities_StuffRequestMilestoneDetail",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BaseEntities_WarehouseIssueItem",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    WarehouseIssueId = table.Column<int>(type: "int", nullable: false),
                    StuffId = table.Column<int>(type: "int", nullable: false),
                    BillOfMaterialVersion = table.Column<short>(type: "smallint", nullable: true),
                    Amount = table.Column<double>(type: "float", nullable: false),
                    UnitId = table.Column<byte>(type: "tinyint", nullable: false),
                    AssetCode = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    StuffSerialCode = table.Column<long>(type: "bigint", nullable: true),
                    TransactionLevel = table.Column<byte>(type: "tinyint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseEntities_WarehouseIssueItem", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseEntities_WarehouseIssueItem_BaseEntities_Id",
                        column: x => x.Id,
                        principalTable: "BaseEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_WarehouseIssueItem_BaseEntities_WarehouseIssue_WarehouseIssueId",
                        column: x => x.WarehouseIssueId,
                        principalTable: "BaseEntities_WarehouseIssue",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseEntities_WarehouseIssueItem_Units_UnitId",
                        column: x => x.UnitId,
                        principalTable: "Units",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Risks",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Title = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreatorUserId = table.Column<int>(type: "int", nullable: false),
                    CreateDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    PurchaseRequestId = table.Column<int>(type: "int", nullable: true),
                    PurchaseOrderId = table.Column<int>(type: "int", nullable: true),
                    CargoItemId = table.Column<int>(type: "int", nullable: true),
                    LatestRiskStatusId = table.Column<int>(type: "int", nullable: false),
                    LatestRiskResolveId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Risks", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Risks_BaseEntities_CargoItem_CargoItemId",
                        column: x => x.CargoItemId,
                        principalTable: "BaseEntities_CargoItem",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Risks_BaseEntities_PurchaseOrder_PurchaseOrderId",
                        column: x => x.PurchaseOrderId,
                        principalTable: "BaseEntities_PurchaseOrder",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Risks_BaseEntities_PurchaseRequest_PurchaseRequestId",
                        column: x => x.PurchaseRequestId,
                        principalTable: "BaseEntities_PurchaseRequest",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Risks_Users_CreatorUserId",
                        column: x => x.CreatorUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "RiskResolves",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RiskId = table.Column<int>(type: "int", nullable: false),
                    CorrectiveAction = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CreatorUserId = table.Column<int>(type: "int", nullable: false),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    Status = table.Column<byte>(type: "tinyint", nullable: false),
                    ReviewerUserId = table.Column<int>(type: "int", nullable: true),
                    RevieweDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ReviewDescription = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RiskResolves", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RiskResolves_Risks_RiskId",
                        column: x => x.RiskId,
                        principalTable: "Risks",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RiskResolves_Users_CreatorUserId",
                        column: x => x.CreatorUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RiskResolves_Users_ReviewerUserId",
                        column: x => x.ReviewerUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "RiskStatuses",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RiskId = table.Column<int>(type: "int", nullable: false),
                    OccurrenceSeverityStatus = table.Column<byte>(type: "tinyint", nullable: false),
                    OccurrenceProbabilityStatus = table.Column<byte>(type: "tinyint", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    RiskResolveId = table.Column<int>(type: "int", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RiskStatuses", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RiskStatuses_RiskParameters_OccurrenceSeverityStatus_OccurrenceProbabilityStatus",
                        columns: x => new { x.OccurrenceSeverityStatus, x.OccurrenceProbabilityStatus },
                        principalTable: "RiskParameters",
                        principalColumns: new[] { "OccurrenceSeverityStatus", "OccurrenceProbabilityStatus" },
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RiskStatuses_RiskResolves_RiskResolveId",
                        column: x => x.RiskResolveId,
                        principalTable: "RiskResolves",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RiskStatuses_Risks_RiskId",
                        column: x => x.RiskId,
                        principalTable: "Risks",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RiskStatuses_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "FinanceItems",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FinanceId = table.Column<int>(type: "int", nullable: true),
                    PurchaseOrderId = table.Column<int>(type: "int", nullable: true),
                    ExpenseFinancialDocumentId = table.Column<int>(type: "int", nullable: true),
                    CooperatorId = table.Column<int>(type: "int", nullable: false),
                    PaymentMethod = table.Column<byte>(type: "tinyint", nullable: false),
                    FinanceType = table.Column<byte>(type: "tinyint", nullable: false),
                    PaymentKind = table.Column<byte>(type: "tinyint", nullable: true),
                    AcceptedPaymentMethod = table.Column<byte>(type: "tinyint", nullable: true),
                    ChequeNumber = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: true),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    RequestedAmount = table.Column<double>(type: "float", nullable: false),
                    RequestedDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    RequestedDueDateTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                    AcceptedDueDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    AllocatedAmount = table.Column<double>(type: "float", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    FinancialDescription = table.Column<string>(type: "nvarchar(300)", maxLength: 300, nullable: true),
                    ReceivedDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ReceivedCreatedDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    ReceivedUserId = table.Column<int>(type: "int", nullable: true),
                    LatestConfirmationId = table.Column<int>(type: "int", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinanceItems", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinanceItems_BaseEntities_FinancialDocument_ExpenseFinancialDocumentId",
                        column: x => x.ExpenseFinancialDocumentId,
                        principalTable: "BaseEntities_FinancialDocument",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FinanceItems_BaseEntities_PurchaseOrder_PurchaseOrderId",
                        column: x => x.PurchaseOrderId,
                        principalTable: "BaseEntities_PurchaseOrder",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FinanceItems_Cooperators_CooperatorId",
                        column: x => x.CooperatorId,
                        principalTable: "Cooperators",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FinanceItems_Users_ReceivedUserId",
                        column: x => x.ReceivedUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FinanceItems_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "FinanceItemConfirmations",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FinanceItemId = table.Column<int>(type: "int", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    Status = table.Column<byte>(type: "tinyint", nullable: false),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinanceItemConfirmations", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinanceItemConfirmations_FinanceItems_FinanceItemId",
                        column: x => x.FinanceItemId,
                        principalTable: "FinanceItems",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FinanceItemConfirmations_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StuffSerials",
                columns: table => new
                {
                    Code = table.Column<long>(type: "bigint", nullable: false),
                    StuffId = table.Column<int>(type: "int", nullable: false),
                    ProductionOrderId = table.Column<int>(type: "int", nullable: true),
                    BatchNo = table.Column<long>(type: "bigint", nullable: false),
                    SerialProfileCode = table.Column<int>(type: "int", nullable: false),
                    Order = table.Column<int>(type: "int", nullable: false),
                    Serial = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    InitQty = table.Column<double>(type: "float", nullable: false),
                    PartitionedQty = table.Column<double>(type: "float", nullable: false),
                    InitUnitId = table.Column<byte>(type: "tinyint", nullable: false),
                    PartitionStuffSerialId = table.Column<int>(type: "int", nullable: true),
                    IsPacking = table.Column<bool>(type: "bit", nullable: false),
                    Status = table.Column<byte>(type: "tinyint", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    BillOfMaterialVersion = table.Column<short>(type: "smallint", nullable: true),
                    QualityControlDescription = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    LastModified = table.Column<DateTime>(type: "datetime2", nullable: true),
                    LastModifiedUserId = table.Column<int>(type: "int", nullable: true),
                    IssueConfirmerUserId = table.Column<int>(type: "int", nullable: true),
                    IssueUserId = table.Column<int>(type: "int", nullable: true),
                    WarehouseEnterTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CRC = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    UnitRialPrice = table.Column<double>(type: "float", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StuffSerials", x => new { x.Code, x.StuffId });
                    table.ForeignKey(
                        name: "FK_StuffSerials_BaseEntities_PartitionStuffSerial_PartitionStuffSerialId",
                        column: x => x.PartitionStuffSerialId,
                        principalTable: "BaseEntities_PartitionStuffSerial",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StuffSerials_BaseEntities_ProductionOrder_ProductionOrderId",
                        column: x => x.ProductionOrderId,
                        principalTable: "BaseEntities_ProductionOrder",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StuffSerials_Units_InitUnitId",
                        column: x => x.InitUnitId,
                        principalTable: "Units",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StuffSerials_Users_IssueConfirmerUserId",
                        column: x => x.IssueConfirmerUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StuffSerials_Users_IssueUserId",
                        column: x => x.IssueUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StuffSerials_Users_LastModifiedUserId",
                        column: x => x.LastModifiedUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ExitReceiptDeleteRequestStuffSerials",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ExitReceiptDeleteRequestId = table.Column<int>(type: "int", nullable: false),
                    StuffSerialId = table.Column<int>(type: "int", nullable: false),
                    StuffSerialCode = table.Column<long>(type: "bigint", nullable: false),
                    Amount = table.Column<double>(type: "float", nullable: false),
                    UnitId = table.Column<byte>(type: "tinyint", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ExitReceiptDeleteRequestStuffSerials", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ExitReceiptDeleteRequestStuffSerials_ExitReceiptDeleteRequests_ExitReceiptDeleteRequestId",
                        column: x => x.ExitReceiptDeleteRequestId,
                        principalTable: "ExitReceiptDeleteRequests",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ExitReceiptDeleteRequestStuffSerials_StuffSerials_StuffSerialCode_StuffSerialId",
                        columns: x => new { x.StuffSerialCode, x.StuffSerialId },
                        principalTable: "StuffSerials",
                        principalColumns: new[] { "Code", "StuffId" },
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ExitReceiptDeleteRequestStuffSerials_Units_UnitId",
                        column: x => x.UnitId,
                        principalTable: "Units",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "LinkSerials",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    LinkedSerial = table.Column<string>(type: "nvarchar(50)", maxLength: 50, nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    UserLinkerId = table.Column<int>(type: "int", nullable: true),
                    CustomerId = table.Column<int>(type: "int", nullable: false),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    LinkDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Type = table.Column<byte>(type: "tinyint", nullable: false),
                    StuffSerialCode = table.Column<long>(type: "bigint", nullable: false),
                    StuffId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LinkSerials", x => x.Id);
                    table.ForeignKey(
                        name: "FK_LinkSerials_Cooperators_CustomerId",
                        column: x => x.CustomerId,
                        principalTable: "Cooperators",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_LinkSerials_StuffSerials_StuffSerialCode_StuffId",
                        columns: x => new { x.StuffSerialCode, x.StuffId },
                        principalTable: "StuffSerials",
                        principalColumns: new[] { "Code", "StuffId" },
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_LinkSerials_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_LinkSerials_Users_UserLinkerId",
                        column: x => x.UserLinkerId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Productions",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProductionOrderId = table.Column<int>(type: "int", nullable: false),
                    StuffSerialCode = table.Column<long>(type: "bigint", nullable: false),
                    StuffSerialStuffId = table.Column<int>(type: "int", nullable: false),
                    Status = table.Column<byte>(type: "tinyint", nullable: false),
                    Type = table.Column<byte>(type: "tinyint", nullable: false),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Productions", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Productions_BaseEntities_ProductionOrder_ProductionOrderId",
                        column: x => x.ProductionOrderId,
                        principalTable: "BaseEntities_ProductionOrder",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Productions_StuffSerials_StuffSerialCode_StuffSerialStuffId",
                        columns: x => new { x.StuffSerialCode, x.StuffSerialStuffId },
                        principalTable: "StuffSerials",
                        principalColumns: new[] { "Code", "StuffId" },
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Productions_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ReturnSerialToPreviousStateRequests",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Serial = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    StuffId = table.Column<int>(type: "int", nullable: false),
                    StuffSerialCode = table.Column<long>(type: "bigint", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    ConfirmerUserId = table.Column<int>(type: "int", nullable: true),
                    WrongDoerUserId = table.Column<int>(type: "int", nullable: true),
                    RequestDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    ConfirmDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Status = table.Column<byte>(type: "tinyint", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ReturnSerialToPreviousStateRequests", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ReturnSerialToPreviousStateRequests_StuffSerials_StuffSerialCode_StuffId",
                        columns: x => new { x.StuffSerialCode, x.StuffId },
                        principalTable: "StuffSerials",
                        principalColumns: new[] { "Code", "StuffId" },
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ReturnSerialToPreviousStateRequests_Users_ConfirmerUserId",
                        column: x => x.ConfirmerUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ReturnSerialToPreviousStateRequests_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ReturnSerialToPreviousStateRequests_Users_WrongDoerUserId",
                        column: x => x.WrongDoerUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StoreReceiptDeleteRequestStuffSerials",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StoreReceiptDeleteRequestId = table.Column<int>(type: "int", nullable: false),
                    StuffSerialId = table.Column<int>(type: "int", nullable: false),
                    StuffSerialCode = table.Column<long>(type: "bigint", nullable: false),
                    Amount = table.Column<double>(type: "float", nullable: false),
                    UnitId = table.Column<byte>(type: "tinyint", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StoreReceiptDeleteRequestStuffSerials", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StoreReceiptDeleteRequestStuffSerials_StoreReceiptDeleteRequests_StoreReceiptDeleteRequestId",
                        column: x => x.StoreReceiptDeleteRequestId,
                        principalTable: "StoreReceiptDeleteRequests",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StoreReceiptDeleteRequestStuffSerials_StuffSerials_StuffSerialCode_StuffSerialId",
                        columns: x => new { x.StuffSerialCode, x.StuffSerialId },
                        principalTable: "StuffSerials",
                        principalColumns: new[] { "Code", "StuffId" },
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StoreReceiptDeleteRequestStuffSerials_Units_UnitId",
                        column: x => x.UnitId,
                        principalTable: "Units",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "RepairProductions",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ReturnOfSaleId = table.Column<int>(type: "int", nullable: true),
                    Status = table.Column<byte>(type: "tinyint", nullable: false),
                    WarrantyExpirationExceptionId = table.Column<int>(type: "int", nullable: true),
                    ProductionId = table.Column<int>(type: "int", nullable: false),
                    SerialStatus = table.Column<byte>(type: "tinyint", nullable: false),
                    DateTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ReferenceRepairProductionId = table.Column<int>(type: "int", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RepairProductions", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RepairProductions_BaseEntities_ReturnOfSale_ReturnOfSaleId",
                        column: x => x.ReturnOfSaleId,
                        principalTable: "BaseEntities_ReturnOfSale",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RepairProductions_Productions_ProductionId",
                        column: x => x.ProductionId,
                        principalTable: "Productions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RepairProductions_RepairProductions_ReferenceRepairProductionId",
                        column: x => x.ReferenceRepairProductionId,
                        principalTable: "RepairProductions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_RepairProductions_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "GeneralStuffRequests",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProductionMaterialRequestId = table.Column<int>(type: "int", nullable: true),
                    StuffRequestType = table.Column<byte>(type: "tinyint", nullable: false),
                    StuffId = table.Column<int>(type: "int", nullable: false),
                    UnitId = table.Column<byte>(type: "tinyint", nullable: false),
                    BillOfMaterialVersion = table.Column<short>(type: "smallint", nullable: true),
                    Qty = table.Column<double>(type: "float", nullable: false),
                    StuffRequestQty = table.Column<double>(type: "float", nullable: false),
                    PurchaseRequestQty = table.Column<double>(type: "float", nullable: false),
                    AlternativePurchaseRequestQty = table.Column<double>(type: "float", nullable: false),
                    StatusDescription = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Status = table.Column<short>(type: "smallint", nullable: false),
                    ScrumEntityId = table.Column<int>(type: "int", nullable: true),
                    FromWarehouseId = table.Column<short>(type: "smallint", nullable: false),
                    ToWarehouseId = table.Column<short>(type: "smallint", nullable: true),
                    ToDepartmentId = table.Column<short>(type: "smallint", nullable: true),
                    ToEmployeeId = table.Column<int>(type: "int", nullable: true),
                    Deadline = table.Column<DateTime>(type: "datetime2", nullable: false),
                    DateTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GeneralStuffRequests", x => x.Id);
                    table.ForeignKey(
                        name: "FK_GeneralStuffRequests_BaseEntities_ProductionMaterialRequest_ProductionMaterialRequestId",
                        column: x => x.ProductionMaterialRequestId,
                        principalTable: "BaseEntities_ProductionMaterialRequest",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_GeneralStuffRequests_Departments_ToDepartmentId",
                        column: x => x.ToDepartmentId,
                        principalTable: "Departments",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_GeneralStuffRequests_Employees_ToEmployeeId",
                        column: x => x.ToEmployeeId,
                        principalTable: "Employees",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_GeneralStuffRequests_ScrumEntities_ScrumEntityId",
                        column: x => x.ScrumEntityId,
                        principalTable: "ScrumEntities",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_GeneralStuffRequests_Units_UnitId",
                        column: x => x.UnitId,
                        principalTable: "Units",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_GeneralStuffRequests_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_GeneralStuffRequests_Warehouses_FromWarehouseId",
                        column: x => x.FromWarehouseId,
                        principalTable: "Warehouses",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_GeneralStuffRequests_Warehouses_ToWarehouseId",
                        column: x => x.ToWarehouseId,
                        principalTable: "Warehouses",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "GeneralStuffRequestDetails",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    GeneralStuffRequestId = table.Column<int>(type: "int", nullable: false),
                    StuffRequestId = table.Column<int>(type: "int", nullable: true),
                    PurchaseRequestId = table.Column<int>(type: "int", nullable: true),
                    AlternativePurchaseRequestId = table.Column<int>(type: "int", nullable: true),
                    Qty = table.Column<double>(type: "float", nullable: false),
                    UnitId = table.Column<byte>(type: "tinyint", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GeneralStuffRequestDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_GeneralStuffRequestDetails_BaseEntities_PurchaseRequest_AlternativePurchaseRequestId",
                        column: x => x.AlternativePurchaseRequestId,
                        principalTable: "BaseEntities_PurchaseRequest",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_GeneralStuffRequestDetails_BaseEntities_PurchaseRequest_PurchaseRequestId",
                        column: x => x.PurchaseRequestId,
                        principalTable: "BaseEntities_PurchaseRequest",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_GeneralStuffRequestDetails_BaseEntities_StuffRequest_StuffRequestId",
                        column: x => x.StuffRequestId,
                        principalTable: "BaseEntities_StuffRequest",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_GeneralStuffRequestDetails_GeneralStuffRequests_GeneralStuffRequestId",
                        column: x => x.GeneralStuffRequestId,
                        principalTable: "GeneralStuffRequests",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_GeneralStuffRequestDetails_Units_UnitId",
                        column: x => x.UnitId,
                        principalTable: "Units",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProductionOperators",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    MachineTypeOperatorTypeId = table.Column<short>(type: "smallint", nullable: true),
                    OperatorTypeId = table.Column<short>(type: "smallint", nullable: true),
                    OperationSequenceId = table.Column<int>(type: "int", nullable: true),
                    OperationId = table.Column<short>(type: "smallint", nullable: false),
                    DefaultTime = table.Column<int>(type: "int", nullable: false),
                    WrongLimitCount = table.Column<int>(type: "int", nullable: false),
                    ProductionOrderId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductionOperators", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProductionOperators_BaseEntities_ProductionOrder_ProductionOrderId",
                        column: x => x.ProductionOrderId,
                        principalTable: "BaseEntities_ProductionOrder",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProductionOperators_MachineTypeOperatorTypes_MachineTypeOperatorTypeId",
                        column: x => x.MachineTypeOperatorTypeId,
                        principalTable: "MachineTypeOperatorTypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProductionOperators_Operations_OperationId",
                        column: x => x.OperationId,
                        principalTable: "Operations",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProductionOperators_WorkStationParts_OperatorType_OperatorTypeId",
                        column: x => x.OperatorTypeId,
                        principalTable: "WorkStationParts_OperatorType",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProductionOperatorEmployeeBans",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProductionOperatorId = table.Column<int>(type: "int", nullable: false),
                    EmployeeId = table.Column<int>(type: "int", nullable: false),
                    IsBan = table.Column<bool>(type: "bit", nullable: false),
                    BanDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    RevokeDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RevokeUserId = table.Column<int>(type: "int", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductionOperatorEmployeeBans", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProductionOperatorEmployeeBans_Employees_EmployeeId",
                        column: x => x.EmployeeId,
                        principalTable: "Employees",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProductionOperatorEmployeeBans_ProductionOperators_ProductionOperatorId",
                        column: x => x.ProductionOperatorId,
                        principalTable: "ProductionOperators",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProductionOperatorEmployeeBans_Users_RevokeUserId",
                        column: x => x.RevokeUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProductionOperatorMachineEmployees",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProductionOperatorId = table.Column<int>(type: "int", nullable: false),
                    MachineId = table.Column<short>(type: "smallint", nullable: true),
                    EmployeeId = table.Column<int>(type: "int", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    ProductionTerminalId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductionOperatorMachineEmployees", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProductionOperatorMachineEmployees_Employees_EmployeeId",
                        column: x => x.EmployeeId,
                        principalTable: "Employees",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProductionOperatorMachineEmployees_Machines_MachineId",
                        column: x => x.MachineId,
                        principalTable: "Machines",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProductionOperatorMachineEmployees_ProductionOperators_ProductionOperatorId",
                        column: x => x.ProductionOperatorId,
                        principalTable: "ProductionOperators",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProductionOperatorMachineEmployees_ProductionTerminals_ProductionTerminalId",
                        column: x => x.ProductionTerminalId,
                        principalTable: "ProductionTerminals",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SerialFailedOperations",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProductionOrderId = table.Column<int>(type: "int", nullable: false),
                    ProductionOperationId = table.Column<int>(type: "int", nullable: false),
                    CreatedDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    Status = table.Column<byte>(type: "tinyint", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    IsRepaired = table.Column<bool>(type: "bit", nullable: false),
                    RepairProductionId = table.Column<int>(type: "int", nullable: true),
                    ReviewerUserId = table.Column<int>(type: "int", nullable: true),
                    ConfirmUserId = table.Column<int>(type: "int", nullable: true),
                    ReviewedDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SerialFailedOperations", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SerialFailedOperations_BaseEntities_ProductionOrder_ProductionOrderId",
                        column: x => x.ProductionOrderId,
                        principalTable: "BaseEntities_ProductionOrder",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SerialFailedOperations_RepairProductions_RepairProductionId",
                        column: x => x.RepairProductionId,
                        principalTable: "RepairProductions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SerialFailedOperations_Users_ConfirmUserId",
                        column: x => x.ConfirmUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SerialFailedOperations_Users_ReviewerUserId",
                        column: x => x.ReviewerUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SerialFailedOperationFaultOperations",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SerialFailedOperationId = table.Column<int>(type: "int", nullable: false),
                    OperationId = table.Column<short>(type: "smallint", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SerialFailedOperationFaultOperations", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SerialFailedOperationFaultOperations_Operations_OperationId",
                        column: x => x.OperationId,
                        principalTable: "Operations",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SerialFailedOperationFaultOperations_SerialFailedOperations_SerialFailedOperationId",
                        column: x => x.SerialFailedOperationId,
                        principalTable: "SerialFailedOperations",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SerialFailedOperationFaultOperationEmployees",
                columns: table => new
                {
                    SerialFailedOperationFaultOperationId = table.Column<int>(type: "int", nullable: false),
                    ProductionOperationEmployeeId = table.Column<int>(type: "int", nullable: false),
                    ProductionOperatorEmployeeBanId = table.Column<int>(type: "int", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SerialFailedOperationFaultOperationEmployees", x => new { x.SerialFailedOperationFaultOperationId, x.ProductionOperationEmployeeId });
                    table.ForeignKey(
                        name: "FK_SerialFailedOperationFaultOperationEmployees_ProductionOperationEmployees_ProductionOperationEmployeeId",
                        column: x => x.ProductionOperationEmployeeId,
                        principalTable: "ProductionOperationEmployees",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SerialFailedOperationFaultOperationEmployees_ProductionOperatorEmployeeBans_ProductionOperatorEmployeeBanId",
                        column: x => x.ProductionOperatorEmployeeBanId,
                        principalTable: "ProductionOperatorEmployeeBans",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SerialFailedOperationFaultOperationEmployees_SerialFailedOperationFaultOperations_SerialFailedOperationFaultOperationId",
                        column: x => x.SerialFailedOperationFaultOperationId,
                        principalTable: "SerialFailedOperationFaultOperations",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "QualityControlConfirmationTests",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    StuffId = table.Column<int>(type: "int", nullable: false),
                    QualityControlTestId = table.Column<long>(type: "bigint", nullable: false),
                    TestConditionId = table.Column<int>(type: "int", nullable: false),
                    QualityControlConfirmationId = table.Column<int>(type: "int", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Status = table.Column<byte>(type: "tinyint", nullable: false),
                    AQLAmount = table.Column<double>(type: "float", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_QualityControlConfirmationTests", x => x.Id);
                    table.ForeignKey(
                        name: "FK_QualityControlConfirmationTests_BaseEntities_QualityControlConfirmation_QualityControlConfirmationId",
                        column: x => x.QualityControlConfirmationId,
                        principalTable: "BaseEntities_QualityControlConfirmation",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_QualityControlConfirmationTests_TestConditions_TestConditionId",
                        column: x => x.TestConditionId,
                        principalTable: "TestConditions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_QualityControlConfirmationTests_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "QualityControlConfirmationTestItems",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    SampleName = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    QualityControlConfirmationTestId = table.Column<int>(type: "int", nullable: false),
                    ObtainAmount = table.Column<double>(type: "float", nullable: true),
                    MinObtainAmount = table.Column<double>(type: "float", nullable: true),
                    MaxObtainAmount = table.Column<double>(type: "float", nullable: true),
                    TesterUserId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_QualityControlConfirmationTestItems", x => x.Id);
                    table.ForeignKey(
                        name: "FK_QualityControlConfirmationTestItems_QualityControlConfirmationTests_QualityControlConfirmationTestId",
                        column: x => x.QualityControlConfirmationTestId,
                        principalTable: "QualityControlConfirmationTests",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_QualityControlConfirmationTestItems_Users_TesterUserId",
                        column: x => x.TesterUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProductionStuffDetails_RepairProductionStuffDetail",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false),
                    RepairProductionFaultId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductionStuffDetails_RepairProductionStuffDetail", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProductionStuffDetails_RepairProductionStuffDetail_BaseEntities_RepairProductionFault_RepairProductionFaultId",
                        column: x => x.RepairProductionFaultId,
                        principalTable: "BaseEntities_RepairProductionFault",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SerialProfiles_StoreReceiptSerialProfile",
                columns: table => new
                {
                    Code = table.Column<int>(type: "int", nullable: false),
                    StuffId = table.Column<int>(type: "int", nullable: false),
                    StoreReceiptId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SerialProfiles_StoreReceiptSerialProfile", x => new { x.Code, x.StuffId });
                    table.ForeignKey(
                        name: "FK_SerialProfiles_StoreReceiptSerialProfile_BaseEntities_StoreReceipt_StoreReceiptId",
                        column: x => x.StoreReceiptId,
                        principalTable: "BaseEntities_StoreReceipt",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SerialBuffers",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RemainingAmount = table.Column<double>(type: "float", nullable: false),
                    ProductionTerminalId = table.Column<int>(type: "int", nullable: false),
                    SerialBufferType = table.Column<byte>(type: "tinyint", nullable: false),
                    BaseTransactionId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    DamagedAmount = table.Column<double>(type: "float", nullable: false),
                    ShortageAmount = table.Column<double>(type: "float", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SerialBuffers", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SerialBuffers_ProductionTerminals_ProductionTerminalId",
                        column: x => x.ProductionTerminalId,
                        principalTable: "ProductionTerminals",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "EquivalentStuffs",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Title = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    BillOfMaterialDetailId = table.Column<int>(type: "int", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    EquivalentStuffType = table.Column<byte>(type: "tinyint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EquivalentStuffs", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "OperationConsumingMaterials",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BillOfMaterialDetailId = table.Column<int>(type: "int", nullable: false),
                    Value = table.Column<double>(type: "float", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    OperationSequenceId = table.Column<int>(type: "int", nullable: false),
                    LimitedSerialBuffer = table.Column<bool>(type: "bit", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationConsumingMaterials", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "BillOfMaterialDocuments",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BillOfMaterialVersion = table.Column<short>(type: "smallint", nullable: false),
                    BillOfMaterialStuffId = table.Column<int>(type: "int", nullable: false),
                    BillOfMaterialDocumentTypeId = table.Column<int>(type: "int", nullable: false),
                    Title = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    FileName = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DocumentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    DateOfDelete = table.Column<DateTime>(type: "datetime2", nullable: true),
                    DeleteUserId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BillOfMaterialDocuments", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BillOfMaterialDocuments_BillOfMaterialDocumentTypes_BillOfMaterialDocumentTypeId",
                        column: x => x.BillOfMaterialDocumentTypeId,
                        principalTable: "BillOfMaterialDocumentTypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BillOfMaterialDocuments_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BillOfMaterialPriceHistoryCurrencyRates",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BillOfMaterialPriceHistoryId = table.Column<int>(type: "int", nullable: false),
                    FromCurrencyId = table.Column<byte>(type: "tinyint", nullable: false),
                    ToCurrencyId = table.Column<byte>(type: "tinyint", nullable: false),
                    Rate = table.Column<double>(type: "float", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BillOfMaterialPriceHistoryCurrencyRates", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BillOfMaterialPriceHistoryCurrencyRates_Currencies_FromCurrencyId",
                        column: x => x.FromCurrencyId,
                        principalTable: "Currencies",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BillOfMaterialPriceHistoryCurrencyRates_Currencies_ToCurrencyId",
                        column: x => x.ToCurrencyId,
                        principalTable: "Currencies",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BillOfMaterialPriceHistoryDetails",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    BillOfMaerialPriceHistoryId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    StuffId = table.Column<int>(type: "int", nullable: false),
                    BasePriceId = table.Column<long>(type: "bigint", nullable: true),
                    Version = table.Column<int>(type: "int", nullable: true),
                    UnitId = table.Column<byte>(type: "tinyint", nullable: false),
                    Amount = table.Column<double>(type: "float", nullable: false),
                    BaseFeeByOwnCurrency = table.Column<double>(type: "float", nullable: true),
                    BaseFee = table.Column<double>(type: "float", nullable: true),
                    StuffPriceStatus = table.Column<short>(type: "smallint", nullable: true),
                    StuffPriceDateTime = table.Column<DateTime>(type: "datetime2", nullable: true),
                    StuffPriceCurrencyId = table.Column<int>(type: "int", nullable: true),
                    BaseCustomsFee = table.Column<double>(type: "float", nullable: true),
                    BaseTransportFee = table.Column<double>(type: "float", nullable: true),
                    BaseTotalFee = table.Column<double>(type: "float", nullable: true),
                    BaseFeeDateTime = table.Column<DateTime>(type: "datetime2", nullable: true),
                    BaseCurrencyId = table.Column<int>(type: "int", nullable: true),
                    BasePrice = table.Column<double>(type: "float", nullable: true),
                    Factor = table.Column<double>(type: "float", nullable: false),
                    AveragePurchaseFee = table.Column<double>(type: "float", nullable: false),
                    LastPurchaseFee = table.Column<double>(type: "float", nullable: true),
                    LastPurchaseFeeInSourceCurrency = table.Column<double>(type: "float", nullable: true),
                    LastPurchaseFeeSourceCurrencyId = table.Column<int>(type: "int", nullable: true),
                    LastPurchaseFeeDateTime = table.Column<DateTime>(type: "datetime2", nullable: true),
                    AverageEstimatedFee = table.Column<double>(type: "float", nullable: false),
                    LastEstimatedFee = table.Column<double>(type: "float", nullable: true),
                    LastEstimatedFeeInSourceCurrency = table.Column<double>(type: "float", nullable: true),
                    LastEstimatedFeeSourceCurrencyId = table.Column<int>(type: "int", nullable: true),
                    LastEstimateDateTime = table.Column<DateTime>(type: "datetime2", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BillOfMaterialPriceHistoryDetails", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "BaseTransactions",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Amount = table.Column<double>(type: "float", nullable: false),
                    EffectDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    StuffSerialCode = table.Column<long>(type: "bigint", nullable: true),
                    StuffId = table.Column<int>(type: "int", nullable: false),
                    UnitId = table.Column<byte>(type: "tinyint", nullable: false),
                    TransactionBatchId = table.Column<int>(type: "int", nullable: false),
                    TransactionTypeId = table.Column<short>(type: "smallint", nullable: false),
                    BillOfMaterialVersion = table.Column<short>(type: "smallint", nullable: true),
                    ReferenceTransactionId = table.Column<int>(type: "int", nullable: true),
                    WarehouseId = table.Column<short>(type: "smallint", nullable: true),
                    WarehouseFiscalPeriodId = table.Column<short>(type: "smallint", nullable: false),
                    IsEstimated = table.Column<bool>(type: "bit", nullable: true),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    DeletedAt = table.Column<DateTime>(type: "datetime2", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BaseTransactions", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BaseTransactions_BaseTransactions_ReferenceTransactionId",
                        column: x => x.ReferenceTransactionId,
                        principalTable: "BaseTransactions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseTransactions_StuffSerials_StuffSerialCode_StuffId",
                        columns: x => new { x.StuffSerialCode, x.StuffId },
                        principalTable: "StuffSerials",
                        principalColumns: new[] { "Code", "StuffId" },
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseTransactions_TransactionBatches_TransactionBatchId",
                        column: x => x.TransactionBatchId,
                        principalTable: "TransactionBatches",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseTransactions_TransactionTypes_TransactionTypeId",
                        column: x => x.TransactionTypeId,
                        principalTable: "TransactionTypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseTransactions_Units_UnitId",
                        column: x => x.UnitId,
                        principalTable: "Units",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseTransactions_WarehouseFiscalPeriods_WarehouseFiscalPeriodId",
                        column: x => x.WarehouseFiscalPeriodId,
                        principalTable: "WarehouseFiscalPeriods",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BaseTransactions_Warehouses_WarehouseId",
                        column: x => x.WarehouseId,
                        principalTable: "Warehouses",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BillOfMaterialDetails",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Index = table.Column<int>(type: "int", nullable: false),
                    Value = table.Column<double>(type: "float", nullable: false),
                    Reservable = table.Column<bool>(type: "bit", nullable: false),
                    UnitId = table.Column<byte>(type: "tinyint", nullable: false),
                    StuffId = table.Column<int>(type: "int", nullable: false),
                    ForQty = table.Column<double>(type: "float", nullable: false),
                    IsPackingMaterial = table.Column<bool>(type: "bit", nullable: false),
                    SemiProductBillOfMaterialVersion = table.Column<short>(type: "smallint", nullable: true),
                    BillOfMaterialDetailType = table.Column<byte>(type: "tinyint", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    BillOfMaterialVersion = table.Column<short>(type: "smallint", nullable: false),
                    BillOfMaterialStuffId = table.Column<int>(type: "int", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BillOfMaterialDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BillOfMaterialDetails_Units_UnitId",
                        column: x => x.UnitId,
                        principalTable: "Units",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "EquivalentStuffDetails",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Value = table.Column<double>(type: "float", nullable: false),
                    UnitId = table.Column<byte>(type: "tinyint", nullable: false),
                    ForQty = table.Column<double>(type: "float", nullable: false),
                    StuffId = table.Column<int>(type: "int", nullable: false),
                    SemiProductBillOfMaterialVersion = table.Column<short>(type: "smallint", nullable: true),
                    EquivalentStuffId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EquivalentStuffDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EquivalentStuffDetails_EquivalentStuffs_EquivalentStuffId",
                        column: x => x.EquivalentStuffId,
                        principalTable: "EquivalentStuffs",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EquivalentStuffDetails_Units_UnitId",
                        column: x => x.UnitId,
                        principalTable: "Units",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "WorkPlans",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Version = table.Column<int>(type: "int", nullable: false),
                    Title = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    BillOfMaterialStuffId = table.Column<int>(type: "int", nullable: false),
                    BillOfMaterialVersion = table.Column<short>(type: "smallint", nullable: false),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    IsPublished = table.Column<bool>(type: "bit", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WorkPlans", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "WorkPlanSteps",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Title = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ProductionLineId = table.Column<int>(type: "int", nullable: false),
                    SwitchTime = table.Column<long>(type: "bigint", nullable: false),
                    InitialTime = table.Column<long>(type: "bigint", nullable: false),
                    BatchTime = table.Column<long>(type: "bigint", nullable: false),
                    BatchCount = table.Column<double>(type: "float", nullable: false),
                    WorkPlanId = table.Column<int>(type: "int", nullable: false),
                    NeedToQualityControl = table.Column<bool>(type: "bit", nullable: false),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    WorkPlanIsPublished = table.Column<bool>(type: "bit", nullable: false),
                    PlanningWithoutMachineLimit = table.Column<bool>(type: "bit", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    ProductWarehouseId = table.Column<short>(type: "smallint", nullable: true),
                    ConsumeWarehouseId = table.Column<short>(type: "smallint", nullable: true),
                    ProductionStepId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WorkPlanSteps", x => x.Id);
                    table.ForeignKey(
                        name: "FK_WorkPlanSteps_ProductionLineProductionSteps_ProductionLineId_ProductionStepId",
                        columns: x => new { x.ProductionLineId, x.ProductionStepId },
                        principalTable: "ProductionLineProductionSteps",
                        principalColumns: new[] { "ProductionLineId", "ProductionStepId" },
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WorkPlanSteps_ProductionLines_ProductionLineId",
                        column: x => x.ProductionLineId,
                        principalTable: "ProductionLines",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WorkPlanSteps_ProductionSteps_ProductionStepId",
                        column: x => x.ProductionStepId,
                        principalTable: "ProductionSteps",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WorkPlanSteps_Warehouses_ConsumeWarehouseId",
                        column: x => x.ConsumeWarehouseId,
                        principalTable: "Warehouses",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WorkPlanSteps_Warehouses_ProductWarehouseId",
                        column: x => x.ProductWarehouseId,
                        principalTable: "Warehouses",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WorkPlanSteps_WorkPlans_WorkPlanId",
                        column: x => x.WorkPlanId,
                        principalTable: "WorkPlans",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "OperationSequences",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Index = table.Column<int>(type: "int", nullable: false),
                    DefaultTime = table.Column<float>(type: "real", nullable: false),
                    IsOptional = table.Column<bool>(type: "bit", nullable: false),
                    IsRepairReturnPoint = table.Column<bool>(type: "bit", nullable: false),
                    WorkPlanStepId = table.Column<int>(type: "int", nullable: false),
                    WorkStationPartId = table.Column<short>(type: "smallint", nullable: false),
                    WorkStationPartCount = table.Column<int>(type: "int", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    WorkStationId = table.Column<short>(type: "smallint", nullable: false),
                    OperationId = table.Column<short>(type: "smallint", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationSequences", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationSequences_Operations_OperationId",
                        column: x => x.OperationId,
                        principalTable: "Operations",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OperationSequences_WorkPlanSteps_WorkPlanStepId",
                        column: x => x.WorkPlanStepId,
                        principalTable: "WorkPlanSteps",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OperationSequences_WorkStationOperations_WorkStationId_OperationId",
                        columns: x => new { x.WorkStationId, x.OperationId },
                        principalTable: "WorkStationOperations",
                        principalColumns: new[] { "WorkStationId", "OperationId" },
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OperationSequences_WorkStationParts_WorkStationPartId",
                        column: x => x.WorkStationPartId,
                        principalTable: "WorkStationParts",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OperationSequences_WorkStations_WorkStationId",
                        column: x => x.WorkStationId,
                        principalTable: "WorkStations",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "OperationSequenceMachineTypeParameters",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    OperationSequenceId = table.Column<int>(type: "int", nullable: false),
                    MachineTypeParameterId = table.Column<int>(type: "int", nullable: false),
                    Value = table.Column<double>(type: "float", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OperationSequenceMachineTypeParameters", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OperationSequenceMachineTypeParameters_MachineTypeParameters_MachineTypeParameterId",
                        column: x => x.MachineTypeParameterId,
                        principalTable: "MachineTypeParameters",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_OperationSequenceMachineTypeParameters_OperationSequences_OperationSequenceId",
                        column: x => x.OperationSequenceId,
                        principalTable: "OperationSequences",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CustomerStuffs",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<string>(type: "nchar(2)", fixedLength: true, maxLength: 2, nullable: true),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    StuffId = table.Column<int>(type: "int", nullable: false),
                    CustomerId = table.Column<int>(type: "int", nullable: false),
                    Type = table.Column<byte>(type: "tinyint", nullable: false),
                    ManufacturerCode = table.Column<string>(type: "nchar(2)", fixedLength: true, maxLength: 2, nullable: false),
                    TechnicalNumber = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CustomerStuffs", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CustomerStuffs_Cooperators_CustomerId",
                        column: x => x.CustomerId,
                        principalTable: "Cooperators",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "CustomerStuffVersions",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<string>(type: "nchar(2)", fixedLength: true, maxLength: 2, nullable: true),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    IsPublish = table.Column<bool>(type: "bit", nullable: false),
                    CustomerStuffId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CustomerStuffVersions", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CustomerStuffVersions_CustomerStuffs_CustomerStuffId",
                        column: x => x.CustomerStuffId,
                        principalTable: "CustomerStuffs",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "IranKhodroSerials",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProductionYearId = table.Column<int>(type: "int", nullable: false),
                    CustomerStuffId = table.Column<int>(type: "int", nullable: false),
                    CustomerStuffVersionId = table.Column<int>(type: "int", nullable: false),
                    ProductionDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    ProductionDay = table.Column<int>(type: "int", nullable: false),
                    ProductionSerial = table.Column<int>(type: "int", nullable: false),
                    Print = table.Column<bool>(type: "bit", nullable: false),
                    PrintQty = table.Column<int>(type: "int", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    LinkSerialId = table.Column<int>(type: "int", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_IranKhodroSerials", x => x.Id);
                    table.ForeignKey(
                        name: "FK_IranKhodroSerials_CustomerStuffs_CustomerStuffId",
                        column: x => x.CustomerStuffId,
                        principalTable: "CustomerStuffs",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_IranKhodroSerials_CustomerStuffVersions_CustomerStuffVersionId",
                        column: x => x.CustomerStuffVersionId,
                        principalTable: "CustomerStuffVersions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_IranKhodroSerials_LinkSerials_LinkSerialId",
                        column: x => x.LinkSerialId,
                        principalTable: "LinkSerials",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_IranKhodroSerials_ProductionYears_ProductionYearId",
                        column: x => x.ProductionYearId,
                        principalTable: "ProductionYears",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_IranKhodroSerials_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "FinanceItemAllocationSummaries",
                columns: table => new
                {
                    FinanceId = table.Column<int>(type: "int", nullable: false),
                    CooperatorId = table.Column<int>(type: "int", nullable: false),
                    TotalRequestedAmout = table.Column<double>(type: "float", nullable: false),
                    TotalAllocatedAmount = table.Column<double>(type: "float", nullable: false),
                    TotalTransferredAmount = table.Column<double>(type: "float", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinanceItemAllocationSummaries", x => new { x.FinanceId, x.CooperatorId });
                    table.ForeignKey(
                        name: "FK_FinanceItemAllocationSummaries_Cooperators_CooperatorId",
                        column: x => x.CooperatorId,
                        principalTable: "Cooperators",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Finances",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<string>(type: "nvarchar(150)", maxLength: 150, nullable: true),
                    Title = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    CooperatorId = table.Column<int>(type: "int", nullable: false),
                    FinanacialAccountDetailId = table.Column<int>(type: "int", nullable: true),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    CurrencyId = table.Column<byte>(type: "tinyint", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    LastConfimationId = table.Column<int>(type: "int", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Finances", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Finances_Cooperators_CooperatorId",
                        column: x => x.CooperatorId,
                        principalTable: "Cooperators",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Finances_Currencies_CurrencyId",
                        column: x => x.CurrencyId,
                        principalTable: "Currencies",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Finances_FinancialAccountDetails_FinanacialAccountDetailId",
                        column: x => x.FinanacialAccountDetailId,
                        principalTable: "FinancialAccountDetails",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Finances_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "FinanceAllocations",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FinanceId = table.Column<int>(type: "int", nullable: false),
                    PaymentMethod = table.Column<byte>(type: "tinyint", nullable: false),
                    Amount = table.Column<double>(type: "float", nullable: false),
                    ChequeNumber = table.Column<string>(type: "nvarchar(70)", maxLength: 70, nullable: true),
                    AllocationDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinanceAllocations", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinanceAllocations_Finances_FinanceId",
                        column: x => x.FinanceId,
                        principalTable: "Finances",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FinanceAllocations_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "FinanceAllocationSummaries",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RequestedAmount = table.Column<double>(type: "float", nullable: false),
                    AllocatedAmount = table.Column<double>(type: "float", nullable: false),
                    SeparatedTransferAmount = table.Column<double>(type: "float", nullable: false),
                    TransferredAmount = table.Column<double>(type: "float", nullable: false),
                    FinanceId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinanceAllocationSummaries", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinanceAllocationSummaries_Finances_FinanceId",
                        column: x => x.FinanceId,
                        principalTable: "Finances",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "FinanceConfirmations",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    FinanceId = table.Column<int>(type: "int", nullable: false),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    Status = table.Column<byte>(type: "tinyint", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FinanceConfirmations", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FinanceConfirmations_Finances_FinanceId",
                        column: x => x.FinanceId,
                        principalTable: "Finances",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FinanceConfirmations_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PriceInquiries",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StuffId = table.Column<int>(type: "int", nullable: false),
                    CooperatorId = table.Column<int>(type: "int", nullable: false),
                    CurrencyId = table.Column<byte>(type: "tinyint", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Number = table.Column<int>(type: "int", nullable: true),
                    Price = table.Column<double>(type: "float", nullable: true),
                    PriceAnnunciationDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    CreateDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PriceInquiries", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PriceInquiries_Cooperators_CooperatorId",
                        column: x => x.CooperatorId,
                        principalTable: "Cooperators",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PriceInquiries_Currencies_CurrencyId",
                        column: x => x.CurrencyId,
                        principalTable: "Currencies",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PriceInquiries_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProjectERPs",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Title = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Code = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Version = table.Column<int>(type: "int", nullable: false),
                    Priority = table.Column<int>(type: "int", nullable: false),
                    Status = table.Column<byte>(type: "tinyint", nullable: false),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    StuffId = table.Column<int>(type: "int", nullable: true),
                    CustomerId = table.Column<int>(type: "int", nullable: true),
                    Progress = table.Column<short>(type: "smallint", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CreatorUserId = table.Column<int>(type: "int", nullable: false),
                    CreateDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    ProjectERPCategoryId = table.Column<short>(type: "smallint", nullable: false),
                    ProjectERPPhaseId = table.Column<short>(type: "smallint", nullable: true),
                    ProjectERPTypeId = table.Column<short>(type: "smallint", nullable: true),
                    EstimateStartDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RealStartDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProjectERPs", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProjectERPs_Cooperators_CustomerId",
                        column: x => x.CustomerId,
                        principalTable: "Cooperators",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProjectERPs_ProjectERPCategories_ProjectERPCategoryId",
                        column: x => x.ProjectERPCategoryId,
                        principalTable: "ProjectERPCategories",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProjectERPs_ProjectERPPhases_ProjectERPPhaseId",
                        column: x => x.ProjectERPPhaseId,
                        principalTable: "ProjectERPPhases",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProjectERPs_ProjectERPTypes_ProjectERPTypeId",
                        column: x => x.ProjectERPTypeId,
                        principalTable: "ProjectERPTypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProjectERPs_Users_CreatorUserId",
                        column: x => x.CreatorUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProjectERPDocuments",
                columns: table => new
                {
                    Id = table.Column<short>(type: "smallint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DocumentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    ProjectERPId = table.Column<int>(type: "int", nullable: false),
                    ProjectERPDocumentTypeId = table.Column<short>(type: "smallint", nullable: false),
                    CreateDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProjectERPDocuments", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProjectERPDocuments_ProjectERPDocumentTypes_ProjectERPDocumentTypeId",
                        column: x => x.ProjectERPDocumentTypeId,
                        principalTable: "ProjectERPDocumentTypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProjectERPDocuments_ProjectERPs_ProjectERPId",
                        column: x => x.ProjectERPId,
                        principalTable: "ProjectERPs",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProjectERPDocuments_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProjectERPEvents",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProjectERPId = table.Column<int>(type: "int", nullable: false),
                    ProjectERPEventCategoryId = table.Column<short>(type: "smallint", nullable: false),
                    RegisterUserId = table.Column<int>(type: "int", nullable: false),
                    RegisterDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    AudienceEmployeeId = table.Column<int>(type: "int", nullable: true),
                    Audience = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Confidential = table.Column<bool>(type: "bit", nullable: false),
                    NextAction = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    NextActionDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CRMDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    Type = table.Column<byte>(type: "tinyint", nullable: false),
                    AnnouncementType = table.Column<short>(type: "smallint", nullable: true),
                    AnnouncementDescription = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    ProjectERPEventActionTypeId = table.Column<short>(type: "smallint", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProjectERPEvents", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProjectERPEvents_Employees_AudienceEmployeeId",
                        column: x => x.AudienceEmployeeId,
                        principalTable: "Employees",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProjectERPEvents_ProjectERPEventActionTypes_ProjectERPEventActionTypeId",
                        column: x => x.ProjectERPEventActionTypeId,
                        principalTable: "ProjectERPEventActionTypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProjectERPEvents_ProjectERPEventCategories_ProjectERPEventCategoryId",
                        column: x => x.ProjectERPEventCategoryId,
                        principalTable: "ProjectERPEventCategories",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProjectERPEvents_ProjectERPs_ProjectERPId",
                        column: x => x.ProjectERPId,
                        principalTable: "ProjectERPs",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProjectERPEvents_Users_RegisterUserId",
                        column: x => x.RegisterUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProjectERPLabelLogs",
                columns: table => new
                {
                    ProjectERPId = table.Column<int>(type: "int", nullable: false),
                    ProjectERPLabelId = table.Column<short>(type: "smallint", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProjectERPLabelLogs", x => new { x.ProjectERPId, x.ProjectERPLabelId });
                    table.ForeignKey(
                        name: "FK_ProjectERPLabelLogs_ProjectERPLabeles_ProjectERPLabelId",
                        column: x => x.ProjectERPLabelId,
                        principalTable: "ProjectERPLabeles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProjectERPLabelLogs_ProjectERPs_ProjectERPId",
                        column: x => x.ProjectERPId,
                        principalTable: "ProjectERPs",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProjectERPResponsibleEmployees",
                columns: table => new
                {
                    ProjectERPId = table.Column<int>(type: "int", nullable: false),
                    ResponsibleEmployeeId = table.Column<int>(type: "int", nullable: false),
                    CreatorDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProjectERPResponsibleEmployees", x => new { x.ProjectERPId, x.ResponsibleEmployeeId });
                    table.ForeignKey(
                        name: "FK_ProjectERPResponsibleEmployees_Employees_ResponsibleEmployeeId",
                        column: x => x.ResponsibleEmployeeId,
                        principalTable: "Employees",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProjectERPResponsibleEmployees_ProjectERPs_ProjectERPId",
                        column: x => x.ProjectERPId,
                        principalTable: "ProjectERPs",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProjectERPTaskes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Title = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Output = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Status = table.Column<byte>(type: "tinyint", nullable: false),
                    StartDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    DueDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    EstimateTime = table.Column<int>(type: "int", nullable: false),
                    DurationMinute = table.Column<int>(type: "int", nullable: true),
                    ProgressPercentage = table.Column<int>(type: "int", nullable: true),
                    Priority = table.Column<int>(type: "int", nullable: false),
                    ProjectERPId = table.Column<int>(type: "int", nullable: false),
                    AssigneeEmployeeId = table.Column<int>(type: "int", nullable: true),
                    ProjectERPTaskCategoryId = table.Column<short>(type: "smallint", nullable: false),
                    ParentTaskId = table.Column<int>(type: "int", nullable: true),
                    CreateDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    CreatorUserId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProjectERPTaskes", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProjectERPTaskes_Employees_AssigneeEmployeeId",
                        column: x => x.AssigneeEmployeeId,
                        principalTable: "Employees",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProjectERPTaskes_ProjectERPs_ProjectERPId",
                        column: x => x.ProjectERPId,
                        principalTable: "ProjectERPs",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProjectERPTaskes_ProjectERPTaskCategories_ProjectERPTaskCategoryId",
                        column: x => x.ProjectERPTaskCategoryId,
                        principalTable: "ProjectERPTaskCategories",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProjectERPTaskes_Users_CreatorUserId",
                        column: x => x.CreatorUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProjectERPEventDocumentes",
                columns: table => new
                {
                    Id = table.Column<short>(type: "smallint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ProjectERPEventId = table.Column<int>(type: "int", nullable: false),
                    DocumentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    CreatorUserId = table.Column<int>(type: "int", nullable: false),
                    CreationDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProjectERPEventDocumentes", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProjectERPEventDocumentes_ProjectERPEvents_ProjectERPEventId",
                        column: x => x.ProjectERPEventId,
                        principalTable: "ProjectERPEvents",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProjectERPEventDocumentes_Users_CreatorUserId",
                        column: x => x.CreatorUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "EmployeeWorkReports",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    EmployeeId = table.Column<int>(type: "int", nullable: false),
                    ProjectERPTaskId = table.Column<int>(type: "int", nullable: true),
                    ReportDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeeWorkReports", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EmployeeWorkReports_Employees_EmployeeId",
                        column: x => x.EmployeeId,
                        principalTable: "Employees",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeeWorkReports_ProjectERPTaskes_ProjectERPTaskId",
                        column: x => x.ProjectERPTaskId,
                        principalTable: "ProjectERPTaskes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_EmployeeWorkReports_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProjectERPTaskDependencies",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProjectERPTaskId = table.Column<int>(type: "int", nullable: false),
                    PredecessorProjectERPTaskId = table.Column<int>(type: "int", nullable: false),
                    DependencyType = table.Column<byte>(type: "tinyint", nullable: false),
                    LagMinutues = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProjectERPTaskDependencies", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProjectERPTaskDependencies_ProjectERPTaskes_PredecessorProjectERPTaskId",
                        column: x => x.PredecessorProjectERPTaskId,
                        principalTable: "ProjectERPTaskes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProjectERPTaskDependencies_ProjectERPTaskes_ProjectERPTaskId",
                        column: x => x.ProjectERPTaskId,
                        principalTable: "ProjectERPTaskes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProjectERPTaskDocumentes",
                columns: table => new
                {
                    Id = table.Column<short>(type: "smallint", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DocumentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    ProjectERPTaskId = table.Column<int>(type: "int", nullable: false),
                    CreatorUserId = table.Column<int>(type: "int", nullable: false),
                    CreateDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProjectERPTaskDocumentes", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProjectERPTaskDocumentes_ProjectERPTaskes_ProjectERPTaskId",
                        column: x => x.ProjectERPTaskId,
                        principalTable: "ProjectERPTaskes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProjectERPTaskDocumentes_Users_CreatorUserId",
                        column: x => x.CreatorUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProjectERPTaskLabelLogs",
                columns: table => new
                {
                    ProjectERPTaskId = table.Column<int>(type: "int", nullable: false),
                    ProjectERPLabelId = table.Column<short>(type: "smallint", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProjectERPTaskLabelLogs", x => new { x.ProjectERPTaskId, x.ProjectERPLabelId });
                    table.ForeignKey(
                        name: "FK_ProjectERPTaskLabelLogs_ProjectERPLabeles_ProjectERPLabelId",
                        column: x => x.ProjectERPLabelId,
                        principalTable: "ProjectERPLabeles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProjectERPTaskLabelLogs_ProjectERPTaskes_ProjectERPTaskId",
                        column: x => x.ProjectERPTaskId,
                        principalTable: "ProjectERPTaskes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "EmployeeWorkReportItems",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    EmployeeWorkReportId = table.Column<int>(type: "int", nullable: false),
                    FromTime = table.Column<TimeSpan>(type: "time", nullable: false),
                    ToTime = table.Column<TimeSpan>(type: "time", nullable: false),
                    Operation = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EmployeeWorkReportItems", x => x.Id);
                    table.ForeignKey(
                        name: "FK_EmployeeWorkReportItems_EmployeeWorkReports_EmployeeWorkReportId",
                        column: x => x.EmployeeWorkReportId,
                        principalTable: "EmployeeWorkReports",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SerialProfiles",
                columns: table => new
                {
                    Code = table.Column<int>(type: "int", nullable: false),
                    StuffId = table.Column<int>(type: "int", nullable: false),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    CooperatorId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SerialProfiles", x => new { x.Code, x.StuffId });
                    table.ForeignKey(
                        name: "FK_SerialProfiles_Cooperators_CooperatorId",
                        column: x => x.CooperatorId,
                        principalTable: "Cooperators",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SerialProfiles_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StuffProviders",
                columns: table => new
                {
                    StuffId = table.Column<int>(type: "int", nullable: false),
                    ProviderId = table.Column<int>(type: "int", nullable: false),
                    LeadTime = table.Column<short>(type: "smallint", nullable: false),
                    InstantLeadTime = table.Column<short>(type: "smallint", nullable: true),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    IsDefault = table.Column<bool>(type: "bit", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StuffProviders", x => new { x.StuffId, x.ProviderId });
                    table.ForeignKey(
                        name: "FK_StuffProviders_Cooperators_ProviderId",
                        column: x => x.ProviderId,
                        principalTable: "Cooperators",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BillOfMaterialPriceHistories",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StuffId = table.Column<int>(type: "int", nullable: false),
                    Version = table.Column<int>(type: "int", nullable: false),
                    CurrencyId = table.Column<byte>(type: "tinyint", nullable: false),
                    TotalPrice = table.Column<double>(type: "float", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BillOfMaterialPriceHistories", x => x.Id);
                    table.ForeignKey(
                        name: "FK_BillOfMaterialPriceHistories_Currencies_CurrencyId",
                        column: x => x.CurrencyId,
                        principalTable: "Currencies",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BillOfMaterialPriceHistories_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "PriceAnnunciationItems",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    Price = table.Column<double>(type: "float", nullable: false),
                    CurrencyId = table.Column<byte>(type: "tinyint", nullable: false),
                    StuffId = table.Column<int>(type: "int", nullable: false),
                    Count = table.Column<double>(type: "float", nullable: true),
                    PriceAnnunciationId = table.Column<int>(type: "int", nullable: false),
                    Status = table.Column<byte>(type: "tinyint", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ConfirmerUserId = table.Column<int>(type: "int", nullable: true),
                    ConfirmationDateTime = table.Column<DateTime>(type: "datetime2", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PriceAnnunciationItems", x => x.Id);
                    table.ForeignKey(
                        name: "FK_PriceAnnunciationItems_Currencies_CurrencyId",
                        column: x => x.CurrencyId,
                        principalTable: "Currencies",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PriceAnnunciationItems_PriceAnnunciations_PriceAnnunciationId",
                        column: x => x.PriceAnnunciationId,
                        principalTable: "PriceAnnunciations",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_PriceAnnunciationItems_Users_ConfirmerUserId",
                        column: x => x.ConfirmerUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Assets",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Code = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    StuffId = table.Column<int>(type: "int", nullable: false),
                    StuffSerialCode = table.Column<long>(type: "bigint", nullable: false),
                    EmployeeId = table.Column<int>(type: "int", nullable: true),
                    DepartmentId = table.Column<short>(type: "smallint", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    WarehouseId = table.Column<short>(type: "smallint", nullable: false),
                    CreateDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Status = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Assets", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Assets_Departments_DepartmentId",
                        column: x => x.DepartmentId,
                        principalTable: "Departments",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Assets_Employees_EmployeeId",
                        column: x => x.EmployeeId,
                        principalTable: "Employees",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Assets_StuffSerials_StuffSerialCode_StuffId",
                        columns: x => new { x.StuffSerialCode, x.StuffId },
                        principalTable: "StuffSerials",
                        principalColumns: new[] { "Code", "StuffId" },
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Assets_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Assets_Warehouses_WarehouseId",
                        column: x => x.WarehouseId,
                        principalTable: "Warehouses",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Stuffs",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Noun = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Title = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Code = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    StuffCategoryId = table.Column<short>(type: "smallint", nullable: false),
                    UnitTypeId = table.Column<byte>(type: "tinyint", nullable: false),
                    StuffType = table.Column<byte>(type: "tinyint", nullable: false),
                    StockSafety = table.Column<int>(type: "int", nullable: false),
                    FaultyPercentage = table.Column<double>(type: "float", nullable: false),
                    NeedToQualityControl = table.Column<bool>(type: "bit", nullable: false),
                    NeedToQualityControlDocumentUpload = table.Column<bool>(type: "bit", nullable: false),
                    IsTraceable = table.Column<bool>(type: "bit", nullable: false),
                    GrossWeight = table.Column<double>(type: "float", nullable: true),
                    Volume = table.Column<double>(type: "float", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    QualityControlDepartmentId = table.Column<short>(type: "smallint", nullable: true),
                    QualityControlEmployeeId = table.Column<int>(type: "int", nullable: true),
                    StuffHSGroupId = table.Column<int>(type: "int", nullable: true),
                    Tolerance = table.Column<double>(type: "float", nullable: false),
                    NetWeight = table.Column<double>(type: "float", nullable: true),
                    QualityControlCheckDuration = table.Column<int>(type: "int", nullable: true),
                    StuffPurchaseCategoryId = table.Column<int>(type: "int", nullable: true),
                    CeofficientSet = table.Column<short>(type: "smallint", nullable: false),
                    StuffDefinitionRequestId = table.Column<int>(type: "int", nullable: true),
                    ProjectHeaderId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Stuffs", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Stuffs_Departments_QualityControlDepartmentId",
                        column: x => x.QualityControlDepartmentId,
                        principalTable: "Departments",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Stuffs_Employees_QualityControlEmployeeId",
                        column: x => x.QualityControlEmployeeId,
                        principalTable: "Employees",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Stuffs_ScrumEntities_ProjectHeader_ProjectHeaderId",
                        column: x => x.ProjectHeaderId,
                        principalTable: "ScrumEntities_ProjectHeader",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Stuffs_StuffCategories_StuffCategoryId",
                        column: x => x.StuffCategoryId,
                        principalTable: "StuffCategories",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Stuffs_StuffHSGroups_StuffHSGroupId",
                        column: x => x.StuffHSGroupId,
                        principalTable: "StuffHSGroups",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Stuffs_StuffPurchaseCategories_StuffPurchaseCategoryId",
                        column: x => x.StuffPurchaseCategoryId,
                        principalTable: "StuffPurchaseCategories",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Stuffs_UnitTypes_UnitTypeId",
                        column: x => x.UnitTypeId,
                        principalTable: "UnitTypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "BillOfMaterials",
                columns: table => new
                {
                    StuffId = table.Column<int>(type: "int", nullable: false),
                    Version = table.Column<short>(type: "smallint", nullable: false),
                    ProductionStepId = table.Column<int>(type: "int", nullable: false),
                    QtyPerBox = table.Column<int>(type: "int", nullable: false),
                    Title = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    BillOfMaterialVersionType = table.Column<byte>(type: "tinyint", nullable: false),
                    IsActive = table.Column<bool>(type: "bit", nullable: false),
                    IsPublished = table.Column<bool>(type: "bit", nullable: false),
                    CreateDate = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    Value = table.Column<double>(type: "float", nullable: false),
                    UnitId = table.Column<byte>(type: "tinyint", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BillOfMaterials", x => new { x.Version, x.StuffId });
                    table.ForeignKey(
                        name: "FK_BillOfMaterials_ProductionSteps_ProductionStepId",
                        column: x => x.ProductionStepId,
                        principalTable: "ProductionSteps",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BillOfMaterials_Stuffs_StuffId",
                        column: x => x.StuffId,
                        principalTable: "Stuffs",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BillOfMaterials_Units_UnitId",
                        column: x => x.UnitId,
                        principalTable: "Units",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_BillOfMaterials_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProductionLineEmployeeIntervals",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RFId = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ProductionLineId = table.Column<int>(type: "int", nullable: false),
                    EmployeeId = table.Column<int>(type: "int", nullable: false),
                    StuffId = table.Column<int>(type: "int", nullable: false),
                    HashedOperation = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    EntranceDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    ExitDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: true),
                    LastMoidfied = table.Column<DateTime>(type: "datetime2", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductionLineEmployeeIntervals", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProductionLineEmployeeIntervals_Employees_EmployeeId",
                        column: x => x.EmployeeId,
                        principalTable: "Employees",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProductionLineEmployeeIntervals_ProductionLines_ProductionLineId",
                        column: x => x.ProductionLineId,
                        principalTable: "ProductionLines",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProductionLineEmployeeIntervals_Stuffs_StuffId",
                        column: x => x.StuffId,
                        principalTable: "Stuffs",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SerialProfiles_ProductionSerialProfile",
                columns: table => new
                {
                    Code = table.Column<int>(type: "int", nullable: false),
                    StuffId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SerialProfiles_ProductionSerialProfile", x => new { x.Code, x.StuffId });
                    table.ForeignKey(
                        name: "FK_SerialProfiles_ProductionSerialProfile_SerialProfiles_Code_StuffId",
                        columns: x => new { x.Code, x.StuffId },
                        principalTable: "SerialProfiles",
                        principalColumns: new[] { "Code", "StuffId" },
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SerialProfiles_ProductionSerialProfile_Stuffs_StuffId",
                        column: x => x.StuffId,
                        principalTable: "Stuffs",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StockCheckingStuffs",
                columns: table => new
                {
                    StockCheckingId = table.Column<int>(type: "int", nullable: false),
                    StuffId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StockCheckingStuffs", x => new { x.StockCheckingId, x.StuffId });
                    table.ForeignKey(
                        name: "FK_StockCheckingStuffs_StockCheckings_StockCheckingId",
                        column: x => x.StockCheckingId,
                        principalTable: "StockCheckings",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StockCheckingStuffs_Stuffs_StuffId",
                        column: x => x.StuffId,
                        principalTable: "Stuffs",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StockCheckingTags",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Number = table.Column<int>(type: "int", nullable: false),
                    StockCheckingId = table.Column<int>(type: "int", nullable: false),
                    WarehouseId = table.Column<short>(type: "smallint", nullable: false),
                    StuffId = table.Column<int>(type: "int", nullable: false),
                    StuffSerialCode = table.Column<long>(type: "bigint", nullable: true),
                    TagTypeId = table.Column<int>(type: "int", nullable: false),
                    Amount = table.Column<double>(type: "float", nullable: true),
                    UnitId = table.Column<byte>(type: "tinyint", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StockCheckingTags", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StockCheckingTags_StockCheckingWarehouses_StockCheckingId_WarehouseId",
                        columns: x => new { x.StockCheckingId, x.WarehouseId },
                        principalTable: "StockCheckingWarehouses",
                        principalColumns: new[] { "StockCheckingId", "WarehouseId" },
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StockCheckingTags_Stuffs_StuffId",
                        column: x => x.StuffId,
                        principalTable: "Stuffs",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StockCheckingTags_StuffSerials_StuffSerialCode_StuffId",
                        columns: x => new { x.StuffSerialCode, x.StuffId },
                        principalTable: "StuffSerials",
                        principalColumns: new[] { "Code", "StuffId" },
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StockCheckingTags_TagTypes_TagTypeId",
                        column: x => x.TagTypeId,
                        principalTable: "TagTypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StockCheckingTags_Units_UnitId",
                        column: x => x.UnitId,
                        principalTable: "Units",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StuffDefinitionRequests",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Noun = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Title = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    StuffPurchaseCategoryId = table.Column<int>(type: "int", nullable: false),
                    UnitTypeId = table.Column<byte>(type: "tinyint", nullable: false),
                    StuffType = table.Column<byte>(type: "tinyint", nullable: false),
                    DefinitionStatus = table.Column<byte>(type: "tinyint", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    DateTime = table.Column<DateTime>(type: "datetime2", nullable: false),
                    ConfirmerUserId = table.Column<int>(type: "int", nullable: true),
                    ConfirmDateTime = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ConfirmDescription = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    StuffId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StuffDefinitionRequests", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StuffDefinitionRequests_StuffPurchaseCategories_StuffPurchaseCategoryId",
                        column: x => x.StuffPurchaseCategoryId,
                        principalTable: "StuffPurchaseCategories",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StuffDefinitionRequests_Stuffs_StuffId",
                        column: x => x.StuffId,
                        principalTable: "Stuffs",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StuffDefinitionRequests_UnitTypes_UnitTypeId",
                        column: x => x.UnitTypeId,
                        principalTable: "UnitTypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StuffDefinitionRequests_Users_ConfirmerUserId",
                        column: x => x.ConfirmerUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StuffDefinitionRequests_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StuffDocuments",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Title = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DocumentId = table.Column<Guid>(type: "uniqueidentifier", nullable: false),
                    StuffId = table.Column<int>(type: "int", nullable: false),
                    StuffDocumentType = table.Column<byte>(type: "tinyint", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    FileName = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StuffDocuments", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StuffDocuments_Stuffs_StuffId",
                        column: x => x.StuffId,
                        principalTable: "Stuffs",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StuffDocuments_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StuffFractionTemporaryStuffs",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StuffId = table.Column<int>(type: "int", nullable: false),
                    ProjectCode = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Qty = table.Column<double>(type: "float", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StuffFractionTemporaryStuffs", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StuffFractionTemporaryStuffs_Stuffs_StuffId",
                        column: x => x.StuffId,
                        principalTable: "Stuffs",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StuffFractionTemporaryStuffs_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StuffProductionFaultTypes",
                columns: table => new
                {
                    ProductionFaultTypeId = table.Column<int>(type: "int", nullable: false),
                    StuffId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StuffProductionFaultTypes", x => new { x.ProductionFaultTypeId, x.StuffId });
                    table.ForeignKey(
                        name: "FK_StuffProductionFaultTypes_ProductionFaultTypes_ProductionFaultTypeId",
                        column: x => x.ProductionFaultTypeId,
                        principalTable: "ProductionFaultTypes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StuffProductionFaultTypes_Stuffs_StuffId",
                        column: x => x.StuffId,
                        principalTable: "Stuffs",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StuffQualityControlObservations",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RegisterDateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    RegisterarUserId = table.Column<int>(type: "int", nullable: false),
                    StuffId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StuffQualityControlObservations", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StuffQualityControlObservations_Stuffs_StuffId",
                        column: x => x.StuffId,
                        principalTable: "Stuffs",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StuffQualityControlObservations_Users_RegisterarUserId",
                        column: x => x.RegisterarUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StuffQualityControlTests",
                columns: table => new
                {
                    StuffId = table.Column<int>(type: "int", nullable: false),
                    QualityControlTestId = table.Column<long>(type: "bigint", nullable: false),
                    MeasurementMethod = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Frequency = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CorrectiveReaction = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DocumentId = table.Column<Guid>(type: "uniqueidentifier", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    QualityControlTestConditionQualityControlTestId = table.Column<long>(type: "bigint", nullable: true),
                    QualityControlTestConditionTestConditionId = table.Column<int>(type: "int", nullable: true),
                    QualityControlTestEquipmentQualityControlTestId = table.Column<long>(type: "bigint", nullable: true),
                    QualityControlTestEquipmentTestEquipmentId = table.Column<int>(type: "int", nullable: true),
                    QualityControlTestOperationQualityControlTestId = table.Column<long>(type: "bigint", nullable: true),
                    QualityControlTestOperationTestOperationId = table.Column<int>(type: "int", nullable: true),
                    QualityControlTestImportanceDegreeQualityControlTestId = table.Column<long>(type: "bigint", nullable: true),
                    QualityControlTestImportanceDegreeTestImportanceDegreeId = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StuffQualityControlTests", x => new { x.StuffId, x.QualityControlTestId });
                    table.ForeignKey(
                        name: "FK_StuffQualityControlTests_QualityControlTestConditions_QualityControlTestConditionTestConditionId_QualityControlTestCondition~",
                        columns: x => new { x.QualityControlTestConditionTestConditionId, x.QualityControlTestConditionQualityControlTestId },
                        principalTable: "QualityControlTestConditions",
                        principalColumns: new[] { "TestConditionId", "QualityControlTestId" },
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StuffQualityControlTests_QualityControlTestEquipments_QualityControlTestEquipmentTestEquipmentId_QualityControlTestEquipment~",
                        columns: x => new { x.QualityControlTestEquipmentTestEquipmentId, x.QualityControlTestEquipmentQualityControlTestId },
                        principalTable: "QualityControlTestEquipments",
                        principalColumns: new[] { "TestEquipmentId", "QualityControlTestId" },
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StuffQualityControlTests_QualityControlTestImportanceDegrees_QualityControlTestImportanceDegreeTestImportanceDegreeId_Qualit~",
                        columns: x => new { x.QualityControlTestImportanceDegreeTestImportanceDegreeId, x.QualityControlTestImportanceDegreeQualityControlTestId },
                        principalTable: "QualityControlTestImportanceDegrees",
                        principalColumns: new[] { "TestImportanceDegreeId", "QualityControlTestId" },
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StuffQualityControlTests_QualityControlTestOperations_QualityControlTestOperationTestOperationId_QualityControlTestOperation~",
                        columns: x => new { x.QualityControlTestOperationTestOperationId, x.QualityControlTestOperationQualityControlTestId },
                        principalTable: "QualityControlTestOperations",
                        principalColumns: new[] { "TestOperationId", "QualityControlTestId" },
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StuffQualityControlTests_QualityControlTests_QualityControlTestId",
                        column: x => x.QualityControlTestId,
                        principalTable: "QualityControlTests",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StuffQualityControlTests_Stuffs_StuffId",
                        column: x => x.StuffId,
                        principalTable: "Stuffs",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StuffStockPlaces",
                columns: table => new
                {
                    StuffId = table.Column<int>(type: "int", nullable: false),
                    StockPlaceId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StuffStockPlaces", x => new { x.StuffId, x.StockPlaceId });
                    table.ForeignKey(
                        name: "FK_StuffStockPlaces_StockPlaces_StockPlaceId",
                        column: x => x.StockPlaceId,
                        principalTable: "StockPlaces",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StuffStockPlaces_Stuffs_StuffId",
                        column: x => x.StuffId,
                        principalTable: "Stuffs",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "SuppliesPurchaserUsers",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    IsDefault = table.Column<bool>(type: "bit", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PurchaserUserId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    StuffId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_SuppliesPurchaserUsers", x => x.Id);
                    table.ForeignKey(
                        name: "FK_SuppliesPurchaserUsers_Stuffs_StuffId",
                        column: x => x.StuffId,
                        principalTable: "Stuffs",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_SuppliesPurchaserUsers_Users_PurchaserUserId",
                        column: x => x.PurchaserUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProductionLineEmployeeIntervalDetails",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    OperationId = table.Column<short>(type: "smallint", nullable: false),
                    ProductionLineEmployeeIntervalId = table.Column<int>(type: "int", nullable: false),
                    Time = table.Column<long>(type: "bigint", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductionLineEmployeeIntervalDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProductionLineEmployeeIntervalDetails_Operations_OperationId",
                        column: x => x.OperationId,
                        principalTable: "Operations",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProductionLineEmployeeIntervalDetails_ProductionLineEmployeeIntervals_ProductionLineEmployeeIntervalId",
                        column: x => x.ProductionLineEmployeeIntervalId,
                        principalTable: "ProductionLineEmployeeIntervals",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "TagCountings",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    StockCheckingTagId = table.Column<int>(type: "int", nullable: false),
                    Amount = table.Column<double>(type: "float", nullable: false),
                    UnitId = table.Column<byte>(type: "tinyint", nullable: false),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    IsDelete = table.Column<bool>(type: "bit", nullable: false),
                    DeletedAt = table.Column<DateTime>(type: "datetime2", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TagCountings", x => x.Id);
                    table.ForeignKey(
                        name: "FK_TagCountings_StockCheckingTags_StockCheckingTagId",
                        column: x => x.StockCheckingTagId,
                        principalTable: "StockCheckingTags",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TagCountings_Units_UnitId",
                        column: x => x.UnitId,
                        principalTable: "Units",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_TagCountings_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StuffQualityControlTestConditions",
                columns: table => new
                {
                    StuffId = table.Column<int>(type: "int", nullable: false),
                    QualityControlTestId = table.Column<long>(type: "bigint", nullable: false),
                    QualityControlTestConditionQualityControlTestId = table.Column<long>(type: "bigint", nullable: false),
                    QualityControlConditionTestConditionId = table.Column<int>(type: "int", nullable: false),
                    QualityControlTestUnitId = table.Column<int>(type: "int", nullable: false),
                    Min = table.Column<double>(type: "float", nullable: false),
                    Max = table.Column<double>(type: "float", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ToleranceType = table.Column<byte>(type: "tinyint", nullable: false),
                    AcceptanceLimit = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StuffQualityControlTestConditions", x => new { x.StuffId, x.QualityControlTestId, x.QualityControlConditionTestConditionId, x.QualityControlTestConditionQualityControlTestId });
                    table.ForeignKey(
                        name: "FK_StuffQualityControlTestConditions_QualityControlTestConditions_QualityControlConditionTestConditionId_QualityControlTestCond~",
                        columns: x => new { x.QualityControlConditionTestConditionId, x.QualityControlTestConditionQualityControlTestId },
                        principalTable: "QualityControlTestConditions",
                        principalColumns: new[] { "TestConditionId", "QualityControlTestId" },
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StuffQualityControlTestConditions_QualityControlTestUnits_QualityControlTestUnitId",
                        column: x => x.QualityControlTestUnitId,
                        principalTable: "QualityControlTestUnits",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StuffQualityControlTestConditions_StuffQualityControlTests_StuffId_QualityControlTestId",
                        columns: x => new { x.StuffId, x.QualityControlTestId },
                        principalTable: "StuffQualityControlTests",
                        principalColumns: new[] { "StuffId", "QualityControlTestId" },
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StuffQualityControlTestEquipments",
                columns: table => new
                {
                    StuffId = table.Column<int>(type: "int", nullable: false),
                    QualityControlTestId = table.Column<long>(type: "bigint", nullable: false),
                    QualityControlTestEquipmentQualityControlTestId = table.Column<long>(type: "bigint", nullable: false),
                    QualityControlEquipmentTestEquipmentId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StuffQualityControlTestEquipments", x => new { x.StuffId, x.QualityControlTestId, x.QualityControlEquipmentTestEquipmentId, x.QualityControlTestEquipmentQualityControlTestId });
                    table.ForeignKey(
                        name: "FK_StuffQualityControlTestEquipments_QualityControlTestEquipments_QualityControlEquipmentTestEquipmentId_QualityControlTestEqui~",
                        columns: x => new { x.QualityControlEquipmentTestEquipmentId, x.QualityControlTestEquipmentQualityControlTestId },
                        principalTable: "QualityControlTestEquipments",
                        principalColumns: new[] { "TestEquipmentId", "QualityControlTestId" },
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StuffQualityControlTestEquipments_StuffQualityControlTests_StuffId_QualityControlTestId",
                        columns: x => new { x.StuffId, x.QualityControlTestId },
                        principalTable: "StuffQualityControlTests",
                        principalColumns: new[] { "StuffId", "QualityControlTestId" },
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StuffQualityControlTestImportanceDegrees",
                columns: table => new
                {
                    StuffId = table.Column<int>(type: "int", nullable: false),
                    QualityControlTestId = table.Column<long>(type: "bigint", nullable: false),
                    QualityControlTestImportanceDegreeQualityControlTestId = table.Column<long>(type: "bigint", nullable: false),
                    QualityControlImportanceDegreeTestImportanceDegreeId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StuffQualityControlTestImportanceDegrees", x => new { x.StuffId, x.QualityControlTestId, x.QualityControlImportanceDegreeTestImportanceDegreeId, x.QualityControlTestImportanceDegreeQualityControlTestId });
                    table.ForeignKey(
                        name: "FK_StuffQualityControlTestImportanceDegrees_QualityControlTestImportanceDegrees_QualityControlImportanceDegreeTestImportanceDeg~",
                        columns: x => new { x.QualityControlImportanceDegreeTestImportanceDegreeId, x.QualityControlTestImportanceDegreeQualityControlTestId },
                        principalTable: "QualityControlTestImportanceDegrees",
                        principalColumns: new[] { "TestImportanceDegreeId", "QualityControlTestId" },
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StuffQualityControlTestImportanceDegrees_StuffQualityControlTests_StuffId_QualityControlTestId",
                        columns: x => new { x.StuffId, x.QualityControlTestId },
                        principalTable: "StuffQualityControlTests",
                        principalColumns: new[] { "StuffId", "QualityControlTestId" },
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "StuffQualityControlTestOperations",
                columns: table => new
                {
                    StuffId = table.Column<int>(type: "int", nullable: false),
                    QualityControlTestId = table.Column<long>(type: "bigint", nullable: false),
                    QualityControlTestOperationQualityControlTestId = table.Column<long>(type: "bigint", nullable: false),
                    QualityControlOperationTestOperationId = table.Column<int>(type: "int", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StuffQualityControlTestOperations", x => new { x.StuffId, x.QualityControlTestId, x.QualityControlOperationTestOperationId, x.QualityControlTestOperationQualityControlTestId });
                    table.ForeignKey(
                        name: "FK_StuffQualityControlTestOperations_QualityControlTestOperations_QualityControlOperationTestOperationId_QualityControlTestOper~",
                        columns: x => new { x.QualityControlOperationTestOperationId, x.QualityControlTestOperationQualityControlTestId },
                        principalTable: "QualityControlTestOperations",
                        principalColumns: new[] { "TestOperationId", "QualityControlTestId" },
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_StuffQualityControlTestOperations_StuffQualityControlTests_StuffId_QualityControlTestId",
                        columns: x => new { x.StuffId, x.QualityControlTestId },
                        principalTable: "StuffQualityControlTests",
                        principalColumns: new[] { "StuffId", "QualityControlTestId" },
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProductionOperations",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Time = table.Column<int>(type: "int", nullable: false),
                    ProductionId = table.Column<int>(type: "int", nullable: false),
                    ProductionOperatorId = table.Column<int>(type: "int", nullable: true),
                    OperationId = table.Column<short>(type: "smallint", nullable: false),
                    ProductionTerminalId = table.Column<int>(type: "int", nullable: true),
                    Status = table.Column<byte>(type: "tinyint", nullable: false),
                    IsFaultCause = table.Column<bool>(type: "bit", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    DateTime = table.Column<DateTime>(type: "smalldatetime", nullable: false),
                    UserId = table.Column<int>(type: "int", nullable: false),
                    Qty = table.Column<double>(type: "float", nullable: true),
                    TransactionBatchId = table.Column<int>(type: "int", nullable: true),
                    ProductionOperationEmployeeGroupId = table.Column<int>(type: "int", nullable: false),
                    FaildProductionOperationId = table.Column<int>(type: "int", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductionOperations", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProductionOperations_Operations_OperationId",
                        column: x => x.OperationId,
                        principalTable: "Operations",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProductionOperations_ProductionOperationEmployeeGroups_ProductionOperationEmployeeGroupId",
                        column: x => x.ProductionOperationEmployeeGroupId,
                        principalTable: "ProductionOperationEmployeeGroups",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProductionOperations_ProductionOperators_ProductionOperatorId",
                        column: x => x.ProductionOperatorId,
                        principalTable: "ProductionOperators",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProductionOperations_Productions_ProductionId",
                        column: x => x.ProductionId,
                        principalTable: "Productions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProductionOperations_ProductionTerminals_ProductionTerminalId",
                        column: x => x.ProductionTerminalId,
                        principalTable: "ProductionTerminals",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProductionOperations_TransactionBatches_TransactionBatchId",
                        column: x => x.TransactionBatchId,
                        principalTable: "TransactionBatches",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProductionOperations_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "FaildProductionOperations",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RepairProductionId = table.Column<int>(type: "int", nullable: true),
                    ReworkProductionOperationId = table.Column<int>(type: "int", nullable: true),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_FaildProductionOperations", x => x.Id);
                    table.ForeignKey(
                        name: "FK_FaildProductionOperations_ProductionOperations_ReworkProductionOperationId",
                        column: x => x.ReworkProductionOperationId,
                        principalTable: "ProductionOperations",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_FaildProductionOperations_RepairProductions_RepairProductionId",
                        column: x => x.RepairProductionId,
                        principalTable: "RepairProductions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ProductionStuffDetails",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ProductionId = table.Column<int>(type: "int", nullable: false),
                    ProductionOperationId = table.Column<int>(type: "int", nullable: true),
                    BillOfMaterialDetailType = table.Column<byte>(type: "tinyint", nullable: false),
                    StuffId = table.Column<int>(type: "int", nullable: false),
                    StuffSerialCode = table.Column<long>(type: "bigint", nullable: true),
                    Qty = table.Column<double>(type: "float", nullable: false),
                    UnitId = table.Column<byte>(type: "tinyint", nullable: false),
                    RowVersion = table.Column<byte[]>(type: "rowversion", rowVersion: true, nullable: false),
                    WarehouseId = table.Column<short>(type: "smallint", nullable: false),
                    Type = table.Column<byte>(type: "tinyint", nullable: false),
                    DetachedQty = table.Column<double>(type: "float", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ProductionStuffDetails", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ProductionStuffDetails_ProductionOperations_ProductionOperationId",
                        column: x => x.ProductionOperationId,
                        principalTable: "ProductionOperations",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProductionStuffDetails_Productions_ProductionId",
                        column: x => x.ProductionId,
                        principalTable: "Productions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProductionStuffDetails_Stuffs_StuffId",
                        column: x => x.StuffId,
                        principalTable: "Stuffs",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProductionStuffDetails_StuffSerials_StuffSerialCode_StuffId",
                        columns: x => new { x.StuffSerialCode, x.StuffId },
                        principalTable: "StuffSerials",
                        principalColumns: new[] { "Code", "StuffId" },
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProductionStuffDetails_Units_UnitId",
                        column: x => x.UnitId,
                        principalTable: "Units",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ProductionStuffDetails_Warehouses_WarehouseId",
                        column: x => x.WarehouseId,
                        principalTable: "Warehouses",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateIndex(
                name: "IX_ActionParamater_SecurityActionId",
                table: "ActionParamater",
                column: "SecurityActionId");

            migrationBuilder.CreateIndex(
                name: "IX_AddLadingItemDetailInputs_LadingChangeRequestId",
                table: "AddLadingItemDetailInputs",
                column: "LadingChangeRequestId");

            migrationBuilder.CreateIndex(
                name: "IX_Allocations_BankOrderId",
                table: "Allocations",
                column: "BankOrderId");

            migrationBuilder.CreateIndex(
                name: "IX_Allocations_CurrencyId",
                table: "Allocations",
                column: "CurrencyId");

            migrationBuilder.CreateIndex(
                name: "IX_Allocations_DocumentId",
                table: "Allocations",
                column: "DocumentId");

            migrationBuilder.CreateIndex(
                name: "IX_Allocations_UserId",
                table: "Allocations",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_ApplicationLogs_UserId",
                table: "ApplicationLogs",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_AssetLogs_AssetId",
                table: "AssetLogs",
                column: "AssetId");

            migrationBuilder.CreateIndex(
                name: "IX_AssetLogs_DepartmentId",
                table: "AssetLogs",
                column: "DepartmentId");

            migrationBuilder.CreateIndex(
                name: "IX_AssetLogs_EmployeeId",
                table: "AssetLogs",
                column: "EmployeeId");

            migrationBuilder.CreateIndex(
                name: "IX_AssetLogs_UserId",
                table: "AssetLogs",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_Assets_DepartmentId",
                table: "Assets",
                column: "DepartmentId");

            migrationBuilder.CreateIndex(
                name: "IX_Assets_EmployeeId",
                table: "Assets",
                column: "EmployeeId");

            migrationBuilder.CreateIndex(
                name: "IX_Assets_StuffId",
                table: "Assets",
                column: "StuffId");

            migrationBuilder.CreateIndex(
                name: "IX_Assets_StuffSerialCode_StuffId",
                table: "Assets",
                columns: new[] { "StuffSerialCode", "StuffId" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Assets_UserId",
                table: "Assets",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_Assets_WarehouseId",
                table: "Assets",
                column: "WarehouseId");

            migrationBuilder.CreateIndex(
                name: "IX_AssetTransferRequests_AssetId",
                table: "AssetTransferRequests",
                column: "AssetId");

            migrationBuilder.CreateIndex(
                name: "IX_AssetTransferRequests_ConfirmerUserId",
                table: "AssetTransferRequests",
                column: "ConfirmerUserId");

            migrationBuilder.CreateIndex(
                name: "IX_AssetTransferRequests_NewDepartmentId",
                table: "AssetTransferRequests",
                column: "NewDepartmentId");

            migrationBuilder.CreateIndex(
                name: "IX_AssetTransferRequests_NewEmployeeId",
                table: "AssetTransferRequests",
                column: "NewEmployeeId");

            migrationBuilder.CreateIndex(
                name: "IX_AssetTransferRequests_RequestingUserId",
                table: "AssetTransferRequests",
                column: "RequestingUserId");

            migrationBuilder.CreateIndex(
                name: "IX_Attachments_MessageId",
                table: "Attachments",
                column: "MessageId");

            migrationBuilder.CreateIndex(
                name: "IX_BankOrderCosts_BankOrderId",
                table: "BankOrderCosts",
                column: "BankOrderId");

            migrationBuilder.CreateIndex(
                name: "IX_BankOrderCosts_FinancialDocumentCostId",
                table: "BankOrderCosts",
                column: "FinancialDocumentCostId");

            migrationBuilder.CreateIndex(
                name: "IX_BankOrderCurrencySources_BankOrderId",
                table: "BankOrderCurrencySources",
                column: "BankOrderId");

            migrationBuilder.CreateIndex(
                name: "IX_BankOrderCurrencySources_LadingId",
                table: "BankOrderCurrencySources",
                column: "LadingId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_BankOrderCurrencySources_UserId",
                table: "BankOrderCurrencySources",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_BankOrderDetails_BankOrderId",
                table: "BankOrderDetails",
                column: "BankOrderId");

            migrationBuilder.CreateIndex(
                name: "IX_BankOrderDetails_StuffHSGroupId",
                table: "BankOrderDetails",
                column: "StuffHSGroupId");

            migrationBuilder.CreateIndex(
                name: "IX_BankOrderDetails_UnitId",
                table: "BankOrderDetails",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_BankOrderIssues_AllocationId",
                table: "BankOrderIssues",
                column: "AllocationId");

            migrationBuilder.CreateIndex(
                name: "IX_BankOrderIssues_BankOrderIssueTypeId",
                table: "BankOrderIssues",
                column: "BankOrderIssueTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_BankOrderIssues_FinancialDocumentId",
                table: "BankOrderIssues",
                column: "FinancialDocumentId");

            migrationBuilder.CreateIndex(
                name: "IX_BankOrderLogs_BankOrderId",
                table: "BankOrderLogs",
                column: "BankOrderId");

            migrationBuilder.CreateIndex(
                name: "IX_BankOrderLogs_BankOrderId1",
                table: "BankOrderLogs",
                column: "BankOrderId1",
                unique: true,
                filter: "[BankOrderId1] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_BankOrderLogs_BankOrderStatusTypeId",
                table: "BankOrderLogs",
                column: "BankOrderStatusTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_BankOrderLogs_UserId",
                table: "BankOrderLogs",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_FinancialTransactionBatchId",
                table: "BaseEntities",
                column: "FinancialTransactionBatchId",
                unique: true,
                filter: "[FinancialTransactionBatchId] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_TransactionBatchId",
                table: "BaseEntities",
                column: "TransactionBatchId",
                unique: true,
                filter: "[TransactionBatchId] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_UserId",
                table: "BaseEntities",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_BankOrder_BankId",
                table: "BaseEntities_BankOrder",
                column: "BankId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_BankOrder_BankOrderContractTypeId",
                table: "BaseEntities_BankOrder",
                column: "BankOrderContractTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_BankOrder_CountryId",
                table: "BaseEntities_BankOrder",
                column: "CountryId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_BankOrder_CurrencyId",
                table: "BaseEntities_BankOrder",
                column: "CurrencyId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_BankOrder_CustomhouseId",
                table: "BaseEntities_BankOrder",
                column: "CustomhouseId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_BankOrder_ProviderId",
                table: "BaseEntities_BankOrder",
                column: "ProviderId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_BaseEntityConfirmation_BaseEntityConfirmTypeId",
                table: "BaseEntities_BaseEntityConfirmation",
                column: "BaseEntityConfirmTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_BaseEntityConfirmation_ConfirmerId",
                table: "BaseEntities_BaseEntityConfirmation",
                column: "ConfirmerId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_BaseEntityConfirmation_ConfirmingEntityId",
                table: "BaseEntities_BaseEntityConfirmation",
                column: "ConfirmingEntityId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_BillOfMaterialPublishRequest_BillOfMaterialVersion_BillOfMaterialStuffId",
                table: "BaseEntities_BillOfMaterialPublishRequest",
                columns: new[] { "BillOfMaterialVersion", "BillOfMaterialStuffId" });

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_BillOfMaterialPublishRequest_BillOfMaterialVersion1_BillOfMaterialStuffId1",
                table: "BaseEntities_BillOfMaterialPublishRequest",
                columns: new[] { "BillOfMaterialVersion1", "BillOfMaterialStuffId1" },
                unique: true,
                filter: "[BillOfMaterialVersion1] IS NOT NULL AND [BillOfMaterialStuffId1] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_CargoItem_CargoId",
                table: "BaseEntities_CargoItem",
                column: "CargoId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_CargoItem_ForwarderId",
                table: "BaseEntities_CargoItem",
                column: "ForwarderId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_CargoItem_HowToBuyId",
                table: "BaseEntities_CargoItem",
                column: "HowToBuyId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_CargoItem_LatestRiskId",
                table: "BaseEntities_CargoItem",
                column: "LatestRiskId",
                unique: true,
                filter: "[LatestRiskId] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_CargoItem_PurchaseOrderId",
                table: "BaseEntities_CargoItem",
                column: "PurchaseOrderId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_CargoItem_UnitId",
                table: "BaseEntities_CargoItem",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_CargoItemDetail_CargoItemId",
                table: "BaseEntities_CargoItemDetail",
                column: "CargoItemId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_CargoItemDetail_PurchaseOrderDetailId",
                table: "BaseEntities_CargoItemDetail",
                column: "PurchaseOrderDetailId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_CargoItemDetail_UnitId",
                table: "BaseEntities_CargoItemDetail",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_CheckOrderItem_OrderItemConfirmationId",
                table: "BaseEntities_CheckOrderItem",
                column: "OrderItemConfirmationId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_ConditionalQualityControl_QualityControlAccepterId",
                table: "BaseEntities_ConditionalQualityControl",
                column: "QualityControlAccepterId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_ConditionalQualityControl_QualityControlConfirmationId",
                table: "BaseEntities_ConditionalQualityControl",
                column: "QualityControlConfirmationId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_ConditionalQualityControl_ResponseConditionalConfirmationUserId",
                table: "BaseEntities_ConditionalQualityControl",
                column: "ResponseConditionalConfirmationUserId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_ConditionalQualityControl_WarrantyExpirationExceptionTypeId",
                table: "BaseEntities_ConditionalQualityControl",
                column: "WarrantyExpirationExceptionTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_ConditionalQualityControlItem_ConditionalQualityControlId",
                table: "BaseEntities_ConditionalQualityControlItem",
                column: "ConditionalQualityControlId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_ConditionalQualityControlItem_QualityControlConfirmationItemId",
                table: "BaseEntities_ConditionalQualityControlItem",
                column: "QualityControlConfirmationItemId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_ConditionalQualityControlItem_UnitId",
                table: "BaseEntities_ConditionalQualityControlItem",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_Decomposition_ProductionOperationId",
                table: "BaseEntities_Decomposition",
                column: "ProductionOperationId",
                unique: true,
                filter: "[ProductionOperationId] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_Decomposition_StuffId",
                table: "BaseEntities_Decomposition",
                column: "StuffId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_Decomposition_StuffSerialCode_StuffId",
                table: "BaseEntities_Decomposition",
                columns: new[] { "StuffSerialCode", "StuffId" });

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_EquivalentStuffUsage_EquivalentStuffId",
                table: "BaseEntities_EquivalentStuffUsage",
                column: "EquivalentStuffId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_EquivalentStuffUsage_ProductionOrderId",
                table: "BaseEntities_EquivalentStuffUsage",
                column: "ProductionOrderId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_EquivalentStuffUsage_ProductionPlanDetailId",
                table: "BaseEntities_EquivalentStuffUsage",
                column: "ProductionPlanDetailId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_EquivalentStuffUsageConfirmation_EquivalentStuffUsageId",
                table: "BaseEntities_EquivalentStuffUsageConfirmation",
                column: "EquivalentStuffUsageId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_EstimatedPurchasePrice_PurchaseOrderId",
                table: "BaseEntities_EstimatedPurchasePrice",
                column: "PurchaseOrderId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_ExitReceipt_CooperatorId",
                table: "BaseEntities_ExitReceipt",
                column: "CooperatorId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_ExitReceipt_OutboundCargoId",
                table: "BaseEntities_ExitReceipt",
                column: "OutboundCargoId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_ExitReceiptRequest_CooperatorId",
                table: "BaseEntities_ExitReceiptRequest",
                column: "CooperatorId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_ExitReceiptRequest_ExitReceiptRequestTypeId",
                table: "BaseEntities_ExitReceiptRequest",
                column: "ExitReceiptRequestTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_ExitReceiptRequest_PriceAnnunciationItemId",
                table: "BaseEntities_ExitReceiptRequest",
                column: "PriceAnnunciationItemId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_ExitReceiptRequest_StuffId",
                table: "BaseEntities_ExitReceiptRequest",
                column: "StuffId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_ExitReceiptRequest_UnitId",
                table: "BaseEntities_ExitReceiptRequest",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_ExitReceiptRequest_WarehouseId",
                table: "BaseEntities_ExitReceiptRequest",
                column: "WarehouseId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_FinancialDocument_FinanceId",
                table: "BaseEntities_FinancialDocument",
                column: "FinanceId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_FinancialDocument_FinancialAccountId",
                table: "BaseEntities_FinancialDocument",
                column: "FinancialAccountId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_GiveBackExitReceiptRequest_QualityControlId",
                table: "BaseEntities_GiveBackExitReceiptRequest",
                column: "QualityControlId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_Lading_BankOrderId",
                table: "BaseEntities_Lading",
                column: "BankOrderId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_Lading_CityId",
                table: "BaseEntities_Lading",
                column: "CityId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_Lading_CustomhouseId",
                table: "BaseEntities_Lading",
                column: "CustomhouseId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_Lading_LadingBlockerId",
                table: "BaseEntities_Lading",
                column: "LadingBlockerId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_LadingItem_CargoItemId",
                table: "BaseEntities_LadingItem",
                column: "CargoItemId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_LadingItem_LadingId",
                table: "BaseEntities_LadingItem",
                column: "LadingId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_LadingItemDetail_CargoItemDetailId",
                table: "BaseEntities_LadingItemDetail",
                column: "CargoItemDetailId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_LadingItemDetail_LadingItemId",
                table: "BaseEntities_LadingItemDetail",
                column: "LadingItemId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_ManualTransaction_ProviderId",
                table: "BaseEntities_ManualTransaction",
                column: "ProviderId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_ManualTransaction_StuffId",
                table: "BaseEntities_ManualTransaction",
                column: "StuffId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_ManualTransaction_UnitId",
                table: "BaseEntities_ManualTransaction",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_ManualTransaction_WarehouseId",
                table: "BaseEntities_ManualTransaction",
                column: "WarehouseId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_NewShopping_LadingItemId",
                table: "BaseEntities_NewShopping",
                column: "LadingItemId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_NewShoppingDetail_LadingItemDetailId",
                table: "BaseEntities_NewShoppingDetail",
                column: "LadingItemDetailId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_NewShoppingDetail_NewShoppingId",
                table: "BaseEntities_NewShoppingDetail",
                column: "NewShoppingId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_NewShoppingDetail_UnitId",
                table: "BaseEntities_NewShoppingDetail",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_OrderItem_BillOfMaterialVersion_StuffId",
                table: "BaseEntities_OrderItem",
                columns: new[] { "BillOfMaterialVersion", "StuffId" });

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_OrderItem_OrderId",
                table: "BaseEntities_OrderItem",
                column: "OrderId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_OrderItem_ProductPackBillOfMaterialVersion_ProductPackBillOfMaterialStuffId",
                table: "BaseEntities_OrderItem",
                columns: new[] { "ProductPackBillOfMaterialVersion", "ProductPackBillOfMaterialStuffId" });

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_OrderItem_StuffId",
                table: "BaseEntities_OrderItem",
                column: "StuffId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_OrderItem_UnitId",
                table: "BaseEntities_OrderItem",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_OrderItemBlock_OrderItemId",
                table: "BaseEntities_OrderItemBlock",
                column: "OrderItemId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_OrderItemChangeConfirmation_OrderItemChangeRequestId",
                table: "BaseEntities_OrderItemChangeConfirmation",
                column: "OrderItemChangeRequestId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_OrderItemChangeRequest_OrderItemId",
                table: "BaseEntities_OrderItemChangeRequest",
                column: "OrderItemId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_OrderItemChangeRequest_UnitId",
                table: "BaseEntities_OrderItemChangeRequest",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_OrderItemConfirmation_OrderItemId",
                table: "BaseEntities_OrderItemConfirmation",
                column: "OrderItemId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_OrderItemSaleBlock_CheckOrderItemId",
                table: "BaseEntities_OrderItemSaleBlock",
                column: "CheckOrderItemId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_PartitionStuffSerial_MainStuffSerialCode_MainStuffSerialStuffId",
                table: "BaseEntities_PartitionStuffSerial",
                columns: new[] { "MainStuffSerialCode", "MainStuffSerialStuffId" });

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_PartitionStuffSerial_UnitId",
                table: "BaseEntities_PartitionStuffSerial",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_PartitionStuffSerial_WarehouseId",
                table: "BaseEntities_PartitionStuffSerial",
                column: "WarehouseId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_PaymentDueDate_OrderId",
                table: "BaseEntities_PaymentDueDate",
                column: "OrderId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_PaymentDueDate_PaymentTypeId",
                table: "BaseEntities_PaymentDueDate",
                column: "PaymentTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_PreparingSending_SendPermissionId",
                table: "BaseEntities_PreparingSending",
                column: "SendPermissionId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_PreparingSending_UnitId",
                table: "BaseEntities_PreparingSending",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_PreparingSendingItem_PreparingSendingId",
                table: "BaseEntities_PreparingSendingItem",
                column: "PreparingSendingId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_PreparingSendingItem_StuffId",
                table: "BaseEntities_PreparingSendingItem",
                column: "StuffId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_PreparingSendingItem_StuffSerialCode_StuffId",
                table: "BaseEntities_PreparingSendingItem",
                columns: new[] { "StuffSerialCode", "StuffId" });

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_PreparingSendingItem_UnitId",
                table: "BaseEntities_PreparingSendingItem",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_ProductionMaterialRequest_ProductionOrderId",
                table: "BaseEntities_ProductionMaterialRequest",
                column: "ProductionOrderId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_ProductionOrder_CalendarEventId",
                table: "BaseEntities_ProductionOrder",
                column: "CalendarEventId",
                unique: true,
                filter: "[CalendarEventId] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_ProductionOrder_ProductionScheduleId",
                table: "BaseEntities_ProductionOrder",
                column: "ProductionScheduleId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_ProductionOrder_SupervisorEmployeeId",
                table: "BaseEntities_ProductionOrder",
                column: "SupervisorEmployeeId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_ProductionOrder_UnitId",
                table: "BaseEntities_ProductionOrder",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_ProductionOrder_WorkPlanStepId",
                table: "BaseEntities_ProductionOrder",
                column: "WorkPlanStepId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_ProductionPlan_BillOfMaterialVersion_BillOfMaterialStuffId",
                table: "BaseEntities_ProductionPlan",
                columns: new[] { "BillOfMaterialVersion", "BillOfMaterialStuffId" });

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_ProductionPlan_ProductionRequestId",
                table: "BaseEntities_ProductionPlan",
                column: "ProductionRequestId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_ProductionPlan_UnitId",
                table: "BaseEntities_ProductionPlan",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_ProductionPlanDetail_BillOfMaterialVersion_BillOfMaterialStuffId",
                table: "BaseEntities_ProductionPlanDetail",
                columns: new[] { "BillOfMaterialVersion", "BillOfMaterialStuffId" });

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_ProductionPlanDetail_ProductionPlanDetailLevelId",
                table: "BaseEntities_ProductionPlanDetail",
                column: "ProductionPlanDetailLevelId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_ProductionPlanDetail_ProductionPlanId",
                table: "BaseEntities_ProductionPlanDetail",
                column: "ProductionPlanId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_ProductionPlanDetail_UnitId",
                table: "BaseEntities_ProductionPlanDetail",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_ProductionRequest_CheckOrderItemId",
                table: "BaseEntities_ProductionRequest",
                column: "CheckOrderItemId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_ProductionRequest_UnitId",
                table: "BaseEntities_ProductionRequest",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_ProductionSchedule_CalendarEventId",
                table: "BaseEntities_ProductionSchedule",
                column: "CalendarEventId",
                unique: true,
                filter: "[CalendarEventId] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_ProductionSchedule_ProductionPlanDetailId",
                table: "BaseEntities_ProductionSchedule",
                column: "ProductionPlanDetailId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_ProductionSchedule_WorkPlanStepId",
                table: "BaseEntities_ProductionSchedule",
                column: "WorkPlanStepId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_PurchaseOrder_CurrencyId",
                table: "BaseEntities_PurchaseOrder",
                column: "CurrencyId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_PurchaseOrder_LatestRiskId",
                table: "BaseEntities_PurchaseOrder",
                column: "LatestRiskId",
                unique: true,
                filter: "[LatestRiskId] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_PurchaseOrder_ProviderId",
                table: "BaseEntities_PurchaseOrder",
                column: "ProviderId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_PurchaseOrder_PurchaseOrderGroupId",
                table: "BaseEntities_PurchaseOrder",
                column: "PurchaseOrderGroupId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_PurchaseOrder_PurchaseOrderStepDetailId",
                table: "BaseEntities_PurchaseOrder",
                column: "PurchaseOrderStepDetailId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_PurchaseOrder_StuffId_ProviderId",
                table: "BaseEntities_PurchaseOrder",
                columns: new[] { "StuffId", "ProviderId" });

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_PurchaseOrder_SupplierId",
                table: "BaseEntities_PurchaseOrder",
                column: "SupplierId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_PurchaseOrder_UnitId",
                table: "BaseEntities_PurchaseOrder",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_PurchaseOrderDetail_PurchaseOrderId",
                table: "BaseEntities_PurchaseOrderDetail",
                column: "PurchaseOrderId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_PurchaseOrderDetail_PurchaseRequestId",
                table: "BaseEntities_PurchaseOrderDetail",
                column: "PurchaseRequestId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_PurchaseOrderDetail_UnitId",
                table: "BaseEntities_PurchaseOrderDetail",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_PurchasePrice_StoreReceiptId",
                table: "BaseEntities_PurchasePrice",
                column: "StoreReceiptId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_PurchaseRequest_CostCenterId",
                table: "BaseEntities_PurchaseRequest",
                column: "CostCenterId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_PurchaseRequest_DepartmentId",
                table: "BaseEntities_PurchaseRequest",
                column: "DepartmentId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_PurchaseRequest_EmployeeRequesterId",
                table: "BaseEntities_PurchaseRequest",
                column: "EmployeeRequesterId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_PurchaseRequest_LatestRiskId",
                table: "BaseEntities_PurchaseRequest",
                column: "LatestRiskId",
                unique: true,
                filter: "[LatestRiskId] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_PurchaseRequest_PlanCodeId",
                table: "BaseEntities_PurchaseRequest",
                column: "PlanCodeId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_PurchaseRequest_PurchaseRequestStepDetailId",
                table: "BaseEntities_PurchaseRequest",
                column: "PurchaseRequestStepDetailId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_PurchaseRequest_ResponsibleEmployeeId",
                table: "BaseEntities_PurchaseRequest",
                column: "ResponsibleEmployeeId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_PurchaseRequest_StuffId",
                table: "BaseEntities_PurchaseRequest",
                column: "StuffId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_PurchaseRequest_UnitId",
                table: "BaseEntities_PurchaseRequest",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_PurchaseStep_CargoItemId",
                table: "BaseEntities_PurchaseStep",
                column: "CargoItemId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_PurchaseStep_HowToBuyDetailId",
                table: "BaseEntities_PurchaseStep",
                column: "HowToBuyDetailId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_QtyCorrectionRequest_StockCheckingTagId",
                table: "BaseEntities_QtyCorrectionRequest",
                column: "StockCheckingTagId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_QtyCorrectionRequest_StuffId",
                table: "BaseEntities_QtyCorrectionRequest",
                column: "StuffId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_QtyCorrectionRequest_StuffSerialCode_StuffId",
                table: "BaseEntities_QtyCorrectionRequest",
                columns: new[] { "StuffSerialCode", "StuffId" });

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_QtyCorrectionRequest_UnitId",
                table: "BaseEntities_QtyCorrectionRequest",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_QtyCorrectionRequest_WarehouseId",
                table: "BaseEntities_QtyCorrectionRequest",
                column: "WarehouseId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_QualityControl_ConfirmationUserId",
                table: "BaseEntities_QualityControl",
                column: "ConfirmationUserId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_QualityControl_DepartmentId",
                table: "BaseEntities_QualityControl",
                column: "DepartmentId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_QualityControl_EmployeeId",
                table: "BaseEntities_QualityControl",
                column: "EmployeeId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_QualityControl_StuffId",
                table: "BaseEntities_QualityControl",
                column: "StuffId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_QualityControl_UnitId",
                table: "BaseEntities_QualityControl",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_QualityControl_WarehouseId",
                table: "BaseEntities_QualityControl",
                column: "WarehouseId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_QualityControlConfirmation_QualityControlId",
                table: "BaseEntities_QualityControlConfirmation",
                column: "QualityControlId",
                unique: true,
                filter: "[QualityControlId] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_QualityControlConfirmationItem_QualityControlConfirmationId",
                table: "BaseEntities_QualityControlConfirmationItem",
                column: "QualityControlConfirmationId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_QualityControlConfirmationItem_QualityControlItemId",
                table: "BaseEntities_QualityControlConfirmationItem",
                column: "QualityControlItemId",
                unique: true,
                filter: "[QualityControlItemId] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_QualityControlConfirmationItem_UnitId",
                table: "BaseEntities_QualityControlConfirmationItem",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_QualityControlItem_QualityControlId",
                table: "BaseEntities_QualityControlItem",
                column: "QualityControlId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_QualityControlItem_ReturnOfSaleId",
                table: "BaseEntities_QualityControlItem",
                column: "ReturnOfSaleId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_QualityControlItem_StuffId",
                table: "BaseEntities_QualityControlItem",
                column: "StuffId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_QualityControlItem_StuffSerialCode_StuffId",
                table: "BaseEntities_QualityControlItem",
                columns: new[] { "StuffSerialCode", "StuffId" });

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_QualityControlItem_UnitId",
                table: "BaseEntities_QualityControlItem",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_Receipt_CooperatorId",
                table: "BaseEntities_Receipt",
                column: "CooperatorId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_ReceiptQualityControl_StoreReceiptId",
                table: "BaseEntities_ReceiptQualityControl",
                column: "StoreReceiptId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_RepairProductionFault_ProductionFaultTypeId",
                table: "BaseEntities_RepairProductionFault",
                column: "ProductionFaultTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_RepairProductionFault_RepairProductionId",
                table: "BaseEntities_RepairProductionFault",
                column: "RepairProductionId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_ResponseConditionalQualityControl_ConditionalQualityControlId",
                table: "BaseEntities_ResponseConditionalQualityControl",
                column: "ConditionalQualityControlId",
                unique: true,
                filter: "[ConditionalQualityControlId] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_ResponseStuffRequestItem_BillOfMaterialVersion_StuffId",
                table: "BaseEntities_ResponseStuffRequestItem",
                columns: new[] { "BillOfMaterialVersion", "StuffId" });

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_ResponseStuffRequestItem_RequestWarehouseIssueId",
                table: "BaseEntities_ResponseStuffRequestItem",
                column: "RequestWarehouseIssueId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_ResponseStuffRequestItem_StuffId",
                table: "BaseEntities_ResponseStuffRequestItem",
                column: "StuffId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_ResponseStuffRequestItem_StuffRequestItemId",
                table: "BaseEntities_ResponseStuffRequestItem",
                column: "StuffRequestItemId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_ResponseWarehouseIssue_WarehouseIssueId",
                table: "BaseEntities_ResponseWarehouseIssue",
                column: "WarehouseIssueId",
                unique: true,
                filter: "[WarehouseIssueId] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_ReturnedExitReceiptRequest_ReturnStoreReceiptId",
                table: "BaseEntities_ReturnedExitReceiptRequest",
                column: "ReturnStoreReceiptId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_ReturnOfSale_ReturnStoreReceiptId",
                table: "BaseEntities_ReturnOfSale",
                column: "ReturnStoreReceiptId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_ReturnOfSale_SendProductId",
                table: "BaseEntities_ReturnOfSale",
                column: "SendProductId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_ReturnOfSale_StuffId",
                table: "BaseEntities_ReturnOfSale",
                column: "StuffId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_ReturnOfSale_StuffSerialCode_StuffId",
                table: "BaseEntities_ReturnOfSale",
                columns: new[] { "StuffSerialCode", "StuffId" });

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_ReturnOfSale_UnitId",
                table: "BaseEntities_ReturnOfSale",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_SendPermission_ConfirmerUserId",
                table: "BaseEntities_SendPermission",
                column: "ConfirmerUserId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_SendPermission_ExitReceiptRequestId",
                table: "BaseEntities_SendPermission",
                column: "ExitReceiptRequestId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_SendPermission_UnitId",
                table: "BaseEntities_SendPermission",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_SendProduct_ExitReceiptId",
                table: "BaseEntities_SendProduct",
                column: "ExitReceiptId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_SendProduct_PreparingSendingId",
                table: "BaseEntities_SendProduct",
                column: "PreparingSendingId",
                unique: true,
                filter: "[PreparingSendingId] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_StockAdjustment_StockCheckingTagId",
                table: "BaseEntities_StockAdjustment",
                column: "StockCheckingTagId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_StockAdjustment_UnitId",
                table: "BaseEntities_StockAdjustment",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_StoreReceipt_BillOfMaterialVersion_StuffId",
                table: "BaseEntities_StoreReceipt",
                columns: new[] { "BillOfMaterialVersion", "StuffId" });

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_StoreReceipt_CooperatorId",
                table: "BaseEntities_StoreReceipt",
                column: "CooperatorId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_StoreReceipt_CurrentPurchasePriceId",
                table: "BaseEntities_StoreReceipt",
                column: "CurrentPurchasePriceId",
                unique: true,
                filter: "[CurrentPurchasePriceId] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_StoreReceipt_InboundCargoId",
                table: "BaseEntities_StoreReceipt",
                column: "InboundCargoId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_StoreReceipt_ReceiptId",
                table: "BaseEntities_StoreReceipt",
                column: "ReceiptId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_StoreReceipt_StuffId",
                table: "BaseEntities_StoreReceipt",
                column: "StuffId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_StoreReceipt_UnitId",
                table: "BaseEntities_StoreReceipt",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_StoreReceipt_WarehouseId",
                table: "BaseEntities_StoreReceipt",
                column: "WarehouseId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_StuffBasePrice_PurchaseOrderId",
                table: "BaseEntities_StuffBasePrice",
                column: "PurchaseOrderId",
                unique: true,
                filter: "[PurchaseOrderId] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_StuffPrice_ConfirmUserId",
                table: "BaseEntities_StuffPrice",
                column: "ConfirmUserId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_StuffPrice_CurrencyId",
                table: "BaseEntities_StuffPrice",
                column: "CurrencyId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_StuffPrice_StuffId",
                table: "BaseEntities_StuffPrice",
                column: "StuffId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_StuffRequest_FromWarehouseId",
                table: "BaseEntities_StuffRequest",
                column: "FromWarehouseId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_StuffRequest_ProductionMaterialRequestId",
                table: "BaseEntities_StuffRequest",
                column: "ProductionMaterialRequestId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_StuffRequest_ScrumEntityId",
                table: "BaseEntities_StuffRequest",
                column: "ScrumEntityId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_StuffRequest_ToDepartmentId",
                table: "BaseEntities_StuffRequest",
                column: "ToDepartmentId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_StuffRequest_ToEmployeeId",
                table: "BaseEntities_StuffRequest",
                column: "ToEmployeeId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_StuffRequest_ToWarehouseId",
                table: "BaseEntities_StuffRequest",
                column: "ToWarehouseId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_StuffRequestItem_BillOfMaterialVersion_StuffId",
                table: "BaseEntities_StuffRequestItem",
                columns: new[] { "BillOfMaterialVersion", "StuffId" });

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_StuffRequestItem_StuffId",
                table: "BaseEntities_StuffRequestItem",
                column: "StuffId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_StuffRequestItem_StuffRequestId",
                table: "BaseEntities_StuffRequestItem",
                column: "StuffRequestId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_StuffRequestItem_UnitId",
                table: "BaseEntities_StuffRequestItem",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_StuffRequestMilestoneDetail_StuffId",
                table: "BaseEntities_StuffRequestMilestoneDetail",
                column: "StuffId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_StuffRequestMilestoneDetail_StuffRequestMilestoneId",
                table: "BaseEntities_StuffRequestMilestoneDetail",
                column: "StuffRequestMilestoneId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_StuffRequestMilestoneDetail_UnitId",
                table: "BaseEntities_StuffRequestMilestoneDetail",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_Transport_OutputTransportId",
                table: "BaseEntities_Transport",
                column: "OutputTransportId",
                unique: true,
                filter: "[OutputTransportId] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_WarehouseIssue_FromWarehouseId",
                table: "BaseEntities_WarehouseIssue",
                column: "FromWarehouseId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_WarehouseIssue_ToDepartmentId",
                table: "BaseEntities_WarehouseIssue",
                column: "ToDepartmentId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_WarehouseIssue_ToEmployeeId",
                table: "BaseEntities_WarehouseIssue",
                column: "ToEmployeeId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_WarehouseIssue_ToWarehouseId",
                table: "BaseEntities_WarehouseIssue",
                column: "ToWarehouseId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_WarehouseIssueItem_BillOfMaterialVersion_StuffId",
                table: "BaseEntities_WarehouseIssueItem",
                columns: new[] { "BillOfMaterialVersion", "StuffId" });

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_WarehouseIssueItem_StuffId",
                table: "BaseEntities_WarehouseIssueItem",
                column: "StuffId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_WarehouseIssueItem_StuffSerialCode_StuffId",
                table: "BaseEntities_WarehouseIssueItem",
                columns: new[] { "StuffSerialCode", "StuffId" });

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_WarehouseIssueItem_UnitId",
                table: "BaseEntities_WarehouseIssueItem",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntities_WarehouseIssueItem_WarehouseIssueId",
                table: "BaseEntities_WarehouseIssueItem",
                column: "WarehouseIssueId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntityConfirmTypes_DepartmentId",
                table: "BaseEntityConfirmTypes",
                column: "DepartmentId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntityConfirmTypes_UserId",
                table: "BaseEntityConfirmTypes",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntityDocuments_BaseEntityDocumentTypeId",
                table: "BaseEntityDocuments",
                column: "BaseEntityDocumentTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntityDocuments_BaseEntityId",
                table: "BaseEntityDocuments",
                column: "BaseEntityId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntityDocuments_CooperatorId",
                table: "BaseEntityDocuments",
                column: "CooperatorId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntityDocuments_UserId",
                table: "BaseEntityDocuments",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntityLogs_BaseEntityId",
                table: "BaseEntityLogs",
                column: "BaseEntityId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntityLogs_UserId",
                table: "BaseEntityLogs",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseEntityLogs_ReturnOfSaleStatusLog_ReturnOfSaleId",
                table: "BaseEntityLogs_ReturnOfSaleStatusLog",
                column: "ReturnOfSaleId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseTransactions_BillOfMaterialVersion_StuffId",
                table: "BaseTransactions",
                columns: new[] { "BillOfMaterialVersion", "StuffId" });

            migrationBuilder.CreateIndex(
                name: "IX_BaseTransactions_ReferenceTransactionId",
                table: "BaseTransactions",
                column: "ReferenceTransactionId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseTransactions_StuffId",
                table: "BaseTransactions",
                column: "StuffId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseTransactions_StuffSerialCode_StuffId",
                table: "BaseTransactions",
                columns: new[] { "StuffSerialCode", "StuffId" });

            migrationBuilder.CreateIndex(
                name: "IX_BaseTransactions_TransactionBatchId",
                table: "BaseTransactions",
                column: "TransactionBatchId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseTransactions_TransactionTypeId",
                table: "BaseTransactions",
                column: "TransactionTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseTransactions_UnitId",
                table: "BaseTransactions",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseTransactions_WarehouseFiscalPeriodId",
                table: "BaseTransactions",
                column: "WarehouseFiscalPeriodId");

            migrationBuilder.CreateIndex(
                name: "IX_BaseTransactions_WarehouseId",
                table: "BaseTransactions",
                column: "WarehouseId");

            migrationBuilder.CreateIndex(
                name: "IX_BillOfMaterialDetails_BillOfMaterialVersion_BillOfMaterialStuffId",
                table: "BillOfMaterialDetails",
                columns: new[] { "BillOfMaterialVersion", "BillOfMaterialStuffId" });

            migrationBuilder.CreateIndex(
                name: "IX_BillOfMaterialDetails_SemiProductBillOfMaterialVersion_StuffId",
                table: "BillOfMaterialDetails",
                columns: new[] { "SemiProductBillOfMaterialVersion", "StuffId" });

            migrationBuilder.CreateIndex(
                name: "IX_BillOfMaterialDetails_StuffId",
                table: "BillOfMaterialDetails",
                column: "StuffId");

            migrationBuilder.CreateIndex(
                name: "IX_BillOfMaterialDetails_UnitId",
                table: "BillOfMaterialDetails",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_BillOfMaterialDocuments_BillOfMaterialDocumentTypeId",
                table: "BillOfMaterialDocuments",
                column: "BillOfMaterialDocumentTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_BillOfMaterialDocuments_BillOfMaterialVersion_BillOfMaterialStuffId",
                table: "BillOfMaterialDocuments",
                columns: new[] { "BillOfMaterialVersion", "BillOfMaterialStuffId" });

            migrationBuilder.CreateIndex(
                name: "IX_BillOfMaterialDocuments_UserId",
                table: "BillOfMaterialDocuments",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_BillOfMaterialPriceHistories_CurrencyId",
                table: "BillOfMaterialPriceHistories",
                column: "CurrencyId");

            migrationBuilder.CreateIndex(
                name: "IX_BillOfMaterialPriceHistories_StuffId",
                table: "BillOfMaterialPriceHistories",
                column: "StuffId");

            migrationBuilder.CreateIndex(
                name: "IX_BillOfMaterialPriceHistories_UserId",
                table: "BillOfMaterialPriceHistories",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_BillOfMaterialPriceHistoryCurrencyRates_BillOfMaterialPriceHistoryId",
                table: "BillOfMaterialPriceHistoryCurrencyRates",
                column: "BillOfMaterialPriceHistoryId");

            migrationBuilder.CreateIndex(
                name: "IX_BillOfMaterialPriceHistoryCurrencyRates_FromCurrencyId",
                table: "BillOfMaterialPriceHistoryCurrencyRates",
                column: "FromCurrencyId");

            migrationBuilder.CreateIndex(
                name: "IX_BillOfMaterialPriceHistoryCurrencyRates_ToCurrencyId",
                table: "BillOfMaterialPriceHistoryCurrencyRates",
                column: "ToCurrencyId");

            migrationBuilder.CreateIndex(
                name: "IX_BillOfMaterialPriceHistoryDetails_BillOfMaerialPriceHistoryId",
                table: "BillOfMaterialPriceHistoryDetails",
                column: "BillOfMaerialPriceHistoryId");

            migrationBuilder.CreateIndex(
                name: "IX_BillOfMaterials_ProductionStepId",
                table: "BillOfMaterials",
                column: "ProductionStepId");

            migrationBuilder.CreateIndex(
                name: "IX_BillOfMaterials_StuffId",
                table: "BillOfMaterials",
                column: "StuffId");

            migrationBuilder.CreateIndex(
                name: "IX_BillOfMaterials_UnitId",
                table: "BillOfMaterials",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_BillOfMaterials_UserId",
                table: "BillOfMaterials",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_CalendarEvents_WorkShiftId",
                table: "CalendarEvents",
                column: "WorkShiftId");

            migrationBuilder.CreateIndex(
                name: "IX_CargoCosts_CargoId",
                table: "CargoCosts",
                column: "CargoId");

            migrationBuilder.CreateIndex(
                name: "IX_CargoCosts_CargoItemId",
                table: "CargoCosts",
                column: "CargoItemId");

            migrationBuilder.CreateIndex(
                name: "IX_CargoCosts_FinancialDocumentCostId",
                table: "CargoCosts",
                column: "FinancialDocumentCostId");

            migrationBuilder.CreateIndex(
                name: "IX_CargoItemDetailSummaries_CargoItemDetailId",
                table: "CargoItemDetailSummaries",
                column: "CargoItemDetailId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_CargoItemLogs_CargoItemId",
                table: "CargoItemLogs",
                column: "CargoItemId");

            migrationBuilder.CreateIndex(
                name: "IX_CargoItemLogs_ModifierUserId",
                table: "CargoItemLogs",
                column: "ModifierUserId");

            migrationBuilder.CreateIndex(
                name: "IX_CargoItemSummaries_CargoItemId",
                table: "CargoItemSummaries",
                column: "CargoItemId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Cities_CountryId",
                table: "Cities",
                column: "CountryId");

            migrationBuilder.CreateIndex(
                name: "IX_Contacts_ContactTypeId",
                table: "Contacts",
                column: "ContactTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_Contacts_CooperatorId",
                table: "Contacts",
                column: "CooperatorId");

            migrationBuilder.CreateIndex(
                name: "IX_Contacts_CooperatorId1",
                table: "Contacts",
                column: "CooperatorId1");

            migrationBuilder.CreateIndex(
                name: "IX_Contacts_EmployeeId",
                table: "Contacts",
                column: "EmployeeId");

            migrationBuilder.CreateIndex(
                name: "IX_Cooperators_CityId",
                table: "Cooperators",
                column: "CityId");

            migrationBuilder.CreateIndex(
                name: "IX_CostCenters_ConfirmerUserId",
                table: "CostCenters",
                column: "ConfirmerUserId");

            migrationBuilder.CreateIndex(
                name: "IX_CottageItems_BankOrderDetailId",
                table: "CottageItems",
                column: "BankOrderDetailId");

            migrationBuilder.CreateIndex(
                name: "IX_CottageItems_CottageId",
                table: "CottageItems",
                column: "CottageId");

            migrationBuilder.CreateIndex(
                name: "IX_CottageItems_StuffHSGroupId",
                table: "CottageItems",
                column: "StuffHSGroupId");

            migrationBuilder.CreateIndex(
                name: "IX_Cottages_CustomsDeclarationId",
                table: "Cottages",
                column: "CustomsDeclarationId");

            migrationBuilder.CreateIndex(
                name: "IX_CurrencyRates_ExchangeId",
                table: "CurrencyRates",
                column: "ExchangeId");

            migrationBuilder.CreateIndex(
                name: "IX_CurrencyRates_FromCurrencyId",
                table: "CurrencyRates",
                column: "FromCurrencyId");

            migrationBuilder.CreateIndex(
                name: "IX_CurrencyRates_ToCurrencyId",
                table: "CurrencyRates",
                column: "ToCurrencyId");

            migrationBuilder.CreateIndex(
                name: "IX_CustomerComplaintDepartments_CustomerComplaintSummaryId",
                table: "CustomerComplaintDepartments",
                column: "CustomerComplaintSummaryId");

            migrationBuilder.CreateIndex(
                name: "IX_CustomerComplaintDepartments_DepartmentId",
                table: "CustomerComplaintDepartments",
                column: "DepartmentId");

            migrationBuilder.CreateIndex(
                name: "IX_CustomerComplaints_CustomerId",
                table: "CustomerComplaints",
                column: "CustomerId");

            migrationBuilder.CreateIndex(
                name: "IX_CustomerComplaints_RegisterarUserId",
                table: "CustomerComplaints",
                column: "RegisterarUserId");

            migrationBuilder.CreateIndex(
                name: "IX_CustomerComplaints_UserId",
                table: "CustomerComplaints",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_CustomerComplaintSummaries_CorrectiveActionUserId",
                table: "CustomerComplaintSummaries",
                column: "CorrectiveActionUserId");

            migrationBuilder.CreateIndex(
                name: "IX_CustomerComplaintSummaries_CustomerComplaintId",
                table: "CustomerComplaintSummaries",
                column: "CustomerComplaintId");

            migrationBuilder.CreateIndex(
                name: "IX_CustomerStuffs_CustomerId",
                table: "CustomerStuffs",
                column: "CustomerId");

            migrationBuilder.CreateIndex(
                name: "IX_CustomerStuffs_StuffId",
                table: "CustomerStuffs",
                column: "StuffId");

            migrationBuilder.CreateIndex(
                name: "IX_CustomerStuffVersions_CustomerStuffId",
                table: "CustomerStuffVersions",
                column: "CustomerStuffId");

            migrationBuilder.CreateIndex(
                name: "IX_DeleteLadingItemDetailInput_LadingChangeRequestId",
                table: "DeleteLadingItemDetailInput",
                column: "LadingChangeRequestId");

            migrationBuilder.CreateIndex(
                name: "IX_DepartmentManager_DepartmentId",
                table: "DepartmentManager",
                column: "DepartmentId",
                unique: true,
                filter: "[DepartmentId] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_DepartmentManager_OrganizationPostId",
                table: "DepartmentManager",
                column: "OrganizationPostId",
                unique: true,
                filter: "[OrganizationPostId] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_DepartmentManager_UserId",
                table: "DepartmentManager",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_Departments_ParentDepartmentId",
                table: "Departments",
                column: "ParentDepartmentId");

            migrationBuilder.CreateIndex(
                name: "IX_DepartmentWorkShifts_DepartmentId",
                table: "DepartmentWorkShifts",
                column: "DepartmentId");

            migrationBuilder.CreateIndex(
                name: "IX_DetailedCodeConfirmationRequests_ConfirmationUserId",
                table: "DetailedCodeConfirmationRequests",
                column: "ConfirmationUserId");

            migrationBuilder.CreateIndex(
                name: "IX_DetailedCodeConfirmationRequests_CooperatorId",
                table: "DetailedCodeConfirmationRequests",
                column: "CooperatorId");

            migrationBuilder.CreateIndex(
                name: "IX_DetailedCodeConfirmationRequests_ProductionLineId",
                table: "DetailedCodeConfirmationRequests",
                column: "ProductionLineId");

            migrationBuilder.CreateIndex(
                name: "IX_DetailedCodeConfirmationRequests_UserId",
                table: "DetailedCodeConfirmationRequests",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_EditLadingItemDetailInput_LadingChangeRequestId",
                table: "EditLadingItemDetailInput",
                column: "LadingChangeRequestId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeComplain_EmployeeId",
                table: "EmployeeComplain",
                column: "EmployeeId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeComplain_UserId",
                table: "EmployeeComplain",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeComplainDepartment_DepartmentId",
                table: "EmployeeComplainDepartment",
                column: "DepartmentId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeComplainDepartment_EmployeeComplainItemId",
                table: "EmployeeComplainDepartment",
                column: "EmployeeComplainItemId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeComplainItem_EmployeeComplainId",
                table: "EmployeeComplainItem",
                column: "EmployeeComplainId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeEvaluationItemDetails_EvaluationCategoryItemId",
                table: "EmployeeEvaluationItemDetails",
                column: "EvaluationCategoryItemId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeEvaluationItems_EvaluationCategoryId",
                table: "EmployeeEvaluationItems",
                column: "EvaluationCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeEvaluationItems_UserId",
                table: "EmployeeEvaluationItems",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeEvaluationPeriodItems_EvaluationCategoryId",
                table: "EmployeeEvaluationPeriodItems",
                column: "EvaluationCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeEvaluationPeriods_UserId",
                table: "EmployeeEvaluationPeriods",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeEvaluations_CreatedUserId",
                table: "EmployeeEvaluations",
                column: "CreatedUserId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeEvaluations_EmployeeEvaluationPeriodId",
                table: "EmployeeEvaluations",
                column: "EmployeeEvaluationPeriodId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeEvaluations_EmployeeId",
                table: "EmployeeEvaluations",
                column: "EmployeeId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeOperatorTypes_OperatorTypeId",
                table: "EmployeeOperatorTypes",
                column: "OperatorTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_Employees_DepartmentId",
                table: "Employees",
                column: "DepartmentId");

            migrationBuilder.CreateIndex(
                name: "IX_Employees_OrganizationJobId",
                table: "Employees",
                column: "OrganizationJobId");

            migrationBuilder.CreateIndex(
                name: "IX_Employees_OrgnizationPostId",
                table: "Employees",
                column: "OrgnizationPostId");

            migrationBuilder.CreateIndex(
                name: "IX_Employees_UserId",
                table: "Employees",
                column: "UserId",
                unique: true,
                filter: "[UserId] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeWorkReportItems_EmployeeWorkReportId",
                table: "EmployeeWorkReportItems",
                column: "EmployeeWorkReportId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeWorkReports_EmployeeId",
                table: "EmployeeWorkReports",
                column: "EmployeeId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeWorkReports_ProjectERPTaskId",
                table: "EmployeeWorkReports",
                column: "ProjectERPTaskId");

            migrationBuilder.CreateIndex(
                name: "IX_EmployeeWorkReports_UserId",
                table: "EmployeeWorkReports",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_EnactmentActionProcessLogs_EnactmentActionProcessId",
                table: "EnactmentActionProcessLogs",
                column: "EnactmentActionProcessId");

            migrationBuilder.CreateIndex(
                name: "IX_EnactmentActionProcessLogs_EnactmentId",
                table: "EnactmentActionProcessLogs",
                column: "EnactmentId");

            migrationBuilder.CreateIndex(
                name: "IX_EnactmentActionProcessLogs_EnactmentId1",
                table: "EnactmentActionProcessLogs",
                column: "EnactmentId1",
                unique: true,
                filter: "[EnactmentId1] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_EnactmentActionProcessLogs_UserId",
                table: "EnactmentActionProcessLogs",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_Enactments_BankOrderId",
                table: "Enactments",
                column: "BankOrderId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Enactments_UserId",
                table: "Enactments",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_EntityLogs_UserId",
                table: "EntityLogs",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_EquivalentStuffDetails_EquivalentStuffId",
                table: "EquivalentStuffDetails",
                column: "EquivalentStuffId");

            migrationBuilder.CreateIndex(
                name: "IX_EquivalentStuffDetails_SemiProductBillOfMaterialVersion_StuffId",
                table: "EquivalentStuffDetails",
                columns: new[] { "SemiProductBillOfMaterialVersion", "StuffId" });

            migrationBuilder.CreateIndex(
                name: "IX_EquivalentStuffDetails_StuffId",
                table: "EquivalentStuffDetails",
                column: "StuffId");

            migrationBuilder.CreateIndex(
                name: "IX_EquivalentStuffDetails_UnitId",
                table: "EquivalentStuffDetails",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_EquivalentStuffs_BillOfMaterialDetailId",
                table: "EquivalentStuffs",
                column: "BillOfMaterialDetailId");

            migrationBuilder.CreateIndex(
                name: "IX_EvaluationCategories_DepartmentId",
                table: "EvaluationCategories",
                column: "DepartmentId");

            migrationBuilder.CreateIndex(
                name: "IX_EvaluationCategoryItems_EvaluationCategoryId",
                table: "EvaluationCategoryItems",
                column: "EvaluationCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_ExitReceiptDeleteRequestConfirmationLogs_ConfirmerUserId",
                table: "ExitReceiptDeleteRequestConfirmationLogs",
                column: "ConfirmerUserId");

            migrationBuilder.CreateIndex(
                name: "IX_ExitReceiptDeleteRequestConfirmationLogs_ExitReceiptDeleteRequestId",
                table: "ExitReceiptDeleteRequestConfirmationLogs",
                column: "ExitReceiptDeleteRequestId");

            migrationBuilder.CreateIndex(
                name: "IX_ExitReceiptDeleteRequests_ChangeStatusUserId",
                table: "ExitReceiptDeleteRequests",
                column: "ChangeStatusUserId");

            migrationBuilder.CreateIndex(
                name: "IX_ExitReceiptDeleteRequests_CreatorUserId",
                table: "ExitReceiptDeleteRequests",
                column: "CreatorUserId");

            migrationBuilder.CreateIndex(
                name: "IX_ExitReceiptDeleteRequests_ExitReceiptId",
                table: "ExitReceiptDeleteRequests",
                column: "ExitReceiptId");

            migrationBuilder.CreateIndex(
                name: "IX_ExitReceiptDeleteRequestStuffSerials_ExitReceiptDeleteRequestId",
                table: "ExitReceiptDeleteRequestStuffSerials",
                column: "ExitReceiptDeleteRequestId");

            migrationBuilder.CreateIndex(
                name: "IX_ExitReceiptDeleteRequestStuffSerials_StuffSerialCode_StuffSerialId",
                table: "ExitReceiptDeleteRequestStuffSerials",
                columns: new[] { "StuffSerialCode", "StuffSerialId" });

            migrationBuilder.CreateIndex(
                name: "IX_ExitReceiptDeleteRequestStuffSerials_UnitId",
                table: "ExitReceiptDeleteRequestStuffSerials",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_ExitReceiptRequestSummaries_ExitReceiptRequestId",
                table: "ExitReceiptRequestSummaries",
                column: "ExitReceiptRequestId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FaildProductionOperations_RepairProductionId",
                table: "FaildProductionOperations",
                column: "RepairProductionId");

            migrationBuilder.CreateIndex(
                name: "IX_FaildProductionOperations_ReworkProductionOperationId",
                table: "FaildProductionOperations",
                column: "ReworkProductionOperationId",
                unique: true,
                filter: "[ReworkProductionOperationId] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_FinanceAllocations_FinanceId",
                table: "FinanceAllocations",
                column: "FinanceId");

            migrationBuilder.CreateIndex(
                name: "IX_FinanceAllocations_UserId",
                table: "FinanceAllocations",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_FinanceAllocationSummaries_FinanceId",
                table: "FinanceAllocationSummaries",
                column: "FinanceId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinanceConfirmations_FinanceId",
                table: "FinanceConfirmations",
                column: "FinanceId");

            migrationBuilder.CreateIndex(
                name: "IX_FinanceConfirmations_UserId",
                table: "FinanceConfirmations",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_FinanceItemAllocationSummaries_CooperatorId",
                table: "FinanceItemAllocationSummaries",
                column: "CooperatorId");

            migrationBuilder.CreateIndex(
                name: "IX_FinanceItemConfirmations_FinanceItemId",
                table: "FinanceItemConfirmations",
                column: "FinanceItemId");

            migrationBuilder.CreateIndex(
                name: "IX_FinanceItemConfirmations_UserId",
                table: "FinanceItemConfirmations",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_FinanceItems_CooperatorId",
                table: "FinanceItems",
                column: "CooperatorId");

            migrationBuilder.CreateIndex(
                name: "IX_FinanceItems_ExpenseFinancialDocumentId",
                table: "FinanceItems",
                column: "ExpenseFinancialDocumentId");

            migrationBuilder.CreateIndex(
                name: "IX_FinanceItems_FinanceId_CooperatorId",
                table: "FinanceItems",
                columns: new[] { "FinanceId", "CooperatorId" });

            migrationBuilder.CreateIndex(
                name: "IX_FinanceItems_LatestConfirmationId",
                table: "FinanceItems",
                column: "LatestConfirmationId",
                unique: true,
                filter: "[LatestConfirmationId] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_FinanceItems_PurchaseOrderId",
                table: "FinanceItems",
                column: "PurchaseOrderId");

            migrationBuilder.CreateIndex(
                name: "IX_FinanceItems_ReceivedUserId",
                table: "FinanceItems",
                column: "ReceivedUserId");

            migrationBuilder.CreateIndex(
                name: "IX_FinanceItems_UserId",
                table: "FinanceItems",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_Finances_CooperatorId",
                table: "Finances",
                column: "CooperatorId");

            migrationBuilder.CreateIndex(
                name: "IX_Finances_CurrencyId",
                table: "Finances",
                column: "CurrencyId");

            migrationBuilder.CreateIndex(
                name: "IX_Finances_FinanacialAccountDetailId",
                table: "Finances",
                column: "FinanacialAccountDetailId");

            migrationBuilder.CreateIndex(
                name: "IX_Finances_LastConfimationId",
                table: "Finances",
                column: "LastConfimationId",
                unique: true,
                filter: "[LastConfimationId] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_Finances_UserId",
                table: "Finances",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_FinancialAccountDetails_BankId",
                table: "FinancialAccountDetails",
                column: "BankId");

            migrationBuilder.CreateIndex(
                name: "IX_FinancialAccountDetails_FinancialAccountId",
                table: "FinancialAccountDetails",
                column: "FinancialAccountId");

            migrationBuilder.CreateIndex(
                name: "IX_FinancialAccounts_CurrencyId",
                table: "FinancialAccounts",
                column: "CurrencyId");

            migrationBuilder.CreateIndex(
                name: "IX_FinancialAccounts_CooperatorFinancialAccount_CooperatorId",
                table: "FinancialAccounts_CooperatorFinancialAccount",
                column: "CooperatorId");

            migrationBuilder.CreateIndex(
                name: "IX_FinancialDocumentBankOrders_BankOrderId",
                table: "FinancialDocumentBankOrders",
                column: "BankOrderId");

            migrationBuilder.CreateIndex(
                name: "IX_FinancialDocumentBankOrders_FinancialDocumentId",
                table: "FinancialDocumentBankOrders",
                column: "FinancialDocumentId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinancialDocumentBeginnings_FinancialDocumentId",
                table: "FinancialDocumentBeginnings",
                column: "FinancialDocumentId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinancialDocumentCorrections_FinancialDocumentId",
                table: "FinancialDocumentCorrections",
                column: "FinancialDocumentId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinancialDocumentCosts_FinancialDocumentId",
                table: "FinancialDocumentCosts",
                column: "FinancialDocumentId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinancialDocumentDiscounts_FinancialDocumentId",
                table: "FinancialDocumentDiscounts",
                column: "FinancialDocumentId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinancialDocumentTransfers_FinancialDocumentId",
                table: "FinancialDocumentTransfers",
                column: "FinancialDocumentId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_FinancialDocumentTransfers_ToFinancialAccountId",
                table: "FinancialDocumentTransfers",
                column: "ToFinancialAccountId");

            migrationBuilder.CreateIndex(
                name: "IX_FinancialLimits_CurrencyId",
                table: "FinancialLimits",
                column: "CurrencyId");

            migrationBuilder.CreateIndex(
                name: "IX_FinancialLimits_UserId",
                table: "FinancialLimits",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_FinancialTransactionBatches_UserId",
                table: "FinancialTransactionBatches",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_FinancialTransactions_FinancialAccountId",
                table: "FinancialTransactions",
                column: "FinancialAccountId");

            migrationBuilder.CreateIndex(
                name: "IX_FinancialTransactions_FinancialTransactionBatchId",
                table: "FinancialTransactions",
                column: "FinancialTransactionBatchId");

            migrationBuilder.CreateIndex(
                name: "IX_FinancialTransactions_FinancialTransactionTypeId",
                table: "FinancialTransactions",
                column: "FinancialTransactionTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_FinancialTransactions_ReferenceFinancialTransactionId",
                table: "FinancialTransactions",
                column: "ReferenceFinancialTransactionId");

            migrationBuilder.CreateIndex(
                name: "IX_FinancialTransactionTypes_RollbackFinancialTransactionTypeId",
                table: "FinancialTransactionTypes",
                column: "RollbackFinancialTransactionTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_GeneralStuffRequestDetails_AlternativePurchaseRequestId",
                table: "GeneralStuffRequestDetails",
                column: "AlternativePurchaseRequestId");

            migrationBuilder.CreateIndex(
                name: "IX_GeneralStuffRequestDetails_GeneralStuffRequestId",
                table: "GeneralStuffRequestDetails",
                column: "GeneralStuffRequestId");

            migrationBuilder.CreateIndex(
                name: "IX_GeneralStuffRequestDetails_PurchaseRequestId",
                table: "GeneralStuffRequestDetails",
                column: "PurchaseRequestId");

            migrationBuilder.CreateIndex(
                name: "IX_GeneralStuffRequestDetails_StuffRequestId",
                table: "GeneralStuffRequestDetails",
                column: "StuffRequestId");

            migrationBuilder.CreateIndex(
                name: "IX_GeneralStuffRequestDetails_UnitId",
                table: "GeneralStuffRequestDetails",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_GeneralStuffRequests_BillOfMaterialVersion_StuffId",
                table: "GeneralStuffRequests",
                columns: new[] { "BillOfMaterialVersion", "StuffId" });

            migrationBuilder.CreateIndex(
                name: "IX_GeneralStuffRequests_FromWarehouseId",
                table: "GeneralStuffRequests",
                column: "FromWarehouseId");

            migrationBuilder.CreateIndex(
                name: "IX_GeneralStuffRequests_ProductionMaterialRequestId",
                table: "GeneralStuffRequests",
                column: "ProductionMaterialRequestId");

            migrationBuilder.CreateIndex(
                name: "IX_GeneralStuffRequests_ScrumEntityId",
                table: "GeneralStuffRequests",
                column: "ScrumEntityId");

            migrationBuilder.CreateIndex(
                name: "IX_GeneralStuffRequests_StuffId",
                table: "GeneralStuffRequests",
                column: "StuffId");

            migrationBuilder.CreateIndex(
                name: "IX_GeneralStuffRequests_ToDepartmentId",
                table: "GeneralStuffRequests",
                column: "ToDepartmentId");

            migrationBuilder.CreateIndex(
                name: "IX_GeneralStuffRequests_ToEmployeeId",
                table: "GeneralStuffRequests",
                column: "ToEmployeeId");

            migrationBuilder.CreateIndex(
                name: "IX_GeneralStuffRequests_ToWarehouseId",
                table: "GeneralStuffRequests",
                column: "ToWarehouseId");

            migrationBuilder.CreateIndex(
                name: "IX_GeneralStuffRequests_UnitId",
                table: "GeneralStuffRequests",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_GeneralStuffRequests_UserId",
                table: "GeneralStuffRequests",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_HowToBuyDetails_HowToBuyId",
                table: "HowToBuyDetails",
                column: "HowToBuyId");

            migrationBuilder.CreateIndex(
                name: "IX_InboundCargoCooperators_CooperatorId",
                table: "InboundCargoCooperators",
                column: "CooperatorId");

            migrationBuilder.CreateIndex(
                name: "IX_Indicators_ApiInfoId",
                table: "Indicators",
                column: "ApiInfoId");

            migrationBuilder.CreateIndex(
                name: "IX_Indicators_DepartmentId",
                table: "Indicators",
                column: "DepartmentId");

            migrationBuilder.CreateIndex(
                name: "IX_IndicatorWeights_DepartmentId",
                table: "IndicatorWeights",
                column: "DepartmentId");

            migrationBuilder.CreateIndex(
                name: "IX_IranKhodroSerials_CustomerStuffId",
                table: "IranKhodroSerials",
                column: "CustomerStuffId");

            migrationBuilder.CreateIndex(
                name: "IX_IranKhodroSerials_CustomerStuffVersionId",
                table: "IranKhodroSerials",
                column: "CustomerStuffVersionId");

            migrationBuilder.CreateIndex(
                name: "IX_IranKhodroSerials_LinkSerialId",
                table: "IranKhodroSerials",
                column: "LinkSerialId",
                unique: true,
                filter: "[LinkSerialId] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_IranKhodroSerials_ProductionYearId",
                table: "IranKhodroSerials",
                column: "ProductionYearId");

            migrationBuilder.CreateIndex(
                name: "IX_IranKhodroSerials_UserId",
                table: "IranKhodroSerials",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_LadingBankOrderLogs_LadingBankOrderStatusId",
                table: "LadingBankOrderLogs",
                column: "LadingBankOrderStatusId");

            migrationBuilder.CreateIndex(
                name: "IX_LadingBankOrderLogs_LadingId",
                table: "LadingBankOrderLogs",
                column: "LadingId");

            migrationBuilder.CreateIndex(
                name: "IX_LadingBankOrderLogs_LadingId1",
                table: "LadingBankOrderLogs",
                column: "LadingId1",
                unique: true,
                filter: "[LadingId1] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_LadingBankOrderLogs_UserId",
                table: "LadingBankOrderLogs",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_LadingBlockers_UserGroupId",
                table: "LadingBlockers",
                column: "UserGroupId");

            migrationBuilder.CreateIndex(
                name: "IX_LadingChangeRequests_ConfirmerUserId",
                table: "LadingChangeRequests",
                column: "ConfirmerUserId");

            migrationBuilder.CreateIndex(
                name: "IX_LadingChangeRequests_LadingId",
                table: "LadingChangeRequests",
                column: "LadingId");

            migrationBuilder.CreateIndex(
                name: "IX_LadingChangeRequests_UserId",
                table: "LadingChangeRequests",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_LadingCosts_FinancialDocumentCostId",
                table: "LadingCosts",
                column: "FinancialDocumentCostId");

            migrationBuilder.CreateIndex(
                name: "IX_LadingCosts_LadingId",
                table: "LadingCosts",
                column: "LadingId");

            migrationBuilder.CreateIndex(
                name: "IX_LadingCosts_LadingItemId",
                table: "LadingCosts",
                column: "LadingItemId");

            migrationBuilder.CreateIndex(
                name: "IX_LadingCustomhouseLogs_LadingCustomhouseStatusId",
                table: "LadingCustomhouseLogs",
                column: "LadingCustomhouseStatusId");

            migrationBuilder.CreateIndex(
                name: "IX_LadingCustomhouseLogs_LadingId",
                table: "LadingCustomhouseLogs",
                column: "LadingId");

            migrationBuilder.CreateIndex(
                name: "IX_LadingCustomhouseLogs_LadingId1",
                table: "LadingCustomhouseLogs",
                column: "LadingId1",
                unique: true,
                filter: "[LadingId1] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_LadingCustomhouseLogs_UserId",
                table: "LadingCustomhouseLogs",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_LadingItemDetailSummaries_LadingItemDetailId",
                table: "LadingItemDetailSummaries",
                column: "LadingItemDetailId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_LadingItemSummaries_LadingItemId",
                table: "LadingItemSummaries",
                column: "LadingItemId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_LinkSerials_CustomerId",
                table: "LinkSerials",
                column: "CustomerId");

            migrationBuilder.CreateIndex(
                name: "IX_LinkSerials_LinkedSerial",
                table: "LinkSerials",
                column: "LinkedSerial",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_LinkSerials_StuffSerialCode_StuffId",
                table: "LinkSerials",
                columns: new[] { "StuffSerialCode", "StuffId" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_LinkSerials_UserId",
                table: "LinkSerials",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_LinkSerials_UserLinkerId",
                table: "LinkSerials",
                column: "UserLinkerId");

            migrationBuilder.CreateIndex(
                name: "IX_Machines_MachineTypeId",
                table: "Machines",
                column: "MachineTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_MachineTypeOperatorTypes_MachineTypeId",
                table: "MachineTypeOperatorTypes",
                column: "MachineTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_MachineTypeOperatorTypes_OperatorTypeId",
                table: "MachineTypeOperatorTypes",
                column: "OperatorTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_MachineTypeParameters_MachineTypeId",
                table: "MachineTypeParameters",
                column: "MachineTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_MeetingApprovals_MinutesMeetingId",
                table: "MeetingApprovals",
                column: "MinutesMeetingId");

            migrationBuilder.CreateIndex(
                name: "IX_MeetingApprovals_OperatorDepartmentId",
                table: "MeetingApprovals",
                column: "OperatorDepartmentId");

            migrationBuilder.CreateIndex(
                name: "IX_MeetingApprovals_OperatorUserId",
                table: "MeetingApprovals",
                column: "OperatorUserId");

            migrationBuilder.CreateIndex(
                name: "IX_MeetingParticipants_MinutesMeetingId",
                table: "MeetingParticipants",
                column: "MinutesMeetingId");

            migrationBuilder.CreateIndex(
                name: "IX_MeetingParticipants_ParticipantEmployeeId",
                table: "MeetingParticipants",
                column: "ParticipantEmployeeId");

            migrationBuilder.CreateIndex(
                name: "IX_MeetingParticipants_UserId",
                table: "MeetingParticipants",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_Memberships_UserGroupId",
                table: "Memberships",
                column: "UserGroupId");

            migrationBuilder.CreateIndex(
                name: "IX_Memberships_UserId",
                table: "Memberships",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_Messages_SenderUserId",
                table: "Messages",
                column: "SenderUserId");

            migrationBuilder.CreateIndex(
                name: "IX_MessageSends_ReciverUserId",
                table: "MessageSends",
                column: "ReciverUserId");

            migrationBuilder.CreateIndex(
                name: "IX_MessageSends_PostMessageSend_PostId",
                table: "MessageSends_PostMessageSend",
                column: "PostId");

            migrationBuilder.CreateIndex(
                name: "IX_MinutesMeetings_BossUserId",
                table: "MinutesMeetings",
                column: "BossUserId");

            migrationBuilder.CreateIndex(
                name: "IX_MinutesMeetings_RegistrantUserId",
                table: "MinutesMeetings",
                column: "RegistrantUserId");

            migrationBuilder.CreateIndex(
                name: "IX_MinutesMeetings_SecretaryUserId",
                table: "MinutesMeetings",
                column: "SecretaryUserId");

            migrationBuilder.CreateIndex(
                name: "IX_NewShoppingDetailSummaries_NewShoppingDetailId",
                table: "NewShoppingDetailSummaries",
                column: "NewShoppingDetailId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Notifications_NotificationGroupId",
                table: "Notifications",
                column: "NotificationGroupId");

            migrationBuilder.CreateIndex(
                name: "IX_Notifications_ScrumEntityId",
                table: "Notifications",
                column: "ScrumEntityId");

            migrationBuilder.CreateIndex(
                name: "IX_Notifications_UserId",
                table: "Notifications",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_OperationConsumingMaterials_BillOfMaterialDetailId",
                table: "OperationConsumingMaterials",
                column: "BillOfMaterialDetailId");

            migrationBuilder.CreateIndex(
                name: "IX_OperationConsumingMaterials_OperationSequenceId",
                table: "OperationConsumingMaterials",
                column: "OperationSequenceId");

            migrationBuilder.CreateIndex(
                name: "IX_Operations_OperationTypeId",
                table: "Operations",
                column: "OperationTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_OperationSequenceMachineTypeParameters_MachineTypeParameterId",
                table: "OperationSequenceMachineTypeParameters",
                column: "MachineTypeParameterId");

            migrationBuilder.CreateIndex(
                name: "IX_OperationSequenceMachineTypeParameters_OperationSequenceId",
                table: "OperationSequenceMachineTypeParameters",
                column: "OperationSequenceId");

            migrationBuilder.CreateIndex(
                name: "IX_OperationSequences_OperationId",
                table: "OperationSequences",
                column: "OperationId");

            migrationBuilder.CreateIndex(
                name: "IX_OperationSequences_WorkPlanStepId",
                table: "OperationSequences",
                column: "WorkPlanStepId");

            migrationBuilder.CreateIndex(
                name: "IX_OperationSequences_WorkStationId_OperationId",
                table: "OperationSequences",
                columns: new[] { "WorkStationId", "OperationId" });

            migrationBuilder.CreateIndex(
                name: "IX_OperationSequences_WorkStationPartId",
                table: "OperationSequences",
                column: "WorkStationPartId");

            migrationBuilder.CreateIndex(
                name: "IX_OrderDocuments_DocumentId",
                table: "OrderDocuments",
                column: "DocumentId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_OrderDocuments_UserId",
                table: "OrderDocuments",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_OrderItemSummaries_OrderItemId",
                table: "OrderItemSummaries",
                column: "OrderItemId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Orders_CustomerId",
                table: "Orders",
                column: "CustomerId");

            migrationBuilder.CreateIndex(
                name: "IX_Orders_OrderTypeId",
                table: "Orders",
                column: "OrderTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_OrganizationJobs_CreatorId",
                table: "OrganizationJobs",
                column: "CreatorId");

            migrationBuilder.CreateIndex(
                name: "IX_OrganizationJobs_OranizationPostId",
                table: "OrganizationJobs",
                column: "OranizationPostId");

            migrationBuilder.CreateIndex(
                name: "IX_OrganizationPostHistories_CreatorId",
                table: "OrganizationPostHistories",
                column: "CreatorId");

            migrationBuilder.CreateIndex(
                name: "IX_OrganizationPostHistories_EmployeeId",
                table: "OrganizationPostHistories",
                column: "EmployeeId");

            migrationBuilder.CreateIndex(
                name: "IX_OrganizationPostHistories_OrganizationPostId",
                table: "OrganizationPostHistories",
                column: "OrganizationPostId");

            migrationBuilder.CreateIndex(
                name: "IX_OrganizationPosts_CreatorId",
                table: "OrganizationPosts",
                column: "CreatorId");

            migrationBuilder.CreateIndex(
                name: "IX_OrganizationPosts_ParentId",
                table: "OrganizationPosts",
                column: "ParentId");

            migrationBuilder.CreateIndex(
                name: "IX_OrganizationPosts_UserGroupId",
                table: "OrganizationPosts",
                column: "UserGroupId",
                unique: true,
                filter: "[UserGroupId] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_PaymentSuggestStatusLogs_QualityControlId",
                table: "PaymentSuggestStatusLogs",
                column: "QualityControlId");

            migrationBuilder.CreateIndex(
                name: "IX_PaymentSuggestStatusLogs_RegisterarUserId",
                table: "PaymentSuggestStatusLogs",
                column: "RegisterarUserId");

            migrationBuilder.CreateIndex(
                name: "IX_PayRequests_FinancialTransactionBatchId",
                table: "PayRequests",
                column: "FinancialTransactionBatchId",
                unique: true,
                filter: "[FinancialTransactionBatchId] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_PayRequests_QualityControlId",
                table: "PayRequests",
                column: "QualityControlId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_PayRequests_UserId",
                table: "PayRequests",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_PermissionRequestActions_ConfirmationUserId",
                table: "PermissionRequestActions",
                column: "ConfirmationUserId");

            migrationBuilder.CreateIndex(
                name: "IX_PermissionRequestActions_PermissionRequestId",
                table: "PermissionRequestActions",
                column: "PermissionRequestId");

            migrationBuilder.CreateIndex(
                name: "IX_PermissionRequestActions_SecurityActionId",
                table: "PermissionRequestActions",
                column: "SecurityActionId");

            migrationBuilder.CreateIndex(
                name: "IX_PermissionRequests_IntendedUserId",
                table: "PermissionRequests",
                column: "IntendedUserId");

            migrationBuilder.CreateIndex(
                name: "IX_PermissionRequests_RegistrarUserId",
                table: "PermissionRequests",
                column: "RegistrarUserId");

            migrationBuilder.CreateIndex(
                name: "IX_Permissions_SecurityActionId",
                table: "Permissions",
                column: "SecurityActionId");

            migrationBuilder.CreateIndex(
                name: "IX_Permissions_UserGroupId",
                table: "Permissions",
                column: "UserGroupId");

            migrationBuilder.CreateIndex(
                name: "IX_Permissions_UserId",
                table: "Permissions",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_PlanCodes_RegisterarUserId",
                table: "PlanCodes",
                column: "RegisterarUserId");

            migrationBuilder.CreateIndex(
                name: "IX_Posts_PostId",
                table: "Posts",
                column: "PostId");

            migrationBuilder.CreateIndex(
                name: "IX_PriceAnnunciationItems_ConfirmerUserId",
                table: "PriceAnnunciationItems",
                column: "ConfirmerUserId");

            migrationBuilder.CreateIndex(
                name: "IX_PriceAnnunciationItems_CurrencyId",
                table: "PriceAnnunciationItems",
                column: "CurrencyId");

            migrationBuilder.CreateIndex(
                name: "IX_PriceAnnunciationItems_PriceAnnunciationId",
                table: "PriceAnnunciationItems",
                column: "PriceAnnunciationId");

            migrationBuilder.CreateIndex(
                name: "IX_PriceAnnunciationItems_StuffId",
                table: "PriceAnnunciationItems",
                column: "StuffId");

            migrationBuilder.CreateIndex(
                name: "IX_PriceAnnunciations_CooperatorId",
                table: "PriceAnnunciations",
                column: "CooperatorId");

            migrationBuilder.CreateIndex(
                name: "IX_PriceAnnunciations_RegisterarUserId",
                table: "PriceAnnunciations",
                column: "RegisterarUserId");

            migrationBuilder.CreateIndex(
                name: "IX_PriceInquiries_CooperatorId",
                table: "PriceInquiries",
                column: "CooperatorId");

            migrationBuilder.CreateIndex(
                name: "IX_PriceInquiries_CurrencyId",
                table: "PriceInquiries",
                column: "CurrencyId");

            migrationBuilder.CreateIndex(
                name: "IX_PriceInquiries_StuffId",
                table: "PriceInquiries",
                column: "StuffId");

            migrationBuilder.CreateIndex(
                name: "IX_PriceInquiries_UserId",
                table: "PriceInquiries",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_Printers_CreatorUserId",
                table: "Printers",
                column: "CreatorUserId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionFaultTypes_OperationId",
                table: "ProductionFaultTypes",
                column: "OperationId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionLineEmployeeIntervalDetails_OperationId",
                table: "ProductionLineEmployeeIntervalDetails",
                column: "OperationId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionLineEmployeeIntervalDetails_ProductionLineEmployeeIntervalId",
                table: "ProductionLineEmployeeIntervalDetails",
                column: "ProductionLineEmployeeIntervalId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionLineEmployeeIntervals_EmployeeId",
                table: "ProductionLineEmployeeIntervals",
                column: "EmployeeId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionLineEmployeeIntervals_ProductionLineId",
                table: "ProductionLineEmployeeIntervals",
                column: "ProductionLineId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionLineEmployeeIntervals_StuffId",
                table: "ProductionLineEmployeeIntervals",
                column: "StuffId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionLineProductionSteps_ProductionStepId",
                table: "ProductionLineProductionSteps",
                column: "ProductionStepId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionLineRepairUnits_UserId",
                table: "ProductionLineRepairUnits",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionLineRepairUnits_WarehouseId",
                table: "ProductionLineRepairUnits",
                column: "WarehouseId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionLines_AdminUserGroupId",
                table: "ProductionLines",
                column: "AdminUserGroupId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionLines_ConsumeWarehouseId",
                table: "ProductionLines",
                column: "ConsumeWarehouseId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionLines_DepartmentId",
                table: "ProductionLines",
                column: "DepartmentId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionLines_ProductionLineRepairUnitId",
                table: "ProductionLines",
                column: "ProductionLineRepairUnitId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionLines_ProductWarehouseId",
                table: "ProductionLines",
                column: "ProductWarehouseId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionLineWorkShifts_ProductionLineId",
                table: "ProductionLineWorkShifts",
                column: "ProductionLineId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionLineWorkShifts_WorkShiftId",
                table: "ProductionLineWorkShifts",
                column: "WorkShiftId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionMaterialRequestDetails_ProductionMaterialRequestId",
                table: "ProductionMaterialRequestDetails",
                column: "ProductionMaterialRequestId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionMaterialRequestDetails_ProductionOrderId",
                table: "ProductionMaterialRequestDetails",
                column: "ProductionOrderId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionOperationEmployees_EmployeeId",
                table: "ProductionOperationEmployees",
                column: "EmployeeId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionOperationEmployees_ProductionOperationEmployeeGroupId",
                table: "ProductionOperationEmployees",
                column: "ProductionOperationEmployeeGroupId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionOperations_FaildProductionOperationId",
                table: "ProductionOperations",
                column: "FaildProductionOperationId",
                unique: true,
                filter: "[FaildProductionOperationId] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionOperations_OperationId",
                table: "ProductionOperations",
                column: "OperationId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionOperations_ProductionId",
                table: "ProductionOperations",
                column: "ProductionId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionOperations_ProductionOperationEmployeeGroupId",
                table: "ProductionOperations",
                column: "ProductionOperationEmployeeGroupId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionOperations_ProductionOperatorId",
                table: "ProductionOperations",
                column: "ProductionOperatorId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionOperations_ProductionTerminalId",
                table: "ProductionOperations",
                column: "ProductionTerminalId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionOperations_TransactionBatchId",
                table: "ProductionOperations",
                column: "TransactionBatchId",
                unique: true,
                filter: "[TransactionBatchId] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionOperations_UserId",
                table: "ProductionOperations",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionOperatorEmployeeBans_EmployeeId",
                table: "ProductionOperatorEmployeeBans",
                column: "EmployeeId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionOperatorEmployeeBans_ProductionOperatorId",
                table: "ProductionOperatorEmployeeBans",
                column: "ProductionOperatorId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionOperatorEmployeeBans_RevokeUserId",
                table: "ProductionOperatorEmployeeBans",
                column: "RevokeUserId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionOperatorMachineEmployees_EmployeeId",
                table: "ProductionOperatorMachineEmployees",
                column: "EmployeeId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionOperatorMachineEmployees_MachineId",
                table: "ProductionOperatorMachineEmployees",
                column: "MachineId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionOperatorMachineEmployees_ProductionOperatorId",
                table: "ProductionOperatorMachineEmployees",
                column: "ProductionOperatorId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionOperatorMachineEmployees_ProductionTerminalId",
                table: "ProductionOperatorMachineEmployees",
                column: "ProductionTerminalId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionOperators_MachineTypeOperatorTypeId",
                table: "ProductionOperators",
                column: "MachineTypeOperatorTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionOperators_OperationId",
                table: "ProductionOperators",
                column: "OperationId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionOperators_OperationSequenceId",
                table: "ProductionOperators",
                column: "OperationSequenceId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionOperators_OperatorTypeId",
                table: "ProductionOperators",
                column: "OperatorTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionOperators_ProductionOrderId",
                table: "ProductionOperators",
                column: "ProductionOrderId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionOrderSummaries_ProductionOrderId",
                table: "ProductionOrderSummaries",
                column: "ProductionOrderId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ProductionPerformanceInfoes_ConfirmatorUserId",
                table: "ProductionPerformanceInfoes",
                column: "ConfirmatorUserId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionPerformanceInfoes_DepartmentId",
                table: "ProductionPerformanceInfoes",
                column: "DepartmentId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionPerformanceInfoes_ProductionOrderId",
                table: "ProductionPerformanceInfoes",
                column: "ProductionOrderId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionPerformanceInfoes_RegistratorUserId",
                table: "ProductionPerformanceInfoes",
                column: "RegistratorUserId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionPlanDetailLevels_ParentId",
                table: "ProductionPlanDetailLevels",
                column: "ParentId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionPlanDetailSummaries_ProductionPlanDetailId",
                table: "ProductionPlanDetailSummaries",
                column: "ProductionPlanDetailId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ProductionPlanSummaries_ProductionPlanId",
                table: "ProductionPlanSummaries",
                column: "ProductionPlanId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ProductionRequestSummaries_ProductionRequestId",
                table: "ProductionRequestSummaries",
                column: "ProductionRequestId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Productions_ProductionOrderId",
                table: "Productions",
                column: "ProductionOrderId");

            migrationBuilder.CreateIndex(
                name: "IX_Productions_StuffSerialCode_StuffSerialStuffId",
                table: "Productions",
                columns: new[] { "StuffSerialCode", "StuffSerialStuffId" });

            migrationBuilder.CreateIndex(
                name: "IX_Productions_UserId",
                table: "Productions",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionScheduleSummaries_ProductionScheduleId",
                table: "ProductionScheduleSummaries",
                column: "ProductionScheduleId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ProductionStuffDetails_ProductionId",
                table: "ProductionStuffDetails",
                column: "ProductionId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionStuffDetails_ProductionOperationId",
                table: "ProductionStuffDetails",
                column: "ProductionOperationId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionStuffDetails_StuffId",
                table: "ProductionStuffDetails",
                column: "StuffId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionStuffDetails_StuffSerialCode_StuffId",
                table: "ProductionStuffDetails",
                columns: new[] { "StuffSerialCode", "StuffId" });

            migrationBuilder.CreateIndex(
                name: "IX_ProductionStuffDetails_UnitId",
                table: "ProductionStuffDetails",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionStuffDetails_WarehouseId",
                table: "ProductionStuffDetails",
                column: "WarehouseId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionStuffDetails_RepairProductionStuffDetail_RepairProductionFaultId",
                table: "ProductionStuffDetails_RepairProductionStuffDetail",
                column: "RepairProductionFaultId");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionTerminals_EmployeeId",
                table: "ProductionTerminals",
                column: "EmployeeId",
                unique: true,
                filter: "[EmployeeId] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_ProductionTerminals_ProductionLineId",
                table: "ProductionTerminals",
                column: "ProductionLineId");

            migrationBuilder.CreateIndex(
                name: "IX_ProjectERPDocuments_ProjectERPDocumentTypeId",
                table: "ProjectERPDocuments",
                column: "ProjectERPDocumentTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_ProjectERPDocuments_ProjectERPId",
                table: "ProjectERPDocuments",
                column: "ProjectERPId");

            migrationBuilder.CreateIndex(
                name: "IX_ProjectERPDocuments_UserId",
                table: "ProjectERPDocuments",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_ProjectERPEventDocumentes_CreatorUserId",
                table: "ProjectERPEventDocumentes",
                column: "CreatorUserId");

            migrationBuilder.CreateIndex(
                name: "IX_ProjectERPEventDocumentes_ProjectERPEventId",
                table: "ProjectERPEventDocumentes",
                column: "ProjectERPEventId");

            migrationBuilder.CreateIndex(
                name: "IX_ProjectERPEvents_AudienceEmployeeId",
                table: "ProjectERPEvents",
                column: "AudienceEmployeeId");

            migrationBuilder.CreateIndex(
                name: "IX_ProjectERPEvents_ProjectERPEventActionTypeId",
                table: "ProjectERPEvents",
                column: "ProjectERPEventActionTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_ProjectERPEvents_ProjectERPEventCategoryId",
                table: "ProjectERPEvents",
                column: "ProjectERPEventCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_ProjectERPEvents_ProjectERPId",
                table: "ProjectERPEvents",
                column: "ProjectERPId");

            migrationBuilder.CreateIndex(
                name: "IX_ProjectERPEvents_RegisterUserId",
                table: "ProjectERPEvents",
                column: "RegisterUserId");

            migrationBuilder.CreateIndex(
                name: "IX_ProjectERPLabelLogs_ProjectERPLabelId",
                table: "ProjectERPLabelLogs",
                column: "ProjectERPLabelId");

            migrationBuilder.CreateIndex(
                name: "IX_ProjectERPResponsibleEmployees_ResponsibleEmployeeId",
                table: "ProjectERPResponsibleEmployees",
                column: "ResponsibleEmployeeId");

            migrationBuilder.CreateIndex(
                name: "IX_ProjectERPs_CreatorUserId",
                table: "ProjectERPs",
                column: "CreatorUserId");

            migrationBuilder.CreateIndex(
                name: "IX_ProjectERPs_CustomerId",
                table: "ProjectERPs",
                column: "CustomerId");

            migrationBuilder.CreateIndex(
                name: "IX_ProjectERPs_ProjectERPCategoryId",
                table: "ProjectERPs",
                column: "ProjectERPCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_ProjectERPs_ProjectERPPhaseId",
                table: "ProjectERPs",
                column: "ProjectERPPhaseId");

            migrationBuilder.CreateIndex(
                name: "IX_ProjectERPs_ProjectERPTypeId",
                table: "ProjectERPs",
                column: "ProjectERPTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_ProjectERPs_StuffId",
                table: "ProjectERPs",
                column: "StuffId");

            migrationBuilder.CreateIndex(
                name: "IX_ProjectERPTaskDependencies_PredecessorProjectERPTaskId",
                table: "ProjectERPTaskDependencies",
                column: "PredecessorProjectERPTaskId");

            migrationBuilder.CreateIndex(
                name: "IX_ProjectERPTaskDependencies_ProjectERPTaskId",
                table: "ProjectERPTaskDependencies",
                column: "ProjectERPTaskId");

            migrationBuilder.CreateIndex(
                name: "IX_ProjectERPTaskDocumentes_CreatorUserId",
                table: "ProjectERPTaskDocumentes",
                column: "CreatorUserId");

            migrationBuilder.CreateIndex(
                name: "IX_ProjectERPTaskDocumentes_ProjectERPTaskId",
                table: "ProjectERPTaskDocumentes",
                column: "ProjectERPTaskId");

            migrationBuilder.CreateIndex(
                name: "IX_ProjectERPTaskes_AssigneeEmployeeId",
                table: "ProjectERPTaskes",
                column: "AssigneeEmployeeId");

            migrationBuilder.CreateIndex(
                name: "IX_ProjectERPTaskes_CreatorUserId",
                table: "ProjectERPTaskes",
                column: "CreatorUserId");

            migrationBuilder.CreateIndex(
                name: "IX_ProjectERPTaskes_ProjectERPId",
                table: "ProjectERPTaskes",
                column: "ProjectERPId");

            migrationBuilder.CreateIndex(
                name: "IX_ProjectERPTaskes_ProjectERPTaskCategoryId",
                table: "ProjectERPTaskes",
                column: "ProjectERPTaskCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_ProjectERPTaskLabelLogs_ProjectERPLabelId",
                table: "ProjectERPTaskLabelLogs",
                column: "ProjectERPLabelId");

            migrationBuilder.CreateIndex(
                name: "IX_ProjectRelatedPeoples_ProjectId",
                table: "ProjectRelatedPeoples",
                column: "ProjectId");

            migrationBuilder.CreateIndex(
                name: "IX_ProposalQAReviews_ProposalId",
                table: "ProposalQAReviews",
                column: "ProposalId");

            migrationBuilder.CreateIndex(
                name: "IX_ProposalQAReviews_ResponsibleUserId",
                table: "ProposalQAReviews",
                column: "ResponsibleUserId");

            migrationBuilder.CreateIndex(
                name: "IX_ProposalQAReviews_UserId",
                table: "ProposalQAReviews",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_ProposalReviewCommittees_ProposalId",
                table: "ProposalReviewCommittees",
                column: "ProposalId");

            migrationBuilder.CreateIndex(
                name: "IX_ProposalReviewCommittees_ResponsibleUserId",
                table: "ProposalReviewCommittees",
                column: "ResponsibleUserId");

            migrationBuilder.CreateIndex(
                name: "IX_ProposalReviewCommittees_UserId",
                table: "ProposalReviewCommittees",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_Proposals_ProposalTypeId",
                table: "Proposals",
                column: "ProposalTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_Proposals_UserId",
                table: "Proposals",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_Proposals_UserId1",
                table: "Proposals",
                column: "UserId1");

            migrationBuilder.CreateIndex(
                name: "IX_ProposalTypes_UserId",
                table: "ProposalTypes",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_ProviderHowToBuys_HowToBuyId",
                table: "ProviderHowToBuys",
                column: "HowToBuyId");

            migrationBuilder.CreateIndex(
                name: "IX_ProvisionersCartItemDetails_ProviderId",
                table: "ProvisionersCartItemDetails",
                column: "ProviderId");

            migrationBuilder.CreateIndex(
                name: "IX_ProvisionersCartItemDetails_ProvisionersCartItemId",
                table: "ProvisionersCartItemDetails",
                column: "ProvisionersCartItemId");

            migrationBuilder.CreateIndex(
                name: "IX_ProvisionersCartItemDetails_PurchaseOrderId",
                table: "ProvisionersCartItemDetails",
                column: "PurchaseOrderId",
                unique: true,
                filter: "[PurchaseOrderId] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_ProvisionersCartItems_ProviderId",
                table: "ProvisionersCartItems",
                column: "ProviderId");

            migrationBuilder.CreateIndex(
                name: "IX_ProvisionersCartItems_ProvisionersCartId",
                table: "ProvisionersCartItems",
                column: "ProvisionersCartId");

            migrationBuilder.CreateIndex(
                name: "IX_ProvisionersCartItems_PurchaseRequestId",
                table: "ProvisionersCartItems",
                column: "PurchaseRequestId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ProvisionersCarts_ResponsibleEmployeeId",
                table: "ProvisionersCarts",
                column: "ResponsibleEmployeeId");

            migrationBuilder.CreateIndex(
                name: "IX_ProvisionersCarts_SupplierId",
                table: "ProvisionersCarts",
                column: "SupplierId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseOrderCosts_FinancialDocumentCostId",
                table: "PurchaseOrderCosts",
                column: "FinancialDocumentCostId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseOrderCosts_PurchaseOrderGroupId",
                table: "PurchaseOrderCosts",
                column: "PurchaseOrderGroupId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseOrderCosts_PurchaseOrderId",
                table: "PurchaseOrderCosts",
                column: "PurchaseOrderId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseOrderDetailSummaries_PurchaseOrderDetailId",
                table: "PurchaseOrderDetailSummaries",
                column: "PurchaseOrderDetailId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseOrderDiscounts_FinancialDocumentDiscountId",
                table: "PurchaseOrderDiscounts",
                column: "FinancialDocumentDiscountId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseOrderDiscounts_PurchaseOrderGroupId",
                table: "PurchaseOrderDiscounts",
                column: "PurchaseOrderGroupId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseOrderDiscounts_PurchaseOrderId",
                table: "PurchaseOrderDiscounts",
                column: "PurchaseOrderId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseOrderStepDetails_PurchaseOrderId",
                table: "PurchaseOrderStepDetails",
                column: "PurchaseOrderId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseOrderStepDetails_PurchaseOrderStepId",
                table: "PurchaseOrderStepDetails",
                column: "PurchaseOrderStepId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseOrderStepDetails_UserId",
                table: "PurchaseOrderStepDetails",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseOrderSteps_UserId",
                table: "PurchaseOrderSteps",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseOrderSummaries_PurchaseOrderId",
                table: "PurchaseOrderSummaries",
                column: "PurchaseOrderId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseRequestEditLog_PurchaseRequestId",
                table: "PurchaseRequestEditLog",
                column: "PurchaseRequestId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseRequestEditLog_UserId",
                table: "PurchaseRequestEditLog",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseRequestStepDetails_PurchaseRequestId",
                table: "PurchaseRequestStepDetails",
                column: "PurchaseRequestId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseRequestStepDetails_PurchaseRequestStepId",
                table: "PurchaseRequestStepDetails",
                column: "PurchaseRequestStepId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseRequestStepDetails_UserId",
                table: "PurchaseRequestStepDetails",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseRequestSteps_UserId",
                table: "PurchaseRequestSteps",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_PurchaseRequestSummaries_PurchaseRequestId",
                table: "PurchaseRequestSummaries",
                column: "PurchaseRequestId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_QAReviewEmployeeComplain_ActionResponsibleUserId",
                table: "QAReviewEmployeeComplain",
                column: "ActionResponsibleUserId");

            migrationBuilder.CreateIndex(
                name: "IX_QAReviewEmployeeComplain_CreatorUserId",
                table: "QAReviewEmployeeComplain",
                column: "CreatorUserId");

            migrationBuilder.CreateIndex(
                name: "IX_QAReviewEmployeeComplain_EmployeeComplainItemId",
                table: "QAReviewEmployeeComplain",
                column: "EmployeeComplainItemId");

            migrationBuilder.CreateIndex(
                name: "IX_QualityControlAccepters_UserGroupId",
                table: "QualityControlAccepters",
                column: "UserGroupId");

            migrationBuilder.CreateIndex(
                name: "IX_QualityControlConfirmationTestItems_QualityControlConfirmationTestId",
                table: "QualityControlConfirmationTestItems",
                column: "QualityControlConfirmationTestId");

            migrationBuilder.CreateIndex(
                name: "IX_QualityControlConfirmationTestItems_TesterUserId",
                table: "QualityControlConfirmationTestItems",
                column: "TesterUserId");

            migrationBuilder.CreateIndex(
                name: "IX_QualityControlConfirmationTests_QualityControlConfirmationId",
                table: "QualityControlConfirmationTests",
                column: "QualityControlConfirmationId");

            migrationBuilder.CreateIndex(
                name: "IX_QualityControlConfirmationTests_StuffId_QualityControlTestId",
                table: "QualityControlConfirmationTests",
                columns: new[] { "StuffId", "QualityControlTestId" });

            migrationBuilder.CreateIndex(
                name: "IX_QualityControlConfirmationTests_TestConditionId",
                table: "QualityControlConfirmationTests",
                column: "TestConditionId");

            migrationBuilder.CreateIndex(
                name: "IX_QualityControlConfirmationTests_UserId",
                table: "QualityControlConfirmationTests",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_QualityControlSamples_QualityControlItemId",
                table: "QualityControlSamples",
                column: "QualityControlItemId");

            migrationBuilder.CreateIndex(
                name: "IX_QualityControlSamples_StatusChangerUserId",
                table: "QualityControlSamples",
                column: "StatusChangerUserId");

            migrationBuilder.CreateIndex(
                name: "IX_QualityControlSamples_UserId",
                table: "QualityControlSamples",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_QualityControlSummaries_QualityControlId",
                table: "QualityControlSummaries",
                column: "QualityControlId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_QualityControlTestConditions_QualityControlTestId",
                table: "QualityControlTestConditions",
                column: "QualityControlTestId");

            migrationBuilder.CreateIndex(
                name: "IX_QualityControlTestEquipments_QualityControlTestId",
                table: "QualityControlTestEquipments",
                column: "QualityControlTestId");

            migrationBuilder.CreateIndex(
                name: "IX_QualityControlTestImportanceDegrees_QualityControlTestId",
                table: "QualityControlTestImportanceDegrees",
                column: "QualityControlTestId");

            migrationBuilder.CreateIndex(
                name: "IX_QualityControlTestOperations_QualityControlTestId",
                table: "QualityControlTestOperations",
                column: "QualityControlTestId");

            migrationBuilder.CreateIndex(
                name: "IX_RepairProductions_ProductionId",
                table: "RepairProductions",
                column: "ProductionId");

            migrationBuilder.CreateIndex(
                name: "IX_RepairProductions_ReferenceRepairProductionId",
                table: "RepairProductions",
                column: "ReferenceRepairProductionId",
                unique: true,
                filter: "[ReferenceRepairProductionId] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_RepairProductions_ReturnOfSaleId",
                table: "RepairProductions",
                column: "ReturnOfSaleId");

            migrationBuilder.CreateIndex(
                name: "IX_RepairProductions_UserId",
                table: "RepairProductions",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_ReportPrintSettings_PrinterId",
                table: "ReportPrintSettings",
                column: "PrinterId");

            migrationBuilder.CreateIndex(
                name: "IX_ReportPrintSettings_ReportId",
                table: "ReportPrintSettings",
                column: "ReportId");

            migrationBuilder.CreateIndex(
                name: "IX_ReportPrintSettings_UserId",
                table: "ReportPrintSettings",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_ReportVersions_CreatorUserId",
                table: "ReportVersions",
                column: "CreatorUserId");

            migrationBuilder.CreateIndex(
                name: "IX_ReportVersions_ReportId",
                table: "ReportVersions",
                column: "ReportId");

            migrationBuilder.CreateIndex(
                name: "IX_ResponsibleDepartment_EmployeeComplainDepartmentId",
                table: "ResponsibleDepartment",
                column: "EmployeeComplainDepartmentId");

            migrationBuilder.CreateIndex(
                name: "IX_ReturnOfSaleSummaries_ReturnOfSaleId",
                table: "ReturnOfSaleSummaries",
                column: "ReturnOfSaleId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ReturnSerialToPreviousStateRequests_ConfirmerUserId",
                table: "ReturnSerialToPreviousStateRequests",
                column: "ConfirmerUserId");

            migrationBuilder.CreateIndex(
                name: "IX_ReturnSerialToPreviousStateRequests_StuffSerialCode_StuffId",
                table: "ReturnSerialToPreviousStateRequests",
                columns: new[] { "StuffSerialCode", "StuffId" });

            migrationBuilder.CreateIndex(
                name: "IX_ReturnSerialToPreviousStateRequests_UserId",
                table: "ReturnSerialToPreviousStateRequests",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_ReturnSerialToPreviousStateRequests_WrongDoerUserId",
                table: "ReturnSerialToPreviousStateRequests",
                column: "WrongDoerUserId");

            migrationBuilder.CreateIndex(
                name: "IX_RialRates_FinancialTransactionId",
                table: "RialRates",
                column: "FinancialTransactionId");

            migrationBuilder.CreateIndex(
                name: "IX_RialRates_ReferenceRialRateId",
                table: "RialRates",
                column: "ReferenceRialRateId");

            migrationBuilder.CreateIndex(
                name: "IX_RiskResolves_CreatorUserId",
                table: "RiskResolves",
                column: "CreatorUserId");

            migrationBuilder.CreateIndex(
                name: "IX_RiskResolves_ReviewerUserId",
                table: "RiskResolves",
                column: "ReviewerUserId");

            migrationBuilder.CreateIndex(
                name: "IX_RiskResolves_RiskId",
                table: "RiskResolves",
                column: "RiskId");

            migrationBuilder.CreateIndex(
                name: "IX_Risks_CargoItemId",
                table: "Risks",
                column: "CargoItemId");

            migrationBuilder.CreateIndex(
                name: "IX_Risks_CreatorUserId",
                table: "Risks",
                column: "CreatorUserId");

            migrationBuilder.CreateIndex(
                name: "IX_Risks_LatestRiskResolveId",
                table: "Risks",
                column: "LatestRiskResolveId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Risks_LatestRiskStatusId",
                table: "Risks",
                column: "LatestRiskStatusId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Risks_PurchaseOrderId",
                table: "Risks",
                column: "PurchaseOrderId");

            migrationBuilder.CreateIndex(
                name: "IX_Risks_PurchaseRequestId",
                table: "Risks",
                column: "PurchaseRequestId");

            migrationBuilder.CreateIndex(
                name: "IX_RiskStatuses_OccurrenceSeverityStatus_OccurrenceProbabilityStatus",
                table: "RiskStatuses",
                columns: new[] { "OccurrenceSeverityStatus", "OccurrenceProbabilityStatus" });

            migrationBuilder.CreateIndex(
                name: "IX_RiskStatuses_RiskId",
                table: "RiskStatuses",
                column: "RiskId");

            migrationBuilder.CreateIndex(
                name: "IX_RiskStatuses_RiskResolveId",
                table: "RiskStatuses",
                column: "RiskResolveId",
                unique: true,
                filter: "[RiskResolveId] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_RiskStatuses_UserId",
                table: "RiskStatuses",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_ScrumEntities_BaseEntityId",
                table: "ScrumEntities",
                column: "BaseEntityId");

            migrationBuilder.CreateIndex(
                name: "IX_ScrumEntities_DepartmentId",
                table: "ScrumEntities",
                column: "DepartmentId");

            migrationBuilder.CreateIndex(
                name: "IX_ScrumEntities_ProjectHeader_OwnerCustomerId",
                table: "ScrumEntities_ProjectHeader",
                column: "OwnerCustomerId");

            migrationBuilder.CreateIndex(
                name: "IX_ScrumEntities_ScrumBackLog_ScrumSprintId",
                table: "ScrumEntities_ScrumBackLog",
                column: "ScrumSprintId");

            migrationBuilder.CreateIndex(
                name: "IX_ScrumEntities_ScrumProject_ScrumProjectGroupId",
                table: "ScrumEntities_ScrumProject",
                column: "ScrumProjectGroupId");

            migrationBuilder.CreateIndex(
                name: "IX_ScrumEntities_ScrumSprint_ScrumProjectId",
                table: "ScrumEntities_ScrumSprint",
                column: "ScrumProjectId");

            migrationBuilder.CreateIndex(
                name: "IX_ScrumEntities_ScrumTask_ScrumBackLogId",
                table: "ScrumEntities_ScrumTask",
                column: "ScrumBackLogId");

            migrationBuilder.CreateIndex(
                name: "IX_ScrumEntities_ScrumTask_ScrumTaskTypeId",
                table: "ScrumEntities_ScrumTask",
                column: "ScrumTaskTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_ScrumEntities_ScrumTask_UserId",
                table: "ScrumEntities_ScrumTask",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_ScrumEntityComments_ScrumEntityId",
                table: "ScrumEntityComments",
                column: "ScrumEntityId");

            migrationBuilder.CreateIndex(
                name: "IX_ScrumEntityComments_UserId",
                table: "ScrumEntityComments",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_ScrumEntityDependencies_NextScrumEntityId",
                table: "ScrumEntityDependencies",
                column: "NextScrumEntityId");

            migrationBuilder.CreateIndex(
                name: "IX_ScrumEntityDocuments_DocumentTypeId",
                table: "ScrumEntityDocuments",
                column: "DocumentTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_ScrumEntityDocuments_ScrumEntityId",
                table: "ScrumEntityDocuments",
                column: "ScrumEntityId");

            migrationBuilder.CreateIndex(
                name: "IX_ScrumEntityLogs_ScrumEntityId",
                table: "ScrumEntityLogs",
                column: "ScrumEntityId");

            migrationBuilder.CreateIndex(
                name: "IX_ScrumEntityLogs_UserId",
                table: "ScrumEntityLogs",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_SecurityActions_SecurityActionGroupId",
                table: "SecurityActions",
                column: "SecurityActionGroupId");

            migrationBuilder.CreateIndex(
                name: "IX_SendPermissionSummaries_SendPermissionId",
                table: "SendPermissionSummaries",
                column: "SendPermissionId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_SerialBuffers_BaseTransactionId",
                table: "SerialBuffers",
                column: "BaseTransactionId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_SerialBuffers_ProductionTerminalId",
                table: "SerialBuffers",
                column: "ProductionTerminalId");

            migrationBuilder.CreateIndex(
                name: "IX_SerialFailedOperationFaultOperationEmployees_ProductionOperationEmployeeId",
                table: "SerialFailedOperationFaultOperationEmployees",
                column: "ProductionOperationEmployeeId");

            migrationBuilder.CreateIndex(
                name: "IX_SerialFailedOperationFaultOperationEmployees_ProductionOperatorEmployeeBanId",
                table: "SerialFailedOperationFaultOperationEmployees",
                column: "ProductionOperatorEmployeeBanId");

            migrationBuilder.CreateIndex(
                name: "IX_SerialFailedOperationFaultOperations_OperationId",
                table: "SerialFailedOperationFaultOperations",
                column: "OperationId");

            migrationBuilder.CreateIndex(
                name: "IX_SerialFailedOperationFaultOperations_SerialFailedOperationId",
                table: "SerialFailedOperationFaultOperations",
                column: "SerialFailedOperationId");

            migrationBuilder.CreateIndex(
                name: "IX_SerialFailedOperations_ConfirmUserId",
                table: "SerialFailedOperations",
                column: "ConfirmUserId");

            migrationBuilder.CreateIndex(
                name: "IX_SerialFailedOperations_ProductionOperationId",
                table: "SerialFailedOperations",
                column: "ProductionOperationId");

            migrationBuilder.CreateIndex(
                name: "IX_SerialFailedOperations_ProductionOrderId",
                table: "SerialFailedOperations",
                column: "ProductionOrderId");

            migrationBuilder.CreateIndex(
                name: "IX_SerialFailedOperations_RepairProductionId",
                table: "SerialFailedOperations",
                column: "RepairProductionId");

            migrationBuilder.CreateIndex(
                name: "IX_SerialFailedOperations_ReviewerUserId",
                table: "SerialFailedOperations",
                column: "ReviewerUserId");

            migrationBuilder.CreateIndex(
                name: "IX_SerialProfiles_CooperatorId",
                table: "SerialProfiles",
                column: "CooperatorId");

            migrationBuilder.CreateIndex(
                name: "IX_SerialProfiles_StuffId",
                table: "SerialProfiles",
                column: "StuffId");

            migrationBuilder.CreateIndex(
                name: "IX_SerialProfiles_UserId",
                table: "SerialProfiles",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_SerialProfiles_ProductionSerialProfile_StuffId",
                table: "SerialProfiles_ProductionSerialProfile",
                column: "StuffId");

            migrationBuilder.CreateIndex(
                name: "IX_SerialProfiles_StoreReceiptSerialProfile_StoreReceiptId",
                table: "SerialProfiles_StoreReceiptSerialProfile",
                column: "StoreReceiptId",
                unique: true,
                filter: "[StoreReceiptId] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_SerialProfiles_StoreReceiptSerialProfile_StuffId",
                table: "SerialProfiles_StoreReceiptSerialProfile",
                column: "StuffId");

            migrationBuilder.CreateIndex(
                name: "IX_SoftwareWorkReportItems_SoftwareWorkReportId",
                table: "SoftwareWorkReportItems",
                column: "SoftwareWorkReportId");

            migrationBuilder.CreateIndex(
                name: "IX_SoftwareWorkReports_EmployeeId",
                table: "SoftwareWorkReports",
                column: "EmployeeId");

            migrationBuilder.CreateIndex(
                name: "IX_StockCheckingPersons_UserId",
                table: "StockCheckingPersons",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_StockCheckings_ActiveTagTypeId",
                table: "StockCheckings",
                column: "ActiveTagTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_StockCheckings_UserId",
                table: "StockCheckings",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_StockCheckingStuffs_StuffId",
                table: "StockCheckingStuffs",
                column: "StuffId");

            migrationBuilder.CreateIndex(
                name: "IX_StockCheckingTags_StockCheckingId_WarehouseId",
                table: "StockCheckingTags",
                columns: new[] { "StockCheckingId", "WarehouseId" });

            migrationBuilder.CreateIndex(
                name: "IX_StockCheckingTags_StuffId",
                table: "StockCheckingTags",
                column: "StuffId");

            migrationBuilder.CreateIndex(
                name: "IX_StockCheckingTags_StuffSerialCode_StuffId",
                table: "StockCheckingTags",
                columns: new[] { "StuffSerialCode", "StuffId" });

            migrationBuilder.CreateIndex(
                name: "IX_StockCheckingTags_TagTypeId",
                table: "StockCheckingTags",
                column: "TagTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_StockCheckingTags_UnitId",
                table: "StockCheckingTags",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_StockCheckingWarehouses_WarehouseId",
                table: "StockCheckingWarehouses",
                column: "WarehouseId");

            migrationBuilder.CreateIndex(
                name: "IX_StockPlaces_WarehouseId",
                table: "StockPlaces",
                column: "WarehouseId");

            migrationBuilder.CreateIndex(
                name: "IX_StoreReceiptDeleteRequestConfirmationLogs_ConfirmerUserId",
                table: "StoreReceiptDeleteRequestConfirmationLogs",
                column: "ConfirmerUserId");

            migrationBuilder.CreateIndex(
                name: "IX_StoreReceiptDeleteRequestConfirmationLogs_StoreReceiptDeleteRequestId",
                table: "StoreReceiptDeleteRequestConfirmationLogs",
                column: "StoreReceiptDeleteRequestId");

            migrationBuilder.CreateIndex(
                name: "IX_StoreReceiptDeleteRequests_StoreReceiptId",
                table: "StoreReceiptDeleteRequests",
                column: "StoreReceiptId");

            migrationBuilder.CreateIndex(
                name: "IX_StoreReceiptDeleteRequests_UserId",
                table: "StoreReceiptDeleteRequests",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_StoreReceiptDeleteRequestStuffSerials_StoreReceiptDeleteRequestId",
                table: "StoreReceiptDeleteRequestStuffSerials",
                column: "StoreReceiptDeleteRequestId");

            migrationBuilder.CreateIndex(
                name: "IX_StoreReceiptDeleteRequestStuffSerials_StuffSerialCode_StuffSerialId",
                table: "StoreReceiptDeleteRequestStuffSerials",
                columns: new[] { "StuffSerialCode", "StuffSerialId" });

            migrationBuilder.CreateIndex(
                name: "IX_StoreReceiptDeleteRequestStuffSerials_UnitId",
                table: "StoreReceiptDeleteRequestStuffSerials",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_StoreReceiptSummaries_StoreReceiptId",
                table: "StoreReceiptSummaries",
                column: "StoreReceiptId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StuffBasePriceCustoms_CurrencyId",
                table: "StuffBasePriceCustoms",
                column: "CurrencyId");

            migrationBuilder.CreateIndex(
                name: "IX_StuffBasePriceCustoms_HowToBuyId",
                table: "StuffBasePriceCustoms",
                column: "HowToBuyId");

            migrationBuilder.CreateIndex(
                name: "IX_StuffBasePriceCustoms_StuffBasePriceId",
                table: "StuffBasePriceCustoms",
                column: "StuffBasePriceId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StuffBasePriceTransports_StuffBasePriceId",
                table: "StuffBasePriceTransports",
                column: "StuffBasePriceId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StuffCategories_DefaultWarehouseId",
                table: "StuffCategories",
                column: "DefaultWarehouseId");

            migrationBuilder.CreateIndex(
                name: "IX_StuffCategories_ParentStuffCategoryId",
                table: "StuffCategories",
                column: "ParentStuffCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_StuffDefinitionRequests_ConfirmerUserId",
                table: "StuffDefinitionRequests",
                column: "ConfirmerUserId");

            migrationBuilder.CreateIndex(
                name: "IX_StuffDefinitionRequests_StuffId",
                table: "StuffDefinitionRequests",
                column: "StuffId");

            migrationBuilder.CreateIndex(
                name: "IX_StuffDefinitionRequests_StuffPurchaseCategoryId",
                table: "StuffDefinitionRequests",
                column: "StuffPurchaseCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_StuffDefinitionRequests_UnitTypeId",
                table: "StuffDefinitionRequests",
                column: "UnitTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_StuffDefinitionRequests_UserId",
                table: "StuffDefinitionRequests",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_StuffDocuments_StuffId",
                table: "StuffDocuments",
                column: "StuffId");

            migrationBuilder.CreateIndex(
                name: "IX_StuffDocuments_UserId",
                table: "StuffDocuments",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_StuffFractionTemporaryStuffs_StuffId",
                table: "StuffFractionTemporaryStuffs",
                column: "StuffId");

            migrationBuilder.CreateIndex(
                name: "IX_StuffFractionTemporaryStuffs_UserId",
                table: "StuffFractionTemporaryStuffs",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_StuffPriceDiscrepancies_ConfirmerUserId",
                table: "StuffPriceDiscrepancies",
                column: "ConfirmerUserId");

            migrationBuilder.CreateIndex(
                name: "IX_StuffPriceDiscrepancies_CurrentStuffBasePriceCurrencyId",
                table: "StuffPriceDiscrepancies",
                column: "CurrentStuffBasePriceCurrencyId");

            migrationBuilder.CreateIndex(
                name: "IX_StuffPriceDiscrepancies_PurchaseOrderId",
                table: "StuffPriceDiscrepancies",
                column: "PurchaseOrderId");

            migrationBuilder.CreateIndex(
                name: "IX_StuffProductionFaultTypes_StuffId",
                table: "StuffProductionFaultTypes",
                column: "StuffId");

            migrationBuilder.CreateIndex(
                name: "IX_StuffProviders_ProviderId",
                table: "StuffProviders",
                column: "ProviderId");

            migrationBuilder.CreateIndex(
                name: "IX_StuffPurchaseCategories_QualityControlDepartmentId",
                table: "StuffPurchaseCategories",
                column: "QualityControlDepartmentId");

            migrationBuilder.CreateIndex(
                name: "IX_StuffPurchaseCategories_QualityControlUserGroupId",
                table: "StuffPurchaseCategories",
                column: "QualityControlUserGroupId");

            migrationBuilder.CreateIndex(
                name: "IX_StuffPurchaseCategories_StuffDefinitionConfirmerUserGroupId",
                table: "StuffPurchaseCategories",
                column: "StuffDefinitionConfirmerUserGroupId");

            migrationBuilder.CreateIndex(
                name: "IX_StuffPurchaseCategories_StuffDefinitionUserGroupId",
                table: "StuffPurchaseCategories",
                column: "StuffDefinitionUserGroupId");

            migrationBuilder.CreateIndex(
                name: "IX_StuffPurchaseCategoryDetails_ApplicatorConfirmerUserGroupId",
                table: "StuffPurchaseCategoryDetails",
                column: "ApplicatorConfirmerUserGroupId");

            migrationBuilder.CreateIndex(
                name: "IX_StuffPurchaseCategoryDetails_ApplicatorUserGroupId",
                table: "StuffPurchaseCategoryDetails",
                column: "ApplicatorUserGroupId");

            migrationBuilder.CreateIndex(
                name: "IX_StuffPurchaseCategoryDetails_RequestConfirmerUserGroupId",
                table: "StuffPurchaseCategoryDetails",
                column: "RequestConfirmerUserGroupId");

            migrationBuilder.CreateIndex(
                name: "IX_StuffPurchaseCategoryDetails_StuffPurchaseCategoryId",
                table: "StuffPurchaseCategoryDetails",
                column: "StuffPurchaseCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_StuffQualityControlObservations_RegisterarUserId",
                table: "StuffQualityControlObservations",
                column: "RegisterarUserId");

            migrationBuilder.CreateIndex(
                name: "IX_StuffQualityControlObservations_StuffId",
                table: "StuffQualityControlObservations",
                column: "StuffId");

            migrationBuilder.CreateIndex(
                name: "IX_StuffQualityControlTestConditions_QualityControlConditionTestConditionId_QualityControlTestConditionQualityControlTestId",
                table: "StuffQualityControlTestConditions",
                columns: new[] { "QualityControlConditionTestConditionId", "QualityControlTestConditionQualityControlTestId" });

            migrationBuilder.CreateIndex(
                name: "IX_StuffQualityControlTestConditions_QualityControlTestUnitId",
                table: "StuffQualityControlTestConditions",
                column: "QualityControlTestUnitId");

            migrationBuilder.CreateIndex(
                name: "IX_StuffQualityControlTestEquipments_QualityControlEquipmentTestEquipmentId_QualityControlTestEquipmentQualityControlTestId",
                table: "StuffQualityControlTestEquipments",
                columns: new[] { "QualityControlEquipmentTestEquipmentId", "QualityControlTestEquipmentQualityControlTestId" });

            migrationBuilder.CreateIndex(
                name: "IX_StuffQualityControlTestImportanceDegrees_QualityControlImportanceDegreeTestImportanceDegreeId_QualityControlTestImportanceDe~",
                table: "StuffQualityControlTestImportanceDegrees",
                columns: new[] { "QualityControlImportanceDegreeTestImportanceDegreeId", "QualityControlTestImportanceDegreeQualityControlTestId" });

            migrationBuilder.CreateIndex(
                name: "IX_StuffQualityControlTestOperations_QualityControlOperationTestOperationId_QualityControlTestOperationQualityControlTestId",
                table: "StuffQualityControlTestOperations",
                columns: new[] { "QualityControlOperationTestOperationId", "QualityControlTestOperationQualityControlTestId" });

            migrationBuilder.CreateIndex(
                name: "IX_StuffQualityControlTests_QualityControlTestConditionTestConditionId_QualityControlTestConditionQualityControlTestId",
                table: "StuffQualityControlTests",
                columns: new[] { "QualityControlTestConditionTestConditionId", "QualityControlTestConditionQualityControlTestId" });

            migrationBuilder.CreateIndex(
                name: "IX_StuffQualityControlTests_QualityControlTestEquipmentTestEquipmentId_QualityControlTestEquipmentQualityControlTestId",
                table: "StuffQualityControlTests",
                columns: new[] { "QualityControlTestEquipmentTestEquipmentId", "QualityControlTestEquipmentQualityControlTestId" });

            migrationBuilder.CreateIndex(
                name: "IX_StuffQualityControlTests_QualityControlTestId",
                table: "StuffQualityControlTests",
                column: "QualityControlTestId");

            migrationBuilder.CreateIndex(
                name: "IX_StuffQualityControlTests_QualityControlTestImportanceDegreeTestImportanceDegreeId_QualityControlTestImportanceDegreeQualityC~",
                table: "StuffQualityControlTests",
                columns: new[] { "QualityControlTestImportanceDegreeTestImportanceDegreeId", "QualityControlTestImportanceDegreeQualityControlTestId" });

            migrationBuilder.CreateIndex(
                name: "IX_StuffQualityControlTests_QualityControlTestOperationTestOperationId_QualityControlTestOperationQualityControlTestId",
                table: "StuffQualityControlTests",
                columns: new[] { "QualityControlTestOperationTestOperationId", "QualityControlTestOperationQualityControlTestId" });

            migrationBuilder.CreateIndex(
                name: "IX_StuffRequestMilestoneDetailSummaries_StuffRequestMilestoneDetailId",
                table: "StuffRequestMilestoneDetailSummaries",
                column: "StuffRequestMilestoneDetailId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Stuffs_ProjectHeaderId",
                table: "Stuffs",
                column: "ProjectHeaderId",
                unique: true,
                filter: "[ProjectHeaderId] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_Stuffs_QualityControlDepartmentId",
                table: "Stuffs",
                column: "QualityControlDepartmentId");

            migrationBuilder.CreateIndex(
                name: "IX_Stuffs_QualityControlEmployeeId",
                table: "Stuffs",
                column: "QualityControlEmployeeId");

            migrationBuilder.CreateIndex(
                name: "IX_Stuffs_StuffCategoryId",
                table: "Stuffs",
                column: "StuffCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_Stuffs_StuffDefinitionRequestId",
                table: "Stuffs",
                column: "StuffDefinitionRequestId",
                unique: true,
                filter: "[StuffDefinitionRequestId] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_Stuffs_StuffHSGroupId",
                table: "Stuffs",
                column: "StuffHSGroupId");

            migrationBuilder.CreateIndex(
                name: "IX_Stuffs_StuffPurchaseCategoryId",
                table: "Stuffs",
                column: "StuffPurchaseCategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_Stuffs_UnitTypeId",
                table: "Stuffs",
                column: "UnitTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_StuffSerials_BillOfMaterialVersion_StuffId",
                table: "StuffSerials",
                columns: new[] { "BillOfMaterialVersion", "StuffId" });

            migrationBuilder.CreateIndex(
                name: "IX_StuffSerials_InitUnitId",
                table: "StuffSerials",
                column: "InitUnitId");

            migrationBuilder.CreateIndex(
                name: "IX_StuffSerials_IssueConfirmerUserId",
                table: "StuffSerials",
                column: "IssueConfirmerUserId");

            migrationBuilder.CreateIndex(
                name: "IX_StuffSerials_IssueUserId",
                table: "StuffSerials",
                column: "IssueUserId");

            migrationBuilder.CreateIndex(
                name: "IX_StuffSerials_LastModifiedUserId",
                table: "StuffSerials",
                column: "LastModifiedUserId");

            migrationBuilder.CreateIndex(
                name: "IX_StuffSerials_PartitionStuffSerialId",
                table: "StuffSerials",
                column: "PartitionStuffSerialId");

            migrationBuilder.CreateIndex(
                name: "IX_StuffSerials_ProductionOrderId",
                table: "StuffSerials",
                column: "ProductionOrderId");

            migrationBuilder.CreateIndex(
                name: "IX_StuffSerials_SerialProfileCode_StuffId",
                table: "StuffSerials",
                columns: new[] { "SerialProfileCode", "StuffId" });

            migrationBuilder.CreateIndex(
                name: "IX_StuffSerials_StuffId",
                table: "StuffSerials",
                column: "StuffId");

            migrationBuilder.CreateIndex(
                name: "IX_StuffStockPlaces_StockPlaceId",
                table: "StuffStockPlaces",
                column: "StockPlaceId");

            migrationBuilder.CreateIndex(
                name: "IX_Suppliers_EmployeeId",
                table: "Suppliers",
                column: "EmployeeId",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_SuppliesPurchaserUsers_PurchaserUserId",
                table: "SuppliesPurchaserUsers",
                column: "PurchaserUserId");

            migrationBuilder.CreateIndex(
                name: "IX_SuppliesPurchaserUsers_StuffId",
                table: "SuppliesPurchaserUsers",
                column: "StuffId");

            migrationBuilder.CreateIndex(
                name: "IX_TagCountings_StockCheckingTagId",
                table: "TagCountings",
                column: "StockCheckingTagId");

            migrationBuilder.CreateIndex(
                name: "IX_TagCountings_UnitId",
                table: "TagCountings",
                column: "UnitId");

            migrationBuilder.CreateIndex(
                name: "IX_TagCountings_UserId",
                table: "TagCountings",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_TestConditions_UserId",
                table: "TestConditions",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_TicketComments_TicketSoftwareId",
                table: "TicketComments",
                column: "TicketSoftwareId");

            migrationBuilder.CreateIndex(
                name: "IX_TicketComments_UserId",
                table: "TicketComments",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_TicketFiles_TicketSoftWareId",
                table: "TicketFiles",
                column: "TicketSoftWareId");

            migrationBuilder.CreateIndex(
                name: "IX_TicketFiles_UserId",
                table: "TicketFiles",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_TicketSoftwares_LastedEditorUserId",
                table: "TicketSoftwares",
                column: "LastedEditorUserId");

            migrationBuilder.CreateIndex(
                name: "IX_TicketSoftwares_UserId",
                table: "TicketSoftwares",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_TransactionBatches_UserId",
                table: "TransactionBatches",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_TransactionTypes_RollbackTransactionTypeId",
                table: "TransactionTypes",
                column: "RollbackTransactionTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_Units_UnitTypeId",
                table: "Units",
                column: "UnitTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_UserMessageRelations_ToUserId",
                table: "UserMessageRelations",
                column: "ToUserId");

            migrationBuilder.CreateIndex(
                name: "IX_UserPosts_PostId",
                table: "UserPosts",
                column: "PostId");

            migrationBuilder.CreateIndex(
                name: "IX_UserPosts_UserId",
                table: "UserPosts",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_UserSettings_UserId",
                table: "UserSettings",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_UserTokens_UserId",
                table: "UserTokens",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_WarehouseExitReceiptTypes_ExitReceiptRequestTypeId",
                table: "WarehouseExitReceiptTypes",
                column: "ExitReceiptRequestTypeId");

            migrationBuilder.CreateIndex(
                name: "IX_Warehouses_DepartmentId",
                table: "Warehouses",
                column: "DepartmentId");

            migrationBuilder.CreateIndex(
                name: "IX_WeightDays_IndicatorWeightId",
                table: "WeightDays",
                column: "IndicatorWeightId");

            migrationBuilder.CreateIndex(
                name: "IX_WorkPlans_BillOfMaterialVersion_BillOfMaterialStuffId",
                table: "WorkPlans",
                columns: new[] { "BillOfMaterialVersion", "BillOfMaterialStuffId" });

            migrationBuilder.CreateIndex(
                name: "IX_WorkPlanSteps_ConsumeWarehouseId",
                table: "WorkPlanSteps",
                column: "ConsumeWarehouseId");

            migrationBuilder.CreateIndex(
                name: "IX_WorkPlanSteps_ProductionLineId_ProductionStepId",
                table: "WorkPlanSteps",
                columns: new[] { "ProductionLineId", "ProductionStepId" });

            migrationBuilder.CreateIndex(
                name: "IX_WorkPlanSteps_ProductionStepId",
                table: "WorkPlanSteps",
                column: "ProductionStepId");

            migrationBuilder.CreateIndex(
                name: "IX_WorkPlanSteps_ProductWarehouseId",
                table: "WorkPlanSteps",
                column: "ProductWarehouseId");

            migrationBuilder.CreateIndex(
                name: "IX_WorkPlanSteps_WorkPlanId",
                table: "WorkPlanSteps",
                column: "WorkPlanId");

            migrationBuilder.CreateIndex(
                name: "IX_WorkStationOperations_OperationId",
                table: "WorkStationOperations",
                column: "OperationId");

            migrationBuilder.CreateIndex(
                name: "IX_WorkStationParts_WorkStationId",
                table: "WorkStationParts",
                column: "WorkStationId");

            migrationBuilder.CreateIndex(
                name: "IX_WorkStations_ProductionLineId",
                table: "WorkStations",
                column: "ProductionLineId");

            migrationBuilder.AddForeignKey(
                name: "FK_BankOrderIssues_BaseEntities_FinancialDocument_FinancialDocumentId",
                table: "BankOrderIssues",
                column: "FinancialDocumentId",
                principalTable: "BaseEntities_FinancialDocument",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_AssetLogs_Assets_AssetId",
                table: "AssetLogs",
                column: "AssetId",
                principalTable: "Assets",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_AssetTransferRequests_Assets_AssetId",
                table: "AssetTransferRequests",
                column: "AssetId",
                principalTable: "Assets",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_BillOfMaterialPublishRequest_BillOfMaterials_BillOfMaterialVersion_BillOfMaterialStuffId",
                table: "BaseEntities_BillOfMaterialPublishRequest",
                columns: new[] { "BillOfMaterialVersion", "BillOfMaterialStuffId" },
                principalTable: "BillOfMaterials",
                principalColumns: new[] { "Version", "StuffId" },
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_BillOfMaterialPublishRequest_BillOfMaterials_BillOfMaterialVersion1_BillOfMaterialStuffId1",
                table: "BaseEntities_BillOfMaterialPublishRequest",
                columns: new[] { "BillOfMaterialVersion1", "BillOfMaterialStuffId1" },
                principalTable: "BillOfMaterials",
                principalColumns: new[] { "Version", "StuffId" },
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_CargoItem_BaseEntities_PurchaseOrder_PurchaseOrderId",
                table: "BaseEntities_CargoItem",
                column: "PurchaseOrderId",
                principalTable: "BaseEntities_PurchaseOrder",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_CargoItem_Risks_LatestRiskId",
                table: "BaseEntities_CargoItem",
                column: "LatestRiskId",
                principalTable: "Risks",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_CargoItemDetail_BaseEntities_PurchaseOrderDetail_PurchaseOrderDetailId",
                table: "BaseEntities_CargoItemDetail",
                column: "PurchaseOrderDetailId",
                principalTable: "BaseEntities_PurchaseOrderDetail",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_CheckOrderItem_BaseEntities_OrderItemConfirmation_OrderItemConfirmationId",
                table: "BaseEntities_CheckOrderItem",
                column: "OrderItemConfirmationId",
                principalTable: "BaseEntities_OrderItemConfirmation",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_ConditionalQualityControl_BaseEntities_QualityControlConfirmation_QualityControlConfirmationId",
                table: "BaseEntities_ConditionalQualityControl",
                column: "QualityControlConfirmationId",
                principalTable: "BaseEntities_QualityControlConfirmation",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_ConditionalQualityControlItem_BaseEntities_QualityControlConfirmationItem_QualityControlConfirmationItemId",
                table: "BaseEntities_ConditionalQualityControlItem",
                column: "QualityControlConfirmationItemId",
                principalTable: "BaseEntities_QualityControlConfirmationItem",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_Decomposition_ProductionOperations_ProductionOperationId",
                table: "BaseEntities_Decomposition",
                column: "ProductionOperationId",
                principalTable: "ProductionOperations",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_Decomposition_Stuffs_StuffId",
                table: "BaseEntities_Decomposition",
                column: "StuffId",
                principalTable: "Stuffs",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_Decomposition_StuffSerials_StuffSerialCode_StuffId",
                table: "BaseEntities_Decomposition",
                columns: new[] { "StuffSerialCode", "StuffId" },
                principalTable: "StuffSerials",
                principalColumns: new[] { "Code", "StuffId" },
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_EquivalentStuffUsage_BaseEntities_ProductionOrder_ProductionOrderId",
                table: "BaseEntities_EquivalentStuffUsage",
                column: "ProductionOrderId",
                principalTable: "BaseEntities_ProductionOrder",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_EquivalentStuffUsage_BaseEntities_ProductionPlanDetail_ProductionPlanDetailId",
                table: "BaseEntities_EquivalentStuffUsage",
                column: "ProductionPlanDetailId",
                principalTable: "BaseEntities_ProductionPlanDetail",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_EquivalentStuffUsage_EquivalentStuffs_EquivalentStuffId",
                table: "BaseEntities_EquivalentStuffUsage",
                column: "EquivalentStuffId",
                principalTable: "EquivalentStuffs",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_ExitReceiptRequest_PriceAnnunciationItems_PriceAnnunciationItemId",
                table: "BaseEntities_ExitReceiptRequest",
                column: "PriceAnnunciationItemId",
                principalTable: "PriceAnnunciationItems",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_ExitReceiptRequest_Stuffs_StuffId",
                table: "BaseEntities_ExitReceiptRequest",
                column: "StuffId",
                principalTable: "Stuffs",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_FinancialDocument_Finances_FinanceId",
                table: "BaseEntities_FinancialDocument",
                column: "FinanceId",
                principalTable: "Finances",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_ManualTransaction_Stuffs_StuffId",
                table: "BaseEntities_ManualTransaction",
                column: "StuffId",
                principalTable: "Stuffs",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_NewShoppingDetail_BaseEntities_NewShopping_NewShoppingId",
                table: "BaseEntities_NewShoppingDetail",
                column: "NewShoppingId",
                principalTable: "BaseEntities_NewShopping",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_OrderItem_BillOfMaterials_BillOfMaterialVersion_StuffId",
                table: "BaseEntities_OrderItem",
                columns: new[] { "BillOfMaterialVersion", "StuffId" },
                principalTable: "BillOfMaterials",
                principalColumns: new[] { "Version", "StuffId" },
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_OrderItem_BillOfMaterials_ProductPackBillOfMaterialVersion_ProductPackBillOfMaterialStuffId",
                table: "BaseEntities_OrderItem",
                columns: new[] { "ProductPackBillOfMaterialVersion", "ProductPackBillOfMaterialStuffId" },
                principalTable: "BillOfMaterials",
                principalColumns: new[] { "Version", "StuffId" },
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_OrderItem_Stuffs_StuffId",
                table: "BaseEntities_OrderItem",
                column: "StuffId",
                principalTable: "Stuffs",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_PartitionStuffSerial_StuffSerials_MainStuffSerialCode_MainStuffSerialStuffId",
                table: "BaseEntities_PartitionStuffSerial",
                columns: new[] { "MainStuffSerialCode", "MainStuffSerialStuffId" },
                principalTable: "StuffSerials",
                principalColumns: new[] { "Code", "StuffId" },
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_PreparingSendingItem_Stuffs_StuffId",
                table: "BaseEntities_PreparingSendingItem",
                column: "StuffId",
                principalTable: "Stuffs",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_PreparingSendingItem_StuffSerials_StuffSerialCode_StuffId",
                table: "BaseEntities_PreparingSendingItem",
                columns: new[] { "StuffSerialCode", "StuffId" },
                principalTable: "StuffSerials",
                principalColumns: new[] { "Code", "StuffId" },
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_ProductionMaterialRequest_BaseEntities_ProductionOrder_ProductionOrderId",
                table: "BaseEntities_ProductionMaterialRequest",
                column: "ProductionOrderId",
                principalTable: "BaseEntities_ProductionOrder",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_ProductionOrder_BaseEntities_ProductionSchedule_ProductionScheduleId",
                table: "BaseEntities_ProductionOrder",
                column: "ProductionScheduleId",
                principalTable: "BaseEntities_ProductionSchedule",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_ProductionOrder_WorkPlanSteps_WorkPlanStepId",
                table: "BaseEntities_ProductionOrder",
                column: "WorkPlanStepId",
                principalTable: "WorkPlanSteps",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_ProductionPlan_BillOfMaterials_BillOfMaterialVersion_BillOfMaterialStuffId",
                table: "BaseEntities_ProductionPlan",
                columns: new[] { "BillOfMaterialVersion", "BillOfMaterialStuffId" },
                principalTable: "BillOfMaterials",
                principalColumns: new[] { "Version", "StuffId" },
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_ProductionPlanDetail_BillOfMaterials_BillOfMaterialVersion_BillOfMaterialStuffId",
                table: "BaseEntities_ProductionPlanDetail",
                columns: new[] { "BillOfMaterialVersion", "BillOfMaterialStuffId" },
                principalTable: "BillOfMaterials",
                principalColumns: new[] { "Version", "StuffId" },
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_ProductionSchedule_WorkPlanSteps_WorkPlanStepId",
                table: "BaseEntities_ProductionSchedule",
                column: "WorkPlanStepId",
                principalTable: "WorkPlanSteps",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_PurchaseOrder_PurchaseOrderStepDetails_PurchaseOrderStepDetailId",
                table: "BaseEntities_PurchaseOrder",
                column: "PurchaseOrderStepDetailId",
                principalTable: "PurchaseOrderStepDetails",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_PurchaseOrder_Risks_LatestRiskId",
                table: "BaseEntities_PurchaseOrder",
                column: "LatestRiskId",
                principalTable: "Risks",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_PurchaseOrder_StuffProviders_StuffId_ProviderId",
                table: "BaseEntities_PurchaseOrder",
                columns: new[] { "StuffId", "ProviderId" },
                principalTable: "StuffProviders",
                principalColumns: new[] { "StuffId", "ProviderId" },
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_PurchaseOrder_Stuffs_StuffId",
                table: "BaseEntities_PurchaseOrder",
                column: "StuffId",
                principalTable: "Stuffs",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_PurchaseOrderDetail_BaseEntities_PurchaseRequest_PurchaseRequestId",
                table: "BaseEntities_PurchaseOrderDetail",
                column: "PurchaseRequestId",
                principalTable: "BaseEntities_PurchaseRequest",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_PurchaseRequest_PurchaseRequestStepDetails_PurchaseRequestStepDetailId",
                table: "BaseEntities_PurchaseRequest",
                column: "PurchaseRequestStepDetailId",
                principalTable: "PurchaseRequestStepDetails",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_PurchaseRequest_Risks_LatestRiskId",
                table: "BaseEntities_PurchaseRequest",
                column: "LatestRiskId",
                principalTable: "Risks",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_PurchaseRequest_Stuffs_StuffId",
                table: "BaseEntities_PurchaseRequest",
                column: "StuffId",
                principalTable: "Stuffs",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_QtyCorrectionRequest_StockCheckingTags_StockCheckingTagId",
                table: "BaseEntities_QtyCorrectionRequest",
                column: "StockCheckingTagId",
                principalTable: "StockCheckingTags",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_QtyCorrectionRequest_Stuffs_StuffId",
                table: "BaseEntities_QtyCorrectionRequest",
                column: "StuffId",
                principalTable: "Stuffs",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_QtyCorrectionRequest_StuffSerials_StuffSerialCode_StuffId",
                table: "BaseEntities_QtyCorrectionRequest",
                columns: new[] { "StuffSerialCode", "StuffId" },
                principalTable: "StuffSerials",
                principalColumns: new[] { "Code", "StuffId" },
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_QualityControl_Stuffs_StuffId",
                table: "BaseEntities_QualityControl",
                column: "StuffId",
                principalTable: "Stuffs",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_QualityControlConfirmationItem_BaseEntities_QualityControlItem_QualityControlItemId",
                table: "BaseEntities_QualityControlConfirmationItem",
                column: "QualityControlItemId",
                principalTable: "BaseEntities_QualityControlItem",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_QualityControlItem_BaseEntities_ReturnOfSale_ReturnOfSaleId",
                table: "BaseEntities_QualityControlItem",
                column: "ReturnOfSaleId",
                principalTable: "BaseEntities_ReturnOfSale",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_QualityControlItem_Stuffs_StuffId",
                table: "BaseEntities_QualityControlItem",
                column: "StuffId",
                principalTable: "Stuffs",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_QualityControlItem_StuffSerials_StuffSerialCode_StuffId",
                table: "BaseEntities_QualityControlItem",
                columns: new[] { "StuffSerialCode", "StuffId" },
                principalTable: "StuffSerials",
                principalColumns: new[] { "Code", "StuffId" },
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_RepairProductionFault_RepairProductions_RepairProductionId",
                table: "BaseEntities_RepairProductionFault",
                column: "RepairProductionId",
                principalTable: "RepairProductions",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_ResponseStuffRequestItem_BaseEntities_StuffRequestItem_StuffRequestItemId",
                table: "BaseEntities_ResponseStuffRequestItem",
                column: "StuffRequestItemId",
                principalTable: "BaseEntities_StuffRequestItem",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_ResponseStuffRequestItem_BillOfMaterials_BillOfMaterialVersion_StuffId",
                table: "BaseEntities_ResponseStuffRequestItem",
                columns: new[] { "BillOfMaterialVersion", "StuffId" },
                principalTable: "BillOfMaterials",
                principalColumns: new[] { "Version", "StuffId" },
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_ResponseStuffRequestItem_Stuffs_StuffId",
                table: "BaseEntities_ResponseStuffRequestItem",
                column: "StuffId",
                principalTable: "Stuffs",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_ReturnOfSale_BaseEntities_ReturnStoreReceipt_ReturnStoreReceiptId",
                table: "BaseEntities_ReturnOfSale",
                column: "ReturnStoreReceiptId",
                principalTable: "BaseEntities_ReturnStoreReceipt",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_ReturnOfSale_Stuffs_StuffId",
                table: "BaseEntities_ReturnOfSale",
                column: "StuffId",
                principalTable: "Stuffs",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_ReturnOfSale_StuffSerials_StuffSerialCode_StuffId",
                table: "BaseEntities_ReturnOfSale",
                columns: new[] { "StuffSerialCode", "StuffId" },
                principalTable: "StuffSerials",
                principalColumns: new[] { "Code", "StuffId" },
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_StockAdjustment_StockCheckingTags_StockCheckingTagId",
                table: "BaseEntities_StockAdjustment",
                column: "StockCheckingTagId",
                principalTable: "StockCheckingTags",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_StoreReceipt_BaseEntities_PurchasePrice_CurrentPurchasePriceId",
                table: "BaseEntities_StoreReceipt",
                column: "CurrentPurchasePriceId",
                principalTable: "BaseEntities_PurchasePrice",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_StoreReceipt_BillOfMaterials_BillOfMaterialVersion_StuffId",
                table: "BaseEntities_StoreReceipt",
                columns: new[] { "BillOfMaterialVersion", "StuffId" },
                principalTable: "BillOfMaterials",
                principalColumns: new[] { "Version", "StuffId" },
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_StoreReceipt_Stuffs_StuffId",
                table: "BaseEntities_StoreReceipt",
                column: "StuffId",
                principalTable: "Stuffs",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_StuffPrice_Stuffs_StuffId",
                table: "BaseEntities_StuffPrice",
                column: "StuffId",
                principalTable: "Stuffs",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_StuffRequestItem_BillOfMaterials_BillOfMaterialVersion_StuffId",
                table: "BaseEntities_StuffRequestItem",
                columns: new[] { "BillOfMaterialVersion", "StuffId" },
                principalTable: "BillOfMaterials",
                principalColumns: new[] { "Version", "StuffId" },
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_StuffRequestItem_Stuffs_StuffId",
                table: "BaseEntities_StuffRequestItem",
                column: "StuffId",
                principalTable: "Stuffs",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_StuffRequestMilestoneDetail_Stuffs_StuffId",
                table: "BaseEntities_StuffRequestMilestoneDetail",
                column: "StuffId",
                principalTable: "Stuffs",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_WarehouseIssueItem_BillOfMaterials_BillOfMaterialVersion_StuffId",
                table: "BaseEntities_WarehouseIssueItem",
                columns: new[] { "BillOfMaterialVersion", "StuffId" },
                principalTable: "BillOfMaterials",
                principalColumns: new[] { "Version", "StuffId" },
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_WarehouseIssueItem_Stuffs_StuffId",
                table: "BaseEntities_WarehouseIssueItem",
                column: "StuffId",
                principalTable: "Stuffs",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseEntities_WarehouseIssueItem_StuffSerials_StuffSerialCode_StuffId",
                table: "BaseEntities_WarehouseIssueItem",
                columns: new[] { "StuffSerialCode", "StuffId" },
                principalTable: "StuffSerials",
                principalColumns: new[] { "Code", "StuffId" },
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_Risks_RiskResolves_LatestRiskResolveId",
                table: "Risks",
                column: "LatestRiskResolveId",
                principalTable: "RiskResolves",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_Risks_RiskStatuses_LatestRiskStatusId",
                table: "Risks",
                column: "LatestRiskStatusId",
                principalTable: "RiskStatuses",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_FinanceItems_FinanceItemAllocationSummaries_FinanceId_CooperatorId",
                table: "FinanceItems",
                columns: new[] { "FinanceId", "CooperatorId" },
                principalTable: "FinanceItemAllocationSummaries",
                principalColumns: new[] { "FinanceId", "CooperatorId" },
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_FinanceItems_FinanceItemConfirmations_LatestConfirmationId",
                table: "FinanceItems",
                column: "LatestConfirmationId",
                principalTable: "FinanceItemConfirmations",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_FinanceItems_Finances_FinanceId",
                table: "FinanceItems",
                column: "FinanceId",
                principalTable: "Finances",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_StuffSerials_BillOfMaterials_BillOfMaterialVersion_StuffId",
                table: "StuffSerials",
                columns: new[] { "BillOfMaterialVersion", "StuffId" },
                principalTable: "BillOfMaterials",
                principalColumns: new[] { "Version", "StuffId" },
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_StuffSerials_SerialProfiles_SerialProfileCode_StuffId",
                table: "StuffSerials",
                columns: new[] { "SerialProfileCode", "StuffId" },
                principalTable: "SerialProfiles",
                principalColumns: new[] { "Code", "StuffId" },
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_StuffSerials_Stuffs_StuffId",
                table: "StuffSerials",
                column: "StuffId",
                principalTable: "Stuffs",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_GeneralStuffRequests_BillOfMaterials_BillOfMaterialVersion_StuffId",
                table: "GeneralStuffRequests",
                columns: new[] { "BillOfMaterialVersion", "StuffId" },
                principalTable: "BillOfMaterials",
                principalColumns: new[] { "Version", "StuffId" },
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_GeneralStuffRequests_Stuffs_StuffId",
                table: "GeneralStuffRequests",
                column: "StuffId",
                principalTable: "Stuffs",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_ProductionOperators_OperationSequences_OperationSequenceId",
                table: "ProductionOperators",
                column: "OperationSequenceId",
                principalTable: "OperationSequences",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_SerialFailedOperations_ProductionOperations_ProductionOperationId",
                table: "SerialFailedOperations",
                column: "ProductionOperationId",
                principalTable: "ProductionOperations",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_QualityControlConfirmationTests_StuffQualityControlTests_StuffId_QualityControlTestId",
                table: "QualityControlConfirmationTests",
                columns: new[] { "StuffId", "QualityControlTestId" },
                principalTable: "StuffQualityControlTests",
                principalColumns: new[] { "StuffId", "QualityControlTestId" },
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_ProductionStuffDetails_RepairProductionStuffDetail_ProductionStuffDetails_Id",
                table: "ProductionStuffDetails_RepairProductionStuffDetail",
                column: "Id",
                principalTable: "ProductionStuffDetails",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_SerialProfiles_StoreReceiptSerialProfile_SerialProfiles_Code_StuffId",
                table: "SerialProfiles_StoreReceiptSerialProfile",
                columns: new[] { "Code", "StuffId" },
                principalTable: "SerialProfiles",
                principalColumns: new[] { "Code", "StuffId" },
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_SerialProfiles_StoreReceiptSerialProfile_Stuffs_StuffId",
                table: "SerialProfiles_StoreReceiptSerialProfile",
                column: "StuffId",
                principalTable: "Stuffs",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_SerialBuffers_BaseTransactions_BaseTransactionId",
                table: "SerialBuffers",
                column: "BaseTransactionId",
                principalTable: "BaseTransactions",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_EquivalentStuffs_BillOfMaterialDetails_BillOfMaterialDetailId",
                table: "EquivalentStuffs",
                column: "BillOfMaterialDetailId",
                principalTable: "BillOfMaterialDetails",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_OperationConsumingMaterials_BillOfMaterialDetails_BillOfMaterialDetailId",
                table: "OperationConsumingMaterials",
                column: "BillOfMaterialDetailId",
                principalTable: "BillOfMaterialDetails",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_OperationConsumingMaterials_OperationSequences_OperationSequenceId",
                table: "OperationConsumingMaterials",
                column: "OperationSequenceId",
                principalTable: "OperationSequences",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BillOfMaterialDocuments_BillOfMaterials_BillOfMaterialVersion_BillOfMaterialStuffId",
                table: "BillOfMaterialDocuments",
                columns: new[] { "BillOfMaterialVersion", "BillOfMaterialStuffId" },
                principalTable: "BillOfMaterials",
                principalColumns: new[] { "Version", "StuffId" },
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BillOfMaterialPriceHistoryCurrencyRates_BillOfMaterialPriceHistories_BillOfMaterialPriceHistoryId",
                table: "BillOfMaterialPriceHistoryCurrencyRates",
                column: "BillOfMaterialPriceHistoryId",
                principalTable: "BillOfMaterialPriceHistories",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BillOfMaterialPriceHistoryDetails_BillOfMaterialPriceHistories_BillOfMaerialPriceHistoryId",
                table: "BillOfMaterialPriceHistoryDetails",
                column: "BillOfMaerialPriceHistoryId",
                principalTable: "BillOfMaterialPriceHistories",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseTransactions_BillOfMaterials_BillOfMaterialVersion_StuffId",
                table: "BaseTransactions",
                columns: new[] { "BillOfMaterialVersion", "StuffId" },
                principalTable: "BillOfMaterials",
                principalColumns: new[] { "Version", "StuffId" },
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BaseTransactions_Stuffs_StuffId",
                table: "BaseTransactions",
                column: "StuffId",
                principalTable: "Stuffs",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BillOfMaterialDetails_BillOfMaterials_BillOfMaterialVersion_BillOfMaterialStuffId",
                table: "BillOfMaterialDetails",
                columns: new[] { "BillOfMaterialVersion", "BillOfMaterialStuffId" },
                principalTable: "BillOfMaterials",
                principalColumns: new[] { "Version", "StuffId" },
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BillOfMaterialDetails_BillOfMaterials_SemiProductBillOfMaterialVersion_StuffId",
                table: "BillOfMaterialDetails",
                columns: new[] { "SemiProductBillOfMaterialVersion", "StuffId" },
                principalTable: "BillOfMaterials",
                principalColumns: new[] { "Version", "StuffId" },
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BillOfMaterialDetails_Stuffs_StuffId",
                table: "BillOfMaterialDetails",
                column: "StuffId",
                principalTable: "Stuffs",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_EquivalentStuffDetails_BillOfMaterials_SemiProductBillOfMaterialVersion_StuffId",
                table: "EquivalentStuffDetails",
                columns: new[] { "SemiProductBillOfMaterialVersion", "StuffId" },
                principalTable: "BillOfMaterials",
                principalColumns: new[] { "Version", "StuffId" },
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_EquivalentStuffDetails_Stuffs_StuffId",
                table: "EquivalentStuffDetails",
                column: "StuffId",
                principalTable: "Stuffs",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_WorkPlans_BillOfMaterials_BillOfMaterialVersion_BillOfMaterialStuffId",
                table: "WorkPlans",
                columns: new[] { "BillOfMaterialVersion", "BillOfMaterialStuffId" },
                principalTable: "BillOfMaterials",
                principalColumns: new[] { "Version", "StuffId" },
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_CustomerStuffs_Stuffs_StuffId",
                table: "CustomerStuffs",
                column: "StuffId",
                principalTable: "Stuffs",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_FinanceItemAllocationSummaries_Finances_FinanceId",
                table: "FinanceItemAllocationSummaries",
                column: "FinanceId",
                principalTable: "Finances",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_Finances_FinanceConfirmations_LastConfimationId",
                table: "Finances",
                column: "LastConfimationId",
                principalTable: "FinanceConfirmations",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_PriceInquiries_Stuffs_StuffId",
                table: "PriceInquiries",
                column: "StuffId",
                principalTable: "Stuffs",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_ProjectERPs_Stuffs_StuffId",
                table: "ProjectERPs",
                column: "StuffId",
                principalTable: "Stuffs",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_SerialProfiles_Stuffs_StuffId",
                table: "SerialProfiles",
                column: "StuffId",
                principalTable: "Stuffs",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_StuffProviders_Stuffs_StuffId",
                table: "StuffProviders",
                column: "StuffId",
                principalTable: "Stuffs",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_BillOfMaterialPriceHistories_Stuffs_StuffId",
                table: "BillOfMaterialPriceHistories",
                column: "StuffId",
                principalTable: "Stuffs",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_PriceAnnunciationItems_Stuffs_StuffId",
                table: "PriceAnnunciationItems",
                column: "StuffId",
                principalTable: "Stuffs",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_Assets_Stuffs_StuffId",
                table: "Assets",
                column: "StuffId",
                principalTable: "Stuffs",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_Stuffs_StuffDefinitionRequests_StuffDefinitionRequestId",
                table: "Stuffs",
                column: "StuffDefinitionRequestId",
                principalTable: "StuffDefinitionRequests",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_ProductionOperations_FaildProductionOperations_FaildProductionOperationId",
                table: "ProductionOperations",
                column: "FaildProductionOperationId",
                principalTable: "FaildProductionOperations",
                principalColumn: "Id",
                onDelete: ReferentialAction.Restrict);
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_PurchaseOrder_Currencies_CurrencyId",
                table: "BaseEntities_PurchaseOrder");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_StuffPrice_Currencies_CurrencyId",
                table: "BaseEntities_StuffPrice");

            migrationBuilder.DropForeignKey(
                name: "FK_Finances_Currencies_CurrencyId",
                table: "Finances");

            migrationBuilder.DropForeignKey(
                name: "FK_FinancialAccounts_Currencies_CurrencyId",
                table: "FinancialAccounts");

            migrationBuilder.DropForeignKey(
                name: "FK_PriceAnnunciationItems_Currencies_CurrencyId",
                table: "PriceAnnunciationItems");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_Users_UserId",
                table: "BaseEntities");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_SendPermission_Users_ConfirmerUserId",
                table: "BaseEntities_SendPermission");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_StuffPrice_Users_ConfirmUserId",
                table: "BaseEntities_StuffPrice");

            migrationBuilder.DropForeignKey(
                name: "FK_BillOfMaterials_Users_UserId",
                table: "BillOfMaterials");

            migrationBuilder.DropForeignKey(
                name: "FK_CostCenters_Users_ConfirmerUserId",
                table: "CostCenters");

            migrationBuilder.DropForeignKey(
                name: "FK_Employees_Users_UserId",
                table: "Employees");

            migrationBuilder.DropForeignKey(
                name: "FK_FinanceConfirmations_Users_UserId",
                table: "FinanceConfirmations");

            migrationBuilder.DropForeignKey(
                name: "FK_FinanceItemConfirmations_Users_UserId",
                table: "FinanceItemConfirmations");

            migrationBuilder.DropForeignKey(
                name: "FK_FinanceItems_Users_ReceivedUserId",
                table: "FinanceItems");

            migrationBuilder.DropForeignKey(
                name: "FK_FinanceItems_Users_UserId",
                table: "FinanceItems");

            migrationBuilder.DropForeignKey(
                name: "FK_Finances_Users_UserId",
                table: "Finances");

            migrationBuilder.DropForeignKey(
                name: "FK_FinancialTransactionBatches_Users_UserId",
                table: "FinancialTransactionBatches");

            migrationBuilder.DropForeignKey(
                name: "FK_OrganizationJobs_Users_CreatorId",
                table: "OrganizationJobs");

            migrationBuilder.DropForeignKey(
                name: "FK_OrganizationPosts_Users_CreatorId",
                table: "OrganizationPosts");

            migrationBuilder.DropForeignKey(
                name: "FK_PlanCodes_Users_RegisterarUserId",
                table: "PlanCodes");

            migrationBuilder.DropForeignKey(
                name: "FK_PriceAnnunciationItems_Users_ConfirmerUserId",
                table: "PriceAnnunciationItems");

            migrationBuilder.DropForeignKey(
                name: "FK_PriceAnnunciations_Users_RegisterarUserId",
                table: "PriceAnnunciations");

            migrationBuilder.DropForeignKey(
                name: "FK_ProductionLineRepairUnits_Users_UserId",
                table: "ProductionLineRepairUnits");

            migrationBuilder.DropForeignKey(
                name: "FK_ProductionOperations_Users_UserId",
                table: "ProductionOperations");

            migrationBuilder.DropForeignKey(
                name: "FK_Productions_Users_UserId",
                table: "Productions");

            migrationBuilder.DropForeignKey(
                name: "FK_PurchaseOrderStepDetails_Users_UserId",
                table: "PurchaseOrderStepDetails");

            migrationBuilder.DropForeignKey(
                name: "FK_PurchaseOrderSteps_Users_UserId",
                table: "PurchaseOrderSteps");

            migrationBuilder.DropForeignKey(
                name: "FK_PurchaseRequestStepDetails_Users_UserId",
                table: "PurchaseRequestStepDetails");

            migrationBuilder.DropForeignKey(
                name: "FK_PurchaseRequestSteps_Users_UserId",
                table: "PurchaseRequestSteps");

            migrationBuilder.DropForeignKey(
                name: "FK_RepairProductions_Users_UserId",
                table: "RepairProductions");

            migrationBuilder.DropForeignKey(
                name: "FK_RiskResolves_Users_CreatorUserId",
                table: "RiskResolves");

            migrationBuilder.DropForeignKey(
                name: "FK_RiskResolves_Users_ReviewerUserId",
                table: "RiskResolves");

            migrationBuilder.DropForeignKey(
                name: "FK_Risks_Users_CreatorUserId",
                table: "Risks");

            migrationBuilder.DropForeignKey(
                name: "FK_RiskStatuses_Users_UserId",
                table: "RiskStatuses");

            migrationBuilder.DropForeignKey(
                name: "FK_SerialProfiles_Users_UserId",
                table: "SerialProfiles");

            migrationBuilder.DropForeignKey(
                name: "FK_StuffDefinitionRequests_Users_ConfirmerUserId",
                table: "StuffDefinitionRequests");

            migrationBuilder.DropForeignKey(
                name: "FK_StuffDefinitionRequests_Users_UserId",
                table: "StuffDefinitionRequests");

            migrationBuilder.DropForeignKey(
                name: "FK_StuffSerials_Users_IssueConfirmerUserId",
                table: "StuffSerials");

            migrationBuilder.DropForeignKey(
                name: "FK_StuffSerials_Users_IssueUserId",
                table: "StuffSerials");

            migrationBuilder.DropForeignKey(
                name: "FK_StuffSerials_Users_LastModifiedUserId",
                table: "StuffSerials");

            migrationBuilder.DropForeignKey(
                name: "FK_TransactionBatches_Users_UserId",
                table: "TransactionBatches");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_PurchaseRequest_Departments_DepartmentId",
                table: "BaseEntities_PurchaseRequest");

            migrationBuilder.DropForeignKey(
                name: "FK_Employees_Departments_DepartmentId",
                table: "Employees");

            migrationBuilder.DropForeignKey(
                name: "FK_ProductionLines_Departments_DepartmentId",
                table: "ProductionLines");

            migrationBuilder.DropForeignKey(
                name: "FK_ScrumEntities_Departments_DepartmentId",
                table: "ScrumEntities");

            migrationBuilder.DropForeignKey(
                name: "FK_StuffPurchaseCategories_Departments_QualityControlDepartmentId",
                table: "StuffPurchaseCategories");

            migrationBuilder.DropForeignKey(
                name: "FK_Stuffs_Departments_QualityControlDepartmentId",
                table: "Stuffs");

            migrationBuilder.DropForeignKey(
                name: "FK_Warehouses_Departments_DepartmentId",
                table: "Warehouses");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_ProductionOrder_Employees_SupervisorEmployeeId",
                table: "BaseEntities_ProductionOrder");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_PurchaseRequest_Employees_EmployeeRequesterId",
                table: "BaseEntities_PurchaseRequest");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_PurchaseRequest_Employees_ResponsibleEmployeeId",
                table: "BaseEntities_PurchaseRequest");

            migrationBuilder.DropForeignKey(
                name: "FK_ProductionTerminals_Employees_EmployeeId",
                table: "ProductionTerminals");

            migrationBuilder.DropForeignKey(
                name: "FK_Stuffs_Employees_QualityControlEmployeeId",
                table: "Stuffs");

            migrationBuilder.DropForeignKey(
                name: "FK_Suppliers_Employees_EmployeeId",
                table: "Suppliers");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_ExitReceiptRequest_Stuffs_StuffId",
                table: "BaseEntities_ExitReceiptRequest");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_OrderItem_Stuffs_StuffId",
                table: "BaseEntities_OrderItem");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_PurchaseOrder_Stuffs_StuffId",
                table: "BaseEntities_PurchaseOrder");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_PurchaseRequest_Stuffs_StuffId",
                table: "BaseEntities_PurchaseRequest");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_ReturnOfSale_Stuffs_StuffId",
                table: "BaseEntities_ReturnOfSale");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_StoreReceipt_Stuffs_StuffId",
                table: "BaseEntities_StoreReceipt");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_StuffPrice_Stuffs_StuffId",
                table: "BaseEntities_StuffPrice");

            migrationBuilder.DropForeignKey(
                name: "FK_BillOfMaterials_Stuffs_StuffId",
                table: "BillOfMaterials");

            migrationBuilder.DropForeignKey(
                name: "FK_PriceAnnunciationItems_Stuffs_StuffId",
                table: "PriceAnnunciationItems");

            migrationBuilder.DropForeignKey(
                name: "FK_SerialProfiles_Stuffs_StuffId",
                table: "SerialProfiles");

            migrationBuilder.DropForeignKey(
                name: "FK_StuffDefinitionRequests_Stuffs_StuffId",
                table: "StuffDefinitionRequests");

            migrationBuilder.DropForeignKey(
                name: "FK_StuffProviders_Stuffs_StuffId",
                table: "StuffProviders");

            migrationBuilder.DropForeignKey(
                name: "FK_StuffSerials_Stuffs_StuffId",
                table: "StuffSerials");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_PartitionStuffSerial_StuffSerials_MainStuffSerialCode_MainStuffSerialStuffId",
                table: "BaseEntities_PartitionStuffSerial");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_ReturnOfSale_StuffSerials_StuffSerialCode_StuffId",
                table: "BaseEntities_ReturnOfSale");

            migrationBuilder.DropForeignKey(
                name: "FK_Productions_StuffSerials_StuffSerialCode_StuffSerialStuffId",
                table: "Productions");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_ExitReceiptRequest_Warehouses_WarehouseId",
                table: "BaseEntities_ExitReceiptRequest");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_StoreReceipt_Warehouses_WarehouseId",
                table: "BaseEntities_StoreReceipt");

            migrationBuilder.DropForeignKey(
                name: "FK_ProductionLineRepairUnits_Warehouses_WarehouseId",
                table: "ProductionLineRepairUnits");

            migrationBuilder.DropForeignKey(
                name: "FK_ProductionLines_Warehouses_ConsumeWarehouseId",
                table: "ProductionLines");

            migrationBuilder.DropForeignKey(
                name: "FK_ProductionLines_Warehouses_ProductWarehouseId",
                table: "ProductionLines");

            migrationBuilder.DropForeignKey(
                name: "FK_WorkPlanSteps_Warehouses_ConsumeWarehouseId",
                table: "WorkPlanSteps");

            migrationBuilder.DropForeignKey(
                name: "FK_WorkPlanSteps_Warehouses_ProductWarehouseId",
                table: "WorkPlanSteps");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_CargoItem_Units_UnitId",
                table: "BaseEntities_CargoItem");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_ExitReceiptRequest_Units_UnitId",
                table: "BaseEntities_ExitReceiptRequest");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_OrderItem_Units_UnitId",
                table: "BaseEntities_OrderItem");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_PreparingSending_Units_UnitId",
                table: "BaseEntities_PreparingSending");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_ProductionOrder_Units_UnitId",
                table: "BaseEntities_ProductionOrder");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_ProductionPlan_Units_UnitId",
                table: "BaseEntities_ProductionPlan");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_ProductionPlanDetail_Units_UnitId",
                table: "BaseEntities_ProductionPlanDetail");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_ProductionRequest_Units_UnitId",
                table: "BaseEntities_ProductionRequest");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_PurchaseOrder_Units_UnitId",
                table: "BaseEntities_PurchaseOrder");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_PurchaseRequest_Units_UnitId",
                table: "BaseEntities_PurchaseRequest");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_ReturnOfSale_Units_UnitId",
                table: "BaseEntities_ReturnOfSale");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_SendPermission_Units_UnitId",
                table: "BaseEntities_SendPermission");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_StoreReceipt_Units_UnitId",
                table: "BaseEntities_StoreReceipt");

            migrationBuilder.DropForeignKey(
                name: "FK_BillOfMaterials_Units_UnitId",
                table: "BillOfMaterials");

            migrationBuilder.DropForeignKey(
                name: "FK_FinanceItems_BaseEntities_FinancialDocument_ExpenseFinancialDocumentId",
                table: "FinanceItems");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_FinancialTransactionBatches_FinancialTransactionBatchId",
                table: "BaseEntities");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_TransactionBatches_TransactionBatchId",
                table: "BaseEntities");

            migrationBuilder.DropForeignKey(
                name: "FK_ProductionOperations_TransactionBatches_TransactionBatchId",
                table: "ProductionOperations");

            migrationBuilder.DropForeignKey(
                name: "FK_FinancialAccountDetails_Banks_BankId",
                table: "FinancialAccountDetails");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_Cargo_BaseEntities_Id",
                table: "BaseEntities_Cargo");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_CargoItem_BaseEntities_Id",
                table: "BaseEntities_CargoItem");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_CheckOrderItem_BaseEntities_Id",
                table: "BaseEntities_CheckOrderItem");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_ExitReceipt_BaseEntities_Id",
                table: "BaseEntities_ExitReceipt");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_ExitReceiptRequest_BaseEntities_Id",
                table: "BaseEntities_ExitReceiptRequest");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_OrderItem_BaseEntities_Id",
                table: "BaseEntities_OrderItem");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_OrderItemConfirmation_BaseEntities_Id",
                table: "BaseEntities_OrderItemConfirmation");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_PreparingSending_BaseEntities_Id",
                table: "BaseEntities_PreparingSending");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_ProductionOrder_BaseEntities_Id",
                table: "BaseEntities_ProductionOrder");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_ProductionPlan_BaseEntities_Id",
                table: "BaseEntities_ProductionPlan");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_ProductionPlanDetail_BaseEntities_Id",
                table: "BaseEntities_ProductionPlanDetail");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_ProductionRequest_BaseEntities_Id",
                table: "BaseEntities_ProductionRequest");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_ProductionSchedule_BaseEntities_Id",
                table: "BaseEntities_ProductionSchedule");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_PurchaseOrder_BaseEntities_Id",
                table: "BaseEntities_PurchaseOrder");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_PurchaseOrderGroup_BaseEntities_Id",
                table: "BaseEntities_PurchaseOrderGroup");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_PurchaseRequest_BaseEntities_Id",
                table: "BaseEntities_PurchaseRequest");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_Receipt_BaseEntities_Id",
                table: "BaseEntities_Receipt");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_ReturnOfSale_BaseEntities_Id",
                table: "BaseEntities_ReturnOfSale");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_SendPermission_BaseEntities_Id",
                table: "BaseEntities_SendPermission");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_SendProduct_BaseEntities_Id",
                table: "BaseEntities_SendProduct");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_StoreReceipt_BaseEntities_Id",
                table: "BaseEntities_StoreReceipt");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_StuffPrice_BaseEntities_Id",
                table: "BaseEntities_StuffPrice");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_Transport_BaseEntities_Id",
                table: "BaseEntities_Transport");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_ExitReceipt_Cooperators_CooperatorId",
                table: "BaseEntities_ExitReceipt");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_ExitReceiptRequest_Cooperators_CooperatorId",
                table: "BaseEntities_ExitReceiptRequest");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_PurchaseOrder_Cooperators_ProviderId",
                table: "BaseEntities_PurchaseOrder");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_Receipt_Cooperators_CooperatorId",
                table: "BaseEntities_Receipt");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_StoreReceipt_Cooperators_CooperatorId",
                table: "BaseEntities_StoreReceipt");

            migrationBuilder.DropForeignKey(
                name: "FK_FinanceItemAllocationSummaries_Cooperators_CooperatorId",
                table: "FinanceItemAllocationSummaries");

            migrationBuilder.DropForeignKey(
                name: "FK_FinanceItems_Cooperators_CooperatorId",
                table: "FinanceItems");

            migrationBuilder.DropForeignKey(
                name: "FK_Finances_Cooperators_CooperatorId",
                table: "Finances");

            migrationBuilder.DropForeignKey(
                name: "FK_Orders_Cooperators_CustomerId",
                table: "Orders");

            migrationBuilder.DropForeignKey(
                name: "FK_PriceAnnunciations_Cooperators_CooperatorId",
                table: "PriceAnnunciations");

            migrationBuilder.DropForeignKey(
                name: "FK_StuffProviders_Cooperators_ProviderId",
                table: "StuffProviders");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_OrderItem_BillOfMaterials_BillOfMaterialVersion_StuffId",
                table: "BaseEntities_OrderItem");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_OrderItem_BillOfMaterials_ProductPackBillOfMaterialVersion_ProductPackBillOfMaterialStuffId",
                table: "BaseEntities_OrderItem");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_ProductionPlan_BillOfMaterials_BillOfMaterialVersion_BillOfMaterialStuffId",
                table: "BaseEntities_ProductionPlan");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_ProductionPlanDetail_BillOfMaterials_BillOfMaterialVersion_BillOfMaterialStuffId",
                table: "BaseEntities_ProductionPlanDetail");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_StoreReceipt_BillOfMaterials_BillOfMaterialVersion_StuffId",
                table: "BaseEntities_StoreReceipt");

            migrationBuilder.DropForeignKey(
                name: "FK_WorkPlans_BillOfMaterials_BillOfMaterialVersion_BillOfMaterialStuffId",
                table: "WorkPlans");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_CargoItem_BaseEntities_Cargo_CargoId",
                table: "BaseEntities_CargoItem");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_CargoItem_BaseEntities_PurchaseOrder_PurchaseOrderId",
                table: "BaseEntities_CargoItem");

            migrationBuilder.DropForeignKey(
                name: "FK_FinanceItems_BaseEntities_PurchaseOrder_PurchaseOrderId",
                table: "FinanceItems");

            migrationBuilder.DropForeignKey(
                name: "FK_PurchaseOrderStepDetails_BaseEntities_PurchaseOrder_PurchaseOrderId",
                table: "PurchaseOrderStepDetails");

            migrationBuilder.DropForeignKey(
                name: "FK_Risks_BaseEntities_PurchaseOrder_PurchaseOrderId",
                table: "Risks");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_CargoItem_Forwarders_ForwarderId",
                table: "BaseEntities_CargoItem");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_CargoItem_HowToBuys_HowToBuyId",
                table: "BaseEntities_CargoItem");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_CargoItem_Risks_LatestRiskId",
                table: "BaseEntities_CargoItem");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_PurchaseRequest_Risks_LatestRiskId",
                table: "BaseEntities_PurchaseRequest");

            migrationBuilder.DropForeignKey(
                name: "FK_RiskResolves_Risks_RiskId",
                table: "RiskResolves");

            migrationBuilder.DropForeignKey(
                name: "FK_RiskStatuses_Risks_RiskId",
                table: "RiskStatuses");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_CheckOrderItem_BaseEntities_OrderItemConfirmation_OrderItemConfirmationId",
                table: "BaseEntities_CheckOrderItem");

            migrationBuilder.DropForeignKey(
                name: "FK_FaildProductionOperations_ProductionOperations_ReworkProductionOperationId",
                table: "FaildProductionOperations");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_PurchasePrice_BaseEntities_StuffPrice_Id",
                table: "BaseEntities_PurchasePrice");

            migrationBuilder.DropForeignKey(
                name: "FK_FinanceConfirmations_Finances_FinanceId",
                table: "FinanceConfirmations");

            migrationBuilder.DropForeignKey(
                name: "FK_FinanceItemAllocationSummaries_Finances_FinanceId",
                table: "FinanceItemAllocationSummaries");

            migrationBuilder.DropForeignKey(
                name: "FK_FinanceItems_Finances_FinanceId",
                table: "FinanceItems");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_InboundCargo_BaseEntities_Transport_Id",
                table: "BaseEntities_InboundCargo");

            migrationBuilder.DropForeignKey(
                name: "FK_BaseEntities_PurchasePrice_BaseEntities_StoreReceipt_StoreReceiptId",
                table: "BaseEntities_PurchasePrice");

            migrationBuilder.DropForeignKey(
                name: "FK_PurchaseRequestStepDetails_BaseEntities_PurchaseRequest_PurchaseRequestId",
                table: "PurchaseRequestStepDetails");

            migrationBuilder.DropForeignKey(
                name: "FK_FinanceItemConfirmations_FinanceItems_FinanceItemId",
                table: "FinanceItemConfirmations");

            migrationBuilder.DropTable(
                name: "ActionParamater");

            migrationBuilder.DropTable(
                name: "AddLadingItemDetailInputs");

            migrationBuilder.DropTable(
                name: "ApplicationLogs");

            migrationBuilder.DropTable(
                name: "ApplicationSettings");

            migrationBuilder.DropTable(
                name: "AssetLogs");

            migrationBuilder.DropTable(
                name: "AssetTransferRequests");

            migrationBuilder.DropTable(
                name: "Attachments");

            migrationBuilder.DropTable(
                name: "BankOrderCosts");

            migrationBuilder.DropTable(
                name: "BankOrderCurrencySources");

            migrationBuilder.DropTable(
                name: "BankOrderIssues");

            migrationBuilder.DropTable(
                name: "BankOrderLogs");

            migrationBuilder.DropTable(
                name: "BaseEntities_BaseEntityConfirmation");

            migrationBuilder.DropTable(
                name: "BaseEntities_BillOfMaterialPublishRequest");

            migrationBuilder.DropTable(
                name: "BaseEntities_ConditionalQualityControlItem");

            migrationBuilder.DropTable(
                name: "BaseEntities_CustomQualityControl");

            migrationBuilder.DropTable(
                name: "BaseEntities_Decomposition");

            migrationBuilder.DropTable(
                name: "BaseEntities_EquivalentStuffUsageConfirmation");

            migrationBuilder.DropTable(
                name: "BaseEntities_EstimatedPurchasePrice");

            migrationBuilder.DropTable(
                name: "BaseEntities_GiveBackExitReceiptRequest");

            migrationBuilder.DropTable(
                name: "BaseEntities_ManualTransaction");

            migrationBuilder.DropTable(
                name: "BaseEntities_OrderItemChangeConfirmation");

            migrationBuilder.DropTable(
                name: "BaseEntities_OrderItemProductionBlock");

            migrationBuilder.DropTable(
                name: "BaseEntities_OrderItemSaleBlock");

            migrationBuilder.DropTable(
                name: "BaseEntities_PaymentDueDate");

            migrationBuilder.DropTable(
                name: "BaseEntities_PreparingSendingItem");

            migrationBuilder.DropTable(
                name: "BaseEntities_ProductionQualityControl");

            migrationBuilder.DropTable(
                name: "BaseEntities_PurchaseStep");

            migrationBuilder.DropTable(
                name: "BaseEntities_QtyCorrectionRequest");

            migrationBuilder.DropTable(
                name: "BaseEntities_ReceiptQualityControl");

            migrationBuilder.DropTable(
                name: "BaseEntities_ResponseConditionalQualityControl");

            migrationBuilder.DropTable(
                name: "BaseEntities_ResponseStuffRequestItem");

            migrationBuilder.DropTable(
                name: "BaseEntities_ResponseWarehouseIssue");

            migrationBuilder.DropTable(
                name: "BaseEntities_ReturnedExitReceiptRequest");

            migrationBuilder.DropTable(
                name: "BaseEntities_StockAdjustment");

            migrationBuilder.DropTable(
                name: "BaseEntities_WarehouseIssueItem");

            migrationBuilder.DropTable(
                name: "BaseEntityDocuments");

            migrationBuilder.DropTable(
                name: "BaseEntityLogs_ReturnOfSaleStatusLog");

            migrationBuilder.DropTable(
                name: "BillOfMaterialDocuments");

            migrationBuilder.DropTable(
                name: "BillOfMaterialPriceHistoryCurrencyRates");

            migrationBuilder.DropTable(
                name: "BillOfMaterialPriceHistoryDetails");

            migrationBuilder.DropTable(
                name: "Calendars");

            migrationBuilder.DropTable(
                name: "CargoCosts");

            migrationBuilder.DropTable(
                name: "CargoItemDetailSummaries");

            migrationBuilder.DropTable(
                name: "CargoItemLogs");

            migrationBuilder.DropTable(
                name: "CargoItemSummaries");

            migrationBuilder.DropTable(
                name: "Contacts");

            migrationBuilder.DropTable(
                name: "CottageItems");

            migrationBuilder.DropTable(
                name: "CurrencyRates");

            migrationBuilder.DropTable(
                name: "CustomerComplaintDepartments");

            migrationBuilder.DropTable(
                name: "DeleteLadingItemDetailInput");

            migrationBuilder.DropTable(
                name: "DepartmentManager");

            migrationBuilder.DropTable(
                name: "DepartmentWorkShifts");

            migrationBuilder.DropTable(
                name: "DetailedCodeConfirmationRequests");

            migrationBuilder.DropTable(
                name: "DocumentResults");

            migrationBuilder.DropTable(
                name: "EditLadingItemDetailInput");

            migrationBuilder.DropTable(
                name: "EmployeeEvaluationItemDetails");

            migrationBuilder.DropTable(
                name: "EmployeeEvaluationPeriodItems");

            migrationBuilder.DropTable(
                name: "EmployeeOperatorTypes");

            migrationBuilder.DropTable(
                name: "EmployeeWorkDetailView");

            migrationBuilder.DropTable(
                name: "EmployeeWorkReportItems");

            migrationBuilder.DropTable(
                name: "EnactmentActionProcessLogs");

            migrationBuilder.DropTable(
                name: "EntityLogs");

            migrationBuilder.DropTable(
                name: "EquivalentStuffDetails");

            migrationBuilder.DropTable(
                name: "ExitReceiptDeleteRequestConfirmationLogs");

            migrationBuilder.DropTable(
                name: "ExitReceiptDeleteRequestStuffSerials");

            migrationBuilder.DropTable(
                name: "ExitReceiptRequestSummaries");

            migrationBuilder.DropTable(
                name: "File");

            migrationBuilder.DropTable(
                name: "FinanceAllocations");

            migrationBuilder.DropTable(
                name: "FinanceAllocationSummaries");

            migrationBuilder.DropTable(
                name: "FinancialAccounts_CooperatorFinancialAccount");

            migrationBuilder.DropTable(
                name: "FinancialDocumentBankOrders");

            migrationBuilder.DropTable(
                name: "FinancialDocumentBeginnings");

            migrationBuilder.DropTable(
                name: "FinancialDocumentCorrections");

            migrationBuilder.DropTable(
                name: "FinancialDocumentTransfers");

            migrationBuilder.DropTable(
                name: "FinancialLimits");

            migrationBuilder.DropTable(
                name: "GeneralStuffRequestDetails");

            migrationBuilder.DropTable(
                name: "InboundCargoCooperators");

            migrationBuilder.DropTable(
                name: "Indicators");

            migrationBuilder.DropTable(
                name: "IranKhodroSerials");

            migrationBuilder.DropTable(
                name: "LadingBankOrderLogs");

            migrationBuilder.DropTable(
                name: "LadingCosts");

            migrationBuilder.DropTable(
                name: "LadingCustomhouseLogs");

            migrationBuilder.DropTable(
                name: "LadingItemDetailSummaries");

            migrationBuilder.DropTable(
                name: "LadingItemSummaries");

            migrationBuilder.DropTable(
                name: "MeetingApprovals");

            migrationBuilder.DropTable(
                name: "MeetingParticipants");

            migrationBuilder.DropTable(
                name: "Memberships");

            migrationBuilder.DropTable(
                name: "MessageSends_PostMessageSend");

            migrationBuilder.DropTable(
                name: "MessageSends_UserMessageSend");

            migrationBuilder.DropTable(
                name: "NewShoppingDetailSummaries");

            migrationBuilder.DropTable(
                name: "Notifications");

            migrationBuilder.DropTable(
                name: "OperationConsumingMaterials");

            migrationBuilder.DropTable(
                name: "OperationSequenceMachineTypeParameters");

            migrationBuilder.DropTable(
                name: "OrderDocuments");

            migrationBuilder.DropTable(
                name: "OrderItemSummaries");

            migrationBuilder.DropTable(
                name: "OrganizationPostHistories");

            migrationBuilder.DropTable(
                name: "PaymentSuggestStatusLogs");

            migrationBuilder.DropTable(
                name: "PayRequests");

            migrationBuilder.DropTable(
                name: "PermissionRequestActions");

            migrationBuilder.DropTable(
                name: "Permissions");

            migrationBuilder.DropTable(
                name: "PriceInquiries");

            migrationBuilder.DropTable(
                name: "ProductionLineEmployeeIntervalDetails");

            migrationBuilder.DropTable(
                name: "ProductionLineWorkShifts");

            migrationBuilder.DropTable(
                name: "ProductionMaterialRequestDetails");

            migrationBuilder.DropTable(
                name: "ProductionOperatorMachineEmployees");

            migrationBuilder.DropTable(
                name: "ProductionOrderSummaries");

            migrationBuilder.DropTable(
                name: "ProductionPerformanceInfoes");

            migrationBuilder.DropTable(
                name: "ProductionPlanDetailSummaries");

            migrationBuilder.DropTable(
                name: "ProductionPlanSummaries");

            migrationBuilder.DropTable(
                name: "ProductionRequestSummaries");

            migrationBuilder.DropTable(
                name: "ProductionScheduleSummaries");

            migrationBuilder.DropTable(
                name: "ProductionStuffDetails_RepairProductionStuffDetail");

            migrationBuilder.DropTable(
                name: "ProjectERPDocuments");

            migrationBuilder.DropTable(
                name: "ProjectERPEventDocumentes");

            migrationBuilder.DropTable(
                name: "ProjectERPLabelLogs");

            migrationBuilder.DropTable(
                name: "ProjectERPResponsibleEmployees");

            migrationBuilder.DropTable(
                name: "ProjectERPTaskDependencies");

            migrationBuilder.DropTable(
                name: "ProjectERPTaskDocumentes");

            migrationBuilder.DropTable(
                name: "ProjectERPTaskLabelLogs");

            migrationBuilder.DropTable(
                name: "ProjectRelatedPeoples");

            migrationBuilder.DropTable(
                name: "ProposalQAReviews");

            migrationBuilder.DropTable(
                name: "ProposalReviewCommittees");

            migrationBuilder.DropTable(
                name: "ProviderHowToBuys");

            migrationBuilder.DropTable(
                name: "ProvisionersCartItemDetails");

            migrationBuilder.DropTable(
                name: "PurchaseOrderCosts");

            migrationBuilder.DropTable(
                name: "PurchaseOrderDetailSummaries");

            migrationBuilder.DropTable(
                name: "PurchaseOrderDiscounts");

            migrationBuilder.DropTable(
                name: "PurchaseOrderPlanCodeView");

            migrationBuilder.DropTable(
                name: "PurchaseOrderResponsibleView");

            migrationBuilder.DropTable(
                name: "PurchaseOrderSummaries");

            migrationBuilder.DropTable(
                name: "PurchaseRequestEditLog");

            migrationBuilder.DropTable(
                name: "PurchaseRequestSummaries");

            migrationBuilder.DropTable(
                name: "QAReviewEmployeeComplain");

            migrationBuilder.DropTable(
                name: "QualityControlConfirmationTestItems");

            migrationBuilder.DropTable(
                name: "QualityControlSamples");

            migrationBuilder.DropTable(
                name: "QualityControlSummaries");

            migrationBuilder.DropTable(
                name: "ReportPrintSettings");

            migrationBuilder.DropTable(
                name: "ReportVersions");

            migrationBuilder.DropTable(
                name: "ResponsibleDepartment");

            migrationBuilder.DropTable(
                name: "ReturnOfSaleSummaries");

            migrationBuilder.DropTable(
                name: "ReturnSerialToPreviousStateRequests");

            migrationBuilder.DropTable(
                name: "RialRates");

            migrationBuilder.DropTable(
                name: "ScrumEntities_ProductRequest");

            migrationBuilder.DropTable(
                name: "ScrumEntities_ProjectStep");

            migrationBuilder.DropTable(
                name: "ScrumEntities_ProjectWork");

            migrationBuilder.DropTable(
                name: "ScrumEntities_ProjectWorkItem");

            migrationBuilder.DropTable(
                name: "ScrumEntityComments");

            migrationBuilder.DropTable(
                name: "ScrumEntityDependencies");

            migrationBuilder.DropTable(
                name: "ScrumEntityDocuments");

            migrationBuilder.DropTable(
                name: "ScrumEntityLogs");

            migrationBuilder.DropTable(
                name: "SendPermissionSummaries");

            migrationBuilder.DropTable(
                name: "SerialBuffers");

            migrationBuilder.DropTable(
                name: "SerialFailedOperationFaultOperationEmployees");

            migrationBuilder.DropTable(
                name: "SerialProfiles_ProductionSerialProfile");

            migrationBuilder.DropTable(
                name: "SerialProfiles_StoreReceiptSerialProfile");

            migrationBuilder.DropTable(
                name: "SoftwareWorkReportItems");

            migrationBuilder.DropTable(
                name: "StockCheckingPersons");

            migrationBuilder.DropTable(
                name: "StockCheckingStuffs");

            migrationBuilder.DropTable(
                name: "StoreReceiptDeleteRequestConfirmationLogs");

            migrationBuilder.DropTable(
                name: "StoreReceiptDeleteRequestStuffSerials");

            migrationBuilder.DropTable(
                name: "StoreReceiptSummaries");

            migrationBuilder.DropTable(
                name: "StuffBasePriceCustoms");

            migrationBuilder.DropTable(
                name: "StuffBasePriceTransports");

            migrationBuilder.DropTable(
                name: "StuffDocuments");

            migrationBuilder.DropTable(
                name: "StuffFractionResults");

            migrationBuilder.DropTable(
                name: "StuffFractionTemporaryStuffs");

            migrationBuilder.DropTable(
                name: "StuffPriceDiscrepancies");

            migrationBuilder.DropTable(
                name: "StuffProductionFaultTypes");

            migrationBuilder.DropTable(
                name: "StuffPurchaseCategoryDetails");

            migrationBuilder.DropTable(
                name: "StuffQualityControlObservations");

            migrationBuilder.DropTable(
                name: "StuffQualityControlTestConditions");

            migrationBuilder.DropTable(
                name: "StuffQualityControlTestEquipments");

            migrationBuilder.DropTable(
                name: "StuffQualityControlTestImportanceDegrees");

            migrationBuilder.DropTable(
                name: "StuffQualityControlTestOperations");

            migrationBuilder.DropTable(
                name: "StuffRequestMilestoneDetailSummaries");

            migrationBuilder.DropTable(
                name: "StuffStockPlaces");

            migrationBuilder.DropTable(
                name: "SuppliesPurchaserUsers");

            migrationBuilder.DropTable(
                name: "TagCountings");

            migrationBuilder.DropTable(
                name: "TerminalTicketRegisteries");

            migrationBuilder.DropTable(
                name: "TicketComments");

            migrationBuilder.DropTable(
                name: "TicketFiles");

            migrationBuilder.DropTable(
                name: "UserMessageRelations");

            migrationBuilder.DropTable(
                name: "UserPosts");

            migrationBuilder.DropTable(
                name: "UserSettings");

            migrationBuilder.DropTable(
                name: "UserTokens");

            migrationBuilder.DropTable(
                name: "WarehouseExitReceiptTypes");

            migrationBuilder.DropTable(
                name: "WarehouseInventoryResults");

            migrationBuilder.DropTable(
                name: "WarehousePriceReportResults");

            migrationBuilder.DropTable(
                name: "WarehouseSotreReceiptTypes");

            migrationBuilder.DropTable(
                name: "WarehouseStuffTypes");

            migrationBuilder.DropTable(
                name: "WarehouseTransactionLevels");

            migrationBuilder.DropTable(
                name: "WeightDays");

            migrationBuilder.DropTable(
                name: "Assets");

            migrationBuilder.DropTable(
                name: "Messages");

            migrationBuilder.DropTable(
                name: "Allocations");

            migrationBuilder.DropTable(
                name: "BankOrderIssueTypes");

            migrationBuilder.DropTable(
                name: "BankOrderStatusTypes");

            migrationBuilder.DropTable(
                name: "BaseEntityConfirmTypes");

            migrationBuilder.DropTable(
                name: "BaseEntities_QualityControlConfirmationItem");

            migrationBuilder.DropTable(
                name: "BaseEntities_EquivalentStuffUsage");

            migrationBuilder.DropTable(
                name: "BaseEntities_OrderItemChangeRequest");

            migrationBuilder.DropTable(
                name: "BaseEntities_OrderItemBlock");

            migrationBuilder.DropTable(
                name: "PaymentTypes");

            migrationBuilder.DropTable(
                name: "HowToBuyDetails");

            migrationBuilder.DropTable(
                name: "BaseEntities_ConditionalQualityControl");

            migrationBuilder.DropTable(
                name: "BaseEntities_RequestWarehouseIssue");

            migrationBuilder.DropTable(
                name: "BaseEntities_StuffRequestItem");

            migrationBuilder.DropTable(
                name: "BaseEntityDocumentTypes");

            migrationBuilder.DropTable(
                name: "BaseEntityLogs");

            migrationBuilder.DropTable(
                name: "BillOfMaterialDocumentTypes");

            migrationBuilder.DropTable(
                name: "BillOfMaterialPriceHistories");

            migrationBuilder.DropTable(
                name: "ContactTypes");

            migrationBuilder.DropTable(
                name: "BankOrderDetails");

            migrationBuilder.DropTable(
                name: "Cottages");

            migrationBuilder.DropTable(
                name: "CustomerComplaintSummaries");

            migrationBuilder.DropTable(
                name: "LadingChangeRequests");

            migrationBuilder.DropTable(
                name: "EmployeeEvaluationItems");

            migrationBuilder.DropTable(
                name: "EvaluationCategoryItems");

            migrationBuilder.DropTable(
                name: "EmployeeWorkReports");

            migrationBuilder.DropTable(
                name: "EnactmentActionProcesses");

            migrationBuilder.DropTable(
                name: "Enactments");

            migrationBuilder.DropTable(
                name: "ExitReceiptDeleteRequests");

            migrationBuilder.DropTable(
                name: "GeneralStuffRequests");

            migrationBuilder.DropTable(
                name: "ApiInfos");

            migrationBuilder.DropTable(
                name: "CustomerStuffVersions");

            migrationBuilder.DropTable(
                name: "LinkSerials");

            migrationBuilder.DropTable(
                name: "ProductionYears");

            migrationBuilder.DropTable(
                name: "LadingBankOrderStatus");

            migrationBuilder.DropTable(
                name: "LadingCustomhouseStatuses");

            migrationBuilder.DropTable(
                name: "MinutesMeetings");

            migrationBuilder.DropTable(
                name: "MessageSends");

            migrationBuilder.DropTable(
                name: "BaseEntities_NewShoppingDetail");

            migrationBuilder.DropTable(
                name: "NotificationGroups");

            migrationBuilder.DropTable(
                name: "MachineTypeParameters");

            migrationBuilder.DropTable(
                name: "PermissionRequests");

            migrationBuilder.DropTable(
                name: "SecurityActions");

            migrationBuilder.DropTable(
                name: "ProductionLineEmployeeIntervals");

            migrationBuilder.DropTable(
                name: "Machines");

            migrationBuilder.DropTable(
                name: "BaseEntities_RepairProductionFault");

            migrationBuilder.DropTable(
                name: "ProductionStuffDetails");

            migrationBuilder.DropTable(
                name: "ProjectERPDocumentTypes");

            migrationBuilder.DropTable(
                name: "ProjectERPEvents");

            migrationBuilder.DropTable(
                name: "ProjectERPLabeles");

            migrationBuilder.DropTable(
                name: "Proposals");

            migrationBuilder.DropTable(
                name: "ProvisionersCartItems");

            migrationBuilder.DropTable(
                name: "FinancialDocumentCosts");

            migrationBuilder.DropTable(
                name: "FinancialDocumentDiscounts");

            migrationBuilder.DropTable(
                name: "QualityControlConfirmationTests");

            migrationBuilder.DropTable(
                name: "Printers");

            migrationBuilder.DropTable(
                name: "Reports");

            migrationBuilder.DropTable(
                name: "EmployeeComplainDepartment");

            migrationBuilder.DropTable(
                name: "FinancialTransactions");

            migrationBuilder.DropTable(
                name: "ScrumEntities_Project");

            migrationBuilder.DropTable(
                name: "ScrumEntities_ScrumTask");

            migrationBuilder.DropTable(
                name: "DocumentTypes");

            migrationBuilder.DropTable(
                name: "BaseTransactions");

            migrationBuilder.DropTable(
                name: "ProductionOperationEmployees");

            migrationBuilder.DropTable(
                name: "ProductionOperatorEmployeeBans");

            migrationBuilder.DropTable(
                name: "SerialFailedOperationFaultOperations");

            migrationBuilder.DropTable(
                name: "SoftwareWorkReports");

            migrationBuilder.DropTable(
                name: "StoreReceiptDeleteRequests");

            migrationBuilder.DropTable(
                name: "BaseEntities_StuffBasePrice");

            migrationBuilder.DropTable(
                name: "QualityControlTestUnits");

            migrationBuilder.DropTable(
                name: "BaseEntities_StuffRequestMilestoneDetail");

            migrationBuilder.DropTable(
                name: "StockPlaces");

            migrationBuilder.DropTable(
                name: "StockCheckingTags");

            migrationBuilder.DropTable(
                name: "TicketSoftwares");

            migrationBuilder.DropTable(
                name: "Posts");

            migrationBuilder.DropTable(
                name: "IndicatorWeights");

            migrationBuilder.DropTable(
                name: "Documents");

            migrationBuilder.DropTable(
                name: "BaseEntities_QualityControlItem");

            migrationBuilder.DropTable(
                name: "EquivalentStuffs");

            migrationBuilder.DropTable(
                name: "QualityControlAccepters");

            migrationBuilder.DropTable(
                name: "WarrantyExpirationExceptionTypes");

            migrationBuilder.DropTable(
                name: "BaseEntities_WarehouseIssue");

            migrationBuilder.DropTable(
                name: "BaseEntities_StuffRequest");

            migrationBuilder.DropTable(
                name: "BaseEntities_CustomsDeclaration");

            migrationBuilder.DropTable(
                name: "CustomerComplaints");

            migrationBuilder.DropTable(
                name: "EmployeeEvaluations");

            migrationBuilder.DropTable(
                name: "EvaluationCategories");

            migrationBuilder.DropTable(
                name: "ProjectERPTaskes");

            migrationBuilder.DropTable(
                name: "CustomerStuffs");

            migrationBuilder.DropTable(
                name: "BaseEntities_LadingItemDetail");

            migrationBuilder.DropTable(
                name: "BaseEntities_NewShopping");

            migrationBuilder.DropTable(
                name: "SecurityActionGroups");

            migrationBuilder.DropTable(
                name: "ProductionFaultTypes");

            migrationBuilder.DropTable(
                name: "ProjectERPEventActionTypes");

            migrationBuilder.DropTable(
                name: "ProjectERPEventCategories");

            migrationBuilder.DropTable(
                name: "ProposalTypes");

            migrationBuilder.DropTable(
                name: "ProvisionersCarts");

            migrationBuilder.DropTable(
                name: "BaseEntities_QualityControlConfirmation");

            migrationBuilder.DropTable(
                name: "StuffQualityControlTests");

            migrationBuilder.DropTable(
                name: "EmployeeComplainItem");

            migrationBuilder.DropTable(
                name: "FinancialTransactionTypes");

            migrationBuilder.DropTable(
                name: "ScrumEntities_ScrumBackLog");

            migrationBuilder.DropTable(
                name: "ScrumTaskTypes");

            migrationBuilder.DropTable(
                name: "TransactionTypes");

            migrationBuilder.DropTable(
                name: "WarehouseFiscalPeriods");

            migrationBuilder.DropTable(
                name: "SerialFailedOperations");

            migrationBuilder.DropTable(
                name: "BaseEntities_StuffRequestMilestone");

            migrationBuilder.DropTable(
                name: "StockCheckingWarehouses");

            migrationBuilder.DropTable(
                name: "BillOfMaterialDetails");

            migrationBuilder.DropTable(
                name: "BaseEntities_ProductionMaterialRequest");

            migrationBuilder.DropTable(
                name: "EmployeeEvaluationPeriods");

            migrationBuilder.DropTable(
                name: "ProjectERPs");

            migrationBuilder.DropTable(
                name: "ProjectERPTaskCategories");

            migrationBuilder.DropTable(
                name: "BaseEntities_CargoItemDetail");

            migrationBuilder.DropTable(
                name: "BaseEntities_LadingItem");

            migrationBuilder.DropTable(
                name: "BaseEntities_QualityControl");

            migrationBuilder.DropTable(
                name: "QualityControlTestConditions");

            migrationBuilder.DropTable(
                name: "QualityControlTestEquipments");

            migrationBuilder.DropTable(
                name: "QualityControlTestImportanceDegrees");

            migrationBuilder.DropTable(
                name: "QualityControlTestOperations");

            migrationBuilder.DropTable(
                name: "EmployeeComplain");

            migrationBuilder.DropTable(
                name: "ScrumEntities_ScrumSprint");

            migrationBuilder.DropTable(
                name: "StockCheckings");

            migrationBuilder.DropTable(
                name: "ProjectERPCategories");

            migrationBuilder.DropTable(
                name: "ProjectERPPhases");

            migrationBuilder.DropTable(
                name: "ProjectERPTypes");

            migrationBuilder.DropTable(
                name: "BaseEntities_PurchaseOrderDetail");

            migrationBuilder.DropTable(
                name: "BaseEntities_Lading");

            migrationBuilder.DropTable(
                name: "TestConditions");

            migrationBuilder.DropTable(
                name: "TestEquipments");

            migrationBuilder.DropTable(
                name: "TestImportanceDegrees");

            migrationBuilder.DropTable(
                name: "QualityControlTests");

            migrationBuilder.DropTable(
                name: "TestOperations");

            migrationBuilder.DropTable(
                name: "ScrumEntities_ScrumProject");

            migrationBuilder.DropTable(
                name: "TagTypes");

            migrationBuilder.DropTable(
                name: "BaseEntities_BankOrder");

            migrationBuilder.DropTable(
                name: "LadingBlockers");

            migrationBuilder.DropTable(
                name: "BankOrderContractTypes");

            migrationBuilder.DropTable(
                name: "Customhouses");

            migrationBuilder.DropTable(
                name: "Currencies");

            migrationBuilder.DropTable(
                name: "Users");

            migrationBuilder.DropTable(
                name: "Departments");

            migrationBuilder.DropTable(
                name: "Employees");

            migrationBuilder.DropTable(
                name: "OrganizationJobs");

            migrationBuilder.DropTable(
                name: "OrganizationPosts");

            migrationBuilder.DropTable(
                name: "Stuffs");

            migrationBuilder.DropTable(
                name: "ScrumEntities_ProjectHeader");

            migrationBuilder.DropTable(
                name: "StuffCategories");

            migrationBuilder.DropTable(
                name: "StuffDefinitionRequests");

            migrationBuilder.DropTable(
                name: "StuffHSGroups");

            migrationBuilder.DropTable(
                name: "ScrumEntities_ScrumProjectGroup");

            migrationBuilder.DropTable(
                name: "StuffPurchaseCategories");

            migrationBuilder.DropTable(
                name: "ScrumEntities");

            migrationBuilder.DropTable(
                name: "StuffSerials");

            migrationBuilder.DropTable(
                name: "BaseEntities_PartitionStuffSerial");

            migrationBuilder.DropTable(
                name: "SerialProfiles");

            migrationBuilder.DropTable(
                name: "Warehouses");

            migrationBuilder.DropTable(
                name: "Units");

            migrationBuilder.DropTable(
                name: "UnitTypes");

            migrationBuilder.DropTable(
                name: "BaseEntities_FinancialDocument");

            migrationBuilder.DropTable(
                name: "FinancialTransactionBatches");

            migrationBuilder.DropTable(
                name: "TransactionBatches");

            migrationBuilder.DropTable(
                name: "Banks");

            migrationBuilder.DropTable(
                name: "BaseEntities");

            migrationBuilder.DropTable(
                name: "Cooperators");

            migrationBuilder.DropTable(
                name: "Cities");

            migrationBuilder.DropTable(
                name: "Countries");

            migrationBuilder.DropTable(
                name: "BillOfMaterials");

            migrationBuilder.DropTable(
                name: "BaseEntities_Cargo");

            migrationBuilder.DropTable(
                name: "BaseEntities_PurchaseOrder");

            migrationBuilder.DropTable(
                name: "BaseEntities_PurchaseOrderGroup");

            migrationBuilder.DropTable(
                name: "PurchaseOrderStepDetails");

            migrationBuilder.DropTable(
                name: "StuffProviders");

            migrationBuilder.DropTable(
                name: "Suppliers");

            migrationBuilder.DropTable(
                name: "PurchaseOrderSteps");

            migrationBuilder.DropTable(
                name: "Forwarders");

            migrationBuilder.DropTable(
                name: "HowToBuys");

            migrationBuilder.DropTable(
                name: "Risks");

            migrationBuilder.DropTable(
                name: "BaseEntities_CargoItem");

            migrationBuilder.DropTable(
                name: "RiskStatuses");

            migrationBuilder.DropTable(
                name: "RiskParameters");

            migrationBuilder.DropTable(
                name: "RiskResolves");

            migrationBuilder.DropTable(
                name: "BaseEntities_OrderItemConfirmation");

            migrationBuilder.DropTable(
                name: "BaseEntities_OrderItem");

            migrationBuilder.DropTable(
                name: "Orders");

            migrationBuilder.DropTable(
                name: "OrderTypes");

            migrationBuilder.DropTable(
                name: "ProductionOperations");

            migrationBuilder.DropTable(
                name: "FaildProductionOperations");

            migrationBuilder.DropTable(
                name: "ProductionOperationEmployeeGroups");

            migrationBuilder.DropTable(
                name: "ProductionOperators");

            migrationBuilder.DropTable(
                name: "ProductionTerminals");

            migrationBuilder.DropTable(
                name: "RepairProductions");

            migrationBuilder.DropTable(
                name: "MachineTypeOperatorTypes");

            migrationBuilder.DropTable(
                name: "OperationSequences");

            migrationBuilder.DropTable(
                name: "BaseEntities_ReturnOfSale");

            migrationBuilder.DropTable(
                name: "Productions");

            migrationBuilder.DropTable(
                name: "WorkStationParts_MachineType");

            migrationBuilder.DropTable(
                name: "WorkStationParts_OperatorType");

            migrationBuilder.DropTable(
                name: "WorkStationOperations");

            migrationBuilder.DropTable(
                name: "BaseEntities_ReturnStoreReceipt");

            migrationBuilder.DropTable(
                name: "BaseEntities_SendProduct");

            migrationBuilder.DropTable(
                name: "BaseEntities_ProductionOrder");

            migrationBuilder.DropTable(
                name: "WorkStationParts");

            migrationBuilder.DropTable(
                name: "Operations");

            migrationBuilder.DropTable(
                name: "BaseEntities_ExitReceipt");

            migrationBuilder.DropTable(
                name: "BaseEntities_PreparingSending");

            migrationBuilder.DropTable(
                name: "BaseEntities_ProductionSchedule");

            migrationBuilder.DropTable(
                name: "WorkStations");

            migrationBuilder.DropTable(
                name: "OperationTypes");

            migrationBuilder.DropTable(
                name: "BaseEntities_OutboundCargo");

            migrationBuilder.DropTable(
                name: "BaseEntities_SendPermission");

            migrationBuilder.DropTable(
                name: "BaseEntities_ProductionPlanDetail");

            migrationBuilder.DropTable(
                name: "CalendarEvents");

            migrationBuilder.DropTable(
                name: "WorkPlanSteps");

            migrationBuilder.DropTable(
                name: "BaseEntities_ExitReceiptRequest");

            migrationBuilder.DropTable(
                name: "BaseEntities_ProductionPlan");

            migrationBuilder.DropTable(
                name: "ProductionPlanDetailLevels");

            migrationBuilder.DropTable(
                name: "WorkShifts");

            migrationBuilder.DropTable(
                name: "ProductionLineProductionSteps");

            migrationBuilder.DropTable(
                name: "WorkPlans");

            migrationBuilder.DropTable(
                name: "ExitReceiptRequestTypes");

            migrationBuilder.DropTable(
                name: "PriceAnnunciationItems");

            migrationBuilder.DropTable(
                name: "BaseEntities_ProductionRequest");

            migrationBuilder.DropTable(
                name: "ProductionLines");

            migrationBuilder.DropTable(
                name: "ProductionSteps");

            migrationBuilder.DropTable(
                name: "PriceAnnunciations");

            migrationBuilder.DropTable(
                name: "BaseEntities_CheckOrderItem");

            migrationBuilder.DropTable(
                name: "ProductionLineRepairUnits");

            migrationBuilder.DropTable(
                name: "UserGroups");

            migrationBuilder.DropTable(
                name: "BaseEntities_StuffPrice");

            migrationBuilder.DropTable(
                name: "Finances");

            migrationBuilder.DropTable(
                name: "FinanceConfirmations");

            migrationBuilder.DropTable(
                name: "FinancialAccountDetails");

            migrationBuilder.DropTable(
                name: "FinancialAccounts");

            migrationBuilder.DropTable(
                name: "BaseEntities_Transport");

            migrationBuilder.DropTable(
                name: "BaseEntities_StoreReceipt");

            migrationBuilder.DropTable(
                name: "BaseEntities_InboundCargo");

            migrationBuilder.DropTable(
                name: "BaseEntities_PurchasePrice");

            migrationBuilder.DropTable(
                name: "BaseEntities_Receipt");

            migrationBuilder.DropTable(
                name: "BaseEntities_PurchaseRequest");

            migrationBuilder.DropTable(
                name: "CostCenters");

            migrationBuilder.DropTable(
                name: "PlanCodes");

            migrationBuilder.DropTable(
                name: "PurchaseRequestStepDetails");

            migrationBuilder.DropTable(
                name: "PurchaseRequestSteps");

            migrationBuilder.DropTable(
                name: "FinanceItems");

            migrationBuilder.DropTable(
                name: "FinanceItemAllocationSummaries");

            migrationBuilder.DropTable(
                name: "FinanceItemConfirmations");
        }
    }
}
