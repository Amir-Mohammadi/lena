// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using core.Data;

namespace lena.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211002115350_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("lena.Domains.ActionParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CheckParameterValue")
                        .HasColumnType("bit");

                    b.Property<string>("ParameterKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParameterValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SecurityActionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SecurityActionId");

                    b.ToTable("ActionParamater");
                });

            modelBuilder.Entity("lena.Domains.AddLadingItemDetailChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CargoItemDetailId")
                        .HasColumnType("int");

                    b.Property<int>("CargoItemId")
                        .HasColumnType("int");

                    b.Property<int>("LadingChangeRequestId")
                        .HasColumnType("int");

                    b.Property<int>("LadingIemId")
                        .HasColumnType("int");

                    b.Property<double>("Qty")
                        .HasColumnType("float");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("LadingChangeRequestId");

                    b.ToTable("AddLadingItemDetailInputs");
                });

            modelBuilder.Entity("lena.Domains.Allocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("BankOrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BeginningDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<byte>("CurrencyId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime>("FinalizationDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("ReceivedDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("StatisticalRegistrationCertificate")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BankOrderId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("UserId");

                    b.ToTable("Allocations");
                });

            modelBuilder.Entity("lena.Domains.ApiInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Param")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SortTypeFieldName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SortTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApiInfos");
                });

            modelBuilder.Entity("lena.Domains.ApplicationLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LogTime")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("RequestEndTime")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ApplicationLogs");
                });

            modelBuilder.Entity("lena.Domains.ApplicationSetting", b =>
                {
                    b.Property<short>("SettingKey")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SettingKeyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SettingKey");

                    b.ToTable("ApplicationSettings");
                });

            modelBuilder.Entity("lena.Domains.Asset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<short>("DepartmentId")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StuffId")
                        .HasColumnType("int");

                    b.Property<long>("StuffSerialCode")
                        .HasColumnType("bigint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("WarehouseId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("StuffId");

                    b.HasIndex("UserId");

                    b.HasIndex("WarehouseId");

                    b.HasIndex("StuffSerialCode", "StuffId")
                        .IsUnique();

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("lena.Domains.AssetLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<short>("DepartmentId")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("AssetLogs");
                });

            modelBuilder.Entity("lena.Domains.AssetTransferRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ConfirmDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int?>("ConfirmerUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("NewDepartmentId")
                        .HasColumnType("smallint");

                    b.Property<int?>("NewEmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("RequestingUserId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("ConfirmerUserId");

                    b.HasIndex("NewDepartmentId");

                    b.HasIndex("NewEmployeeId");

                    b.HasIndex("RequestingUserId");

                    b.ToTable("AssetTransferRequests");
                });

            modelBuilder.Entity("lena.Domains.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("FileContent")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<double>("Size")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("lena.Domains.Bank", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("lena.Domains.BankOrderContractType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BankOrderContractTypes");
                });

            modelBuilder.Entity("lena.Domains.BankOrderCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("BankOrderId")
                        .HasColumnType("int");

                    b.Property<int>("FinancialDocumentCostId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("BankOrderId");

                    b.HasIndex("FinancialDocumentCostId");

                    b.ToTable("BankOrderCosts");
                });

            modelBuilder.Entity("lena.Domains.BankOrderCurrencySource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("ActualWeight")
                        .HasColumnType("float");

                    b.Property<int>("BankOrderId")
                        .HasColumnType("int");

                    b.Property<int>("BoxCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<double>("FOB")
                        .HasColumnType("float");

                    b.Property<bool>("HasFinancialDocumentBankOrder")
                        .HasColumnType("bit");

                    b.Property<int>("LadingId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SataCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TransferCost")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BankOrderId");

                    b.HasIndex("LadingId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("BankOrderCurrencySources");
                });

            modelBuilder.Entity("lena.Domains.BankOrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BankOrderId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Fee")
                        .HasColumnType("float");

                    b.Property<double>("GrossWeight")
                        .HasColumnType("float");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double>("Qty")
                        .HasColumnType("float");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("StuffHSGroupId")
                        .HasColumnType("int");

                    b.Property<byte>("UnitId")
                        .HasColumnType("tinyint");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BankOrderId");

                    b.HasIndex("StuffHSGroupId");

                    b.HasIndex("UnitId");

                    b.ToTable("BankOrderDetails");
                });

            modelBuilder.Entity("lena.Domains.BankOrderIssue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AllocationId")
                        .HasColumnType("int");

                    b.Property<int>("BankOrderIssueTypeId")
                        .HasColumnType("int");

                    b.Property<double>("ConvertRate")
                        .HasColumnType("float");

                    b.Property<double>("CurrencyFee")
                        .HasColumnType("float");

                    b.Property<double>("DailyExchangeRateUSD")
                        .HasColumnType("float");

                    b.Property<double>("DailyUSDRate")
                        .HasColumnType("float");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FinancialDocumentId")
                        .HasColumnType("int");

                    b.Property<double>("FinishedCurrencyRate")
                        .HasColumnType("float");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<double>("NetAmountPaid")
                        .HasColumnType("float");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("RialFee")
                        .HasColumnType("float");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("AllocationId");

                    b.HasIndex("BankOrderIssueTypeId");

                    b.HasIndex("FinancialDocumentId");

                    b.ToTable("BankOrderIssues");
                });

            modelBuilder.Entity("lena.Domains.BankOrderIssueType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("BankOrderIssueTypes");
                });

            modelBuilder.Entity("lena.Domains.BankOrderLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BankOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("BankOrderId1")
                        .HasColumnType("int");

                    b.Property<int>("BankOrderStatusTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BankOrderId");

                    b.HasIndex("BankOrderId1")
                        .IsUnique()
                        .HasFilter("[BankOrderId1] IS NOT NULL");

                    b.HasIndex("BankOrderStatusTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("BankOrderLogs");
                });

            modelBuilder.Entity("lena.Domains.BankOrderStatusType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("BankOrderStatusTypes");
                });

            modelBuilder.Entity("lena.Domains.BaseEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FinancialTransactionBatchId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("TransactionBatchId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FinancialTransactionBatchId")
                        .IsUnique()
                        .HasFilter("[FinancialTransactionBatchId] IS NOT NULL");

                    b.HasIndex("TransactionBatchId")
                        .IsUnique()
                        .HasFilter("[TransactionBatchId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("BaseEntities");
                });

            modelBuilder.Entity("lena.Domains.BaseEntityConfirmType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConfirmPageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("ConfirmType")
                        .HasColumnType("tinyint");

                    b.Property<short>("DepartmentId")
                        .HasColumnType("smallint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("BaseEntityConfirmTypes");
                });

            modelBuilder.Entity("lena.Domains.BaseEntityDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BaseEntityDocumentTypeId")
                        .HasColumnType("int");

                    b.Property<int>("BaseEntityId")
                        .HasColumnType("int");

                    b.Property<int?>("CooperatorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BaseEntityDocumentTypeId");

                    b.HasIndex("BaseEntityId");

                    b.HasIndex("CooperatorId");

                    b.HasIndex("UserId");

                    b.ToTable("BaseEntityDocuments");
                });

            modelBuilder.Entity("lena.Domains.BaseEntityDocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("EntityType")
                        .HasColumnType("tinyint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BaseEntityDocumentTypes");
                });

            modelBuilder.Entity("lena.Domains.BaseEntityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BaseEntityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BaseEntityId");

                    b.HasIndex("UserId");

                    b.ToTable("BaseEntityLogs");
                });

            modelBuilder.Entity("lena.Domains.BaseTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<short?>("BillOfMaterialVersion")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EffectDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsEstimated")
                        .HasColumnType("bit");

                    b.Property<int?>("ReferenceTransactionId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("StuffId")
                        .HasColumnType("int");

                    b.Property<long?>("StuffSerialCode")
                        .HasColumnType("bigint");

                    b.Property<int>("TransactionBatchId")
                        .HasColumnType("int");

                    b.Property<short>("TransactionTypeId")
                        .HasColumnType("smallint");

                    b.Property<byte>("UnitId")
                        .HasColumnType("tinyint");

                    b.Property<short>("WarehouseFiscalPeriodId")
                        .HasColumnType("smallint");

                    b.Property<short?>("WarehouseId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ReferenceTransactionId");

                    b.HasIndex("StuffId");

                    b.HasIndex("TransactionBatchId");

                    b.HasIndex("TransactionTypeId");

                    b.HasIndex("UnitId");

                    b.HasIndex("WarehouseFiscalPeriodId");

                    b.HasIndex("WarehouseId");

                    b.HasIndex("BillOfMaterialVersion", "StuffId");

                    b.HasIndex("StuffSerialCode", "StuffId");

                    b.ToTable("BaseTransactions");
                });

            modelBuilder.Entity("lena.Domains.BillOfMaterial", b =>
                {
                    b.Property<short>("Version")
                        .HasColumnType("smallint");

                    b.Property<int>("StuffId")
                        .HasColumnType("int");

                    b.Property<byte>("BillOfMaterialVersionType")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<int>("ProductionStepId")
                        .HasColumnType("int");

                    b.Property<int>("QtyPerBox")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("UnitId")
                        .HasColumnType("tinyint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Version", "StuffId");

                    b.HasIndex("ProductionStepId");

                    b.HasIndex("StuffId");

                    b.HasIndex("UnitId");

                    b.HasIndex("UserId");

                    b.ToTable("BillOfMaterials");
                });

            modelBuilder.Entity("lena.Domains.BillOfMaterialDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("BillOfMaterialDetailType")
                        .HasColumnType("tinyint");

                    b.Property<int>("BillOfMaterialStuffId")
                        .HasColumnType("int");

                    b.Property<short>("BillOfMaterialVersion")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ForQty")
                        .HasColumnType("float");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<bool>("IsPackingMaterial")
                        .HasColumnType("bit");

                    b.Property<bool>("Reservable")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<short?>("SemiProductBillOfMaterialVersion")
                        .HasColumnType("smallint");

                    b.Property<int>("StuffId")
                        .HasColumnType("int");

                    b.Property<byte>("UnitId")
                        .HasColumnType("tinyint");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("StuffId");

                    b.HasIndex("UnitId");

                    b.HasIndex("BillOfMaterialVersion", "BillOfMaterialStuffId");

                    b.HasIndex("SemiProductBillOfMaterialVersion", "StuffId");

                    b.ToTable("BillOfMaterialDetails");
                });

            modelBuilder.Entity("lena.Domains.BillOfMaterialDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BillOfMaterialDocumentTypeId")
                        .HasColumnType("int");

                    b.Property<int>("BillOfMaterialStuffId")
                        .HasColumnType("int");

                    b.Property<short>("BillOfMaterialVersion")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("DateOfDelete")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BillOfMaterialDocumentTypeId");

                    b.HasIndex("UserId");

                    b.HasIndex("BillOfMaterialVersion", "BillOfMaterialStuffId");

                    b.ToTable("BillOfMaterialDocuments");
                });

            modelBuilder.Entity("lena.Domains.BillOfMaterialDocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BillOfMaterialDocumentTypes");
                });

            modelBuilder.Entity("lena.Domains.BillOfMaterialPriceHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("CurrencyId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("StuffId")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("Version")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("StuffId");

                    b.HasIndex("UserId");

                    b.ToTable("BillOfMaterialPriceHistories");
                });

            modelBuilder.Entity("lena.Domains.BillOfMaterialPriceHistoryCurrencyRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BillOfMaterialPriceHistoryId")
                        .HasColumnType("int");

                    b.Property<byte>("FromCurrencyId")
                        .HasColumnType("tinyint");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte>("ToCurrencyId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("BillOfMaterialPriceHistoryId");

                    b.HasIndex("FromCurrencyId");

                    b.HasIndex("ToCurrencyId");

                    b.ToTable("BillOfMaterialPriceHistoryCurrencyRates");
                });

            modelBuilder.Entity("lena.Domains.BillOfMaterialPriceHistoryDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<double>("AverageEstimatedFee")
                        .HasColumnType("float");

                    b.Property<double>("AveragePurchaseFee")
                        .HasColumnType("float");

                    b.Property<int?>("BaseCurrencyId")
                        .HasColumnType("int");

                    b.Property<double?>("BaseCustomsFee")
                        .HasColumnType("float");

                    b.Property<double?>("BaseFee")
                        .HasColumnType("float");

                    b.Property<double?>("BaseFeeByOwnCurrency")
                        .HasColumnType("float");

                    b.Property<DateTime?>("BaseFeeDateTime")
                        .HasColumnType("datetime2");

                    b.Property<double?>("BasePrice")
                        .HasColumnType("float");

                    b.Property<long?>("BasePriceId")
                        .HasColumnType("bigint");

                    b.Property<double?>("BaseTotalFee")
                        .HasColumnType("float");

                    b.Property<double?>("BaseTransportFee")
                        .HasColumnType("float");

                    b.Property<int>("BillOfMaerialPriceHistoryId")
                        .HasColumnType("int");

                    b.Property<double>("Factor")
                        .HasColumnType("float");

                    b.Property<DateTime?>("LastEstimateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<double?>("LastEstimatedFee")
                        .HasColumnType("float");

                    b.Property<double?>("LastEstimatedFeeInSourceCurrency")
                        .HasColumnType("float");

                    b.Property<int?>("LastEstimatedFeeSourceCurrencyId")
                        .HasColumnType("int");

                    b.Property<double?>("LastPurchaseFee")
                        .HasColumnType("float");

                    b.Property<DateTime?>("LastPurchaseFeeDateTime")
                        .HasColumnType("datetime2");

                    b.Property<double?>("LastPurchaseFeeInSourceCurrency")
                        .HasColumnType("float");

                    b.Property<int?>("LastPurchaseFeeSourceCurrencyId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("StuffId")
                        .HasColumnType("int");

                    b.Property<int?>("StuffPriceCurrencyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StuffPriceDateTime")
                        .HasColumnType("datetime2");

                    b.Property<short?>("StuffPriceStatus")
                        .HasColumnType("smallint");

                    b.Property<byte>("UnitId")
                        .HasColumnType("tinyint");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BillOfMaerialPriceHistoryId");

                    b.ToTable("BillOfMaterialPriceHistoryDetails");
                });

            modelBuilder.Entity("lena.Domains.Calendar", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("smalldatetime");

                    b.Property<bool>("IsHoliday")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWorkingDay")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Date");

                    b.ToTable("Calendars");
                });

            modelBuilder.Entity("lena.Domains.CalendarEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<long>("Duration")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int?>("WorkShiftId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkShiftId");

                    b.ToTable("CalendarEvents");
                });

            modelBuilder.Entity("lena.Domains.CargoCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int?>("CargoId")
                        .HasColumnType("int");

                    b.Property<int>("CargoItemId")
                        .HasColumnType("int");

                    b.Property<int>("FinancialDocumentCostId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("CargoId");

                    b.HasIndex("CargoItemId");

                    b.HasIndex("FinancialDocumentCostId");

                    b.ToTable("CargoCosts");
                });

            modelBuilder.Entity("lena.Domains.CargoItemDetailSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CargoItemDetailId")
                        .HasColumnType("int");

                    b.Property<double>("LadingItemDetailQty")
                        .HasColumnType("float");

                    b.Property<double>("QualityControlFailedQty")
                        .HasColumnType("float");

                    b.Property<double>("QualityControlPassedQty")
                        .HasColumnType("float");

                    b.Property<double>("ReceiptedQty")
                        .HasColumnType("float");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("CargoItemDetailId")
                        .IsUnique();

                    b.ToTable("CargoItemDetailSummaries");
                });

            modelBuilder.Entity("lena.Domains.CargoItemLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CargoItemCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CargoItemId")
                        .HasColumnType("int");

                    b.Property<byte>("CargoItemLogStatus")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("ModifierUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<double>("NewCargoItemQty")
                        .HasColumnType("float");

                    b.Property<double>("OldCargoItemDetailQty")
                        .HasColumnType("float");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("CargoItemId");

                    b.HasIndex("ModifierUserId");

                    b.ToTable("CargoItemLogs");
                });

            modelBuilder.Entity("lena.Domains.CargoItemSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CargoItemId")
                        .HasColumnType("int");

                    b.Property<double>("LadingItemQty")
                        .HasColumnType("float");

                    b.Property<double>("QualityControlFailedQty")
                        .HasColumnType("float");

                    b.Property<double>("QualityControlPassedQty")
                        .HasColumnType("float");

                    b.Property<double>("ReceiptedQty")
                        .HasColumnType("float");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("CargoItemId")
                        .IsUnique();

                    b.ToTable("CargoItemSummaries");
                });

            modelBuilder.Entity("lena.Domains.City", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("CountryId")
                        .HasColumnType("tinyint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("lena.Domains.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContactTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("CooperatorId")
                        .HasColumnType("int");

                    b.Property<int?>("CooperatorId1")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContactTypeId");

                    b.HasIndex("CooperatorId");

                    b.HasIndex("CooperatorId1");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("lena.Domains.ContactType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("EssentialContactType")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("ContactTypes");
                });

            modelBuilder.Entity("lena.Domains.Cooperator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("CityId")
                        .HasColumnType("smallint");

                    b.Property<string>("Code")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<bool>("ConfirmationDetailedCode")
                        .HasColumnType("bit");

                    b.Property<int>("CooperatorType")
                        .HasColumnType("int");

                    b.Property<string>("DetailedCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("ProviderType")
                        .HasColumnType("tinyint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Cooperators");
                });

            modelBuilder.Entity("lena.Domains.CostCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ConfirmDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int?>("ConfirmerUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("ConfirmerUserId");

                    b.ToTable("CostCenters");
                });

            modelBuilder.Entity("lena.Domains.Cottage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomsDeclarationId")
                        .HasColumnType("int");

                    b.Property<string>("Index")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("CustomsDeclarationId");

                    b.ToTable("Cottages");
                });

            modelBuilder.Entity("lena.Domains.CottageItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BankOrderDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("CottageId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("StuffHSGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BankOrderDetailId");

                    b.HasIndex("CottageId");

                    b.HasIndex("StuffHSGroupId");

                    b.ToTable("CottageItems");
                });

            modelBuilder.Entity("lena.Domains.Country", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("lena.Domains.Currency", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("DecimalDigitCount")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Sign")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("lena.Domains.CurrencyRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Commission")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("ExchangeId")
                        .HasColumnType("int");

                    b.Property<byte>("FromCurrencyId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("FromDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte>("ToCurrencyId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("ExchangeId");

                    b.HasIndex("FromCurrencyId");

                    b.HasIndex("ToCurrencyId");

                    b.ToTable("CurrencyRates");
                });

            modelBuilder.Entity("lena.Domains.CustomerComplaint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComplaintTypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("ComplaintTypes")
                        .HasColumnType("tinyint");

                    b.Property<byte>("CustomerComplaintType")
                        .HasColumnType("tinyint");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateOfComplaint")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RegisterarDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int?>("RegisterarUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ResponseDeadline")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RegisterarUserId");

                    b.HasIndex("UserId");

                    b.ToTable("CustomerComplaints");
                });

            modelBuilder.Entity("lena.Domains.CustomerComplaintDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerComplaintSummaryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateOfInhibition")
                        .HasColumnType("datetime2");

                    b.Property<short>("DepartmentId")
                        .HasColumnType("smallint");

                    b.Property<string>("InhibitionAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("CustomerComplaintSummaryId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("CustomerComplaintDepartments");
                });

            modelBuilder.Entity("lena.Domains.CustomerComplaintSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ComplaintClassificationTypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("ComplaintClassificationTypes")
                        .HasColumnType("smallint");

                    b.Property<string>("ComplaintTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorrectiveAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CorrectiveActionDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CorrectiveActionDocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CorrectiveActionUserId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerComplaintId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerOpinion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfAnnouncement")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("OccurrenceProbabilityStatus")
                        .HasColumnType("tinyint");

                    b.Property<byte>("OccurrenceSeverityStatus")
                        .HasColumnType("tinyint");

                    b.Property<string>("QAOpinion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("RiskLevelStatus")
                        .HasColumnType("tinyint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("CorrectiveActionUserId");

                    b.HasIndex("CustomerComplaintId");

                    b.ToTable("CustomerComplaintSummaries");
                });

            modelBuilder.Entity("lena.Domains.CustomerStuff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .IsFixedLength(true);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("ManufacturerCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .IsFixedLength(true);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("StuffId")
                        .HasColumnType("int");

                    b.Property<string>("TechnicalNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StuffId");

                    b.ToTable("CustomerStuffs");
                });

            modelBuilder.Entity("lena.Domains.CustomerStuffVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .IsFixedLength(true);

                    b.Property<int>("CustomerStuffId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPublish")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("CustomerStuffId");

                    b.ToTable("CustomerStuffVersions");
                });

            modelBuilder.Entity("lena.Domains.Customhouse", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customhouses");
                });

            modelBuilder.Entity("lena.Domains.DeleteLadingItemDetailChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CargoItemId")
                        .HasColumnType("int");

                    b.Property<int>("LadingChangeRequestId")
                        .HasColumnType("int");

                    b.Property<int>("LadingIemId")
                        .HasColumnType("int");

                    b.Property<int>("LadingItemDetailId")
                        .HasColumnType("int");

                    b.Property<byte[]>("LadingItemDetailRowVersion")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("LadingChangeRequestId");

                    b.ToTable("DeleteLadingItemDetailInput");
                });

            modelBuilder.Entity("lena.Domains.Department", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("ParentDepartmentId")
                        .HasColumnType("smallint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("ParentDepartmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("lena.Domains.DepartmentManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<short?>("DepartmentId")
                        .HasColumnType("smallint");

                    b.Property<int?>("OrganizationPostId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId")
                        .IsUnique()
                        .HasFilter("[DepartmentId] IS NOT NULL");

                    b.HasIndex("OrganizationPostId")
                        .IsUnique()
                        .HasFilter("[OrganizationPostId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("DepartmentManager");
                });

            modelBuilder.Entity("lena.Domains.DepartmentWorkShift", b =>
                {
                    b.Property<int>("WorkShiftId")
                        .HasColumnType("int");

                    b.Property<short>("DepartmentId")
                        .HasColumnType("smallint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("WorkShiftId", "DepartmentId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("DepartmentWorkShifts");
                });

            modelBuilder.Entity("lena.Domains.DetailedCodeConfirmationRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ConfirmationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ConfirmationUserId")
                        .HasColumnType("int");

                    b.Property<int?>("CooperatorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetailedCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("DetailedCodeEntityType")
                        .HasColumnType("tinyint");

                    b.Property<byte>("DetailedCodeRequestType")
                        .HasColumnType("tinyint");

                    b.Property<int?>("ProductionLineId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConfirmationUserId");

                    b.HasIndex("CooperatorId");

                    b.HasIndex("ProductionLineId");

                    b.HasIndex("UserId");

                    b.ToTable("DetailedCodeConfirmationRequests");
                });

            modelBuilder.Entity("lena.Domains.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("smalldatetime");

                    b.Property<double>("FileSize")
                        .HasColumnType("float");

                    b.Property<byte[]>("FileStream")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("lena.Domains.DocumentResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("FileStream")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDirectory")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("DocumentResults");
                });

            modelBuilder.Entity("lena.Domains.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("lena.Domains.EditLadingItemDetailChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CargoItemDetailId")
                        .HasColumnType("int");

                    b.Property<int>("CargoItemId")
                        .HasColumnType("int");

                    b.Property<int>("LadingChangeRequestId")
                        .HasColumnType("int");

                    b.Property<int>("LadingIemId")
                        .HasColumnType("int");

                    b.Property<int>("LadingItemDetailId")
                        .HasColumnType("int");

                    b.Property<byte[]>("LadingItemDetailRowVersion")
                        .HasColumnType("varbinary(max)");

                    b.Property<double>("Qty")
                        .HasColumnType("float");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("LadingChangeRequestId");

                    b.ToTable("EditLadingItemDetailInput");
                });

            modelBuilder.Entity("lena.Domains.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("BirthPlace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short?>("DepartmentId")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EmployeementDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrganizationJobId")
                        .HasColumnType("int");

                    b.Property<int?>("OrgnizationPostId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("OrganizationJobId");

                    b.HasIndex("OrgnizationPostId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("lena.Domains.EmployeeComplain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("EmployeeComplain");
                });

            modelBuilder.Entity("lena.Domains.EmployeeComplainDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("DepartmentId")
                        .HasColumnType("smallint");

                    b.Property<int>("EmployeeComplainItemId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeComplainItemId");

                    b.ToTable("EmployeeComplainDepartment");
                });

            modelBuilder.Entity("lena.Domains.EmployeeComplainItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeComplainId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeComplainId");

                    b.ToTable("EmployeeComplainItem");
                });

            modelBuilder.Entity("lena.Domains.EmployeeEvaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeEvaluationPeriodId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("EmployeeEvaluationPeriodId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeEvaluations");
                });

            modelBuilder.Entity("lena.Domains.EmployeeEvaluationItem", b =>
                {
                    b.Property<int>("EmployeeEvaluationId")
                        .HasColumnType("int");

                    b.Property<int>("EvaluationCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PermanentDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeEvaluationId", "EvaluationCategoryId");

                    b.HasIndex("EvaluationCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("EmployeeEvaluationItems");
                });

            modelBuilder.Entity("lena.Domains.EmployeeEvaluationItemDetail", b =>
                {
                    b.Property<int>("EmployeeEvaluationId")
                        .HasColumnType("int");

                    b.Property<int>("EvaluationCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("EvaluationCategoryItemId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte>("Score")
                        .HasColumnType("tinyint");

                    b.HasKey("EmployeeEvaluationId", "EvaluationCategoryId", "EvaluationCategoryItemId");

                    b.HasIndex("EvaluationCategoryItemId");

                    b.ToTable("EmployeeEvaluationItemDetails");
                });

            modelBuilder.Entity("lena.Domains.EmployeeEvaluationPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("FromDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ToDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EmployeeEvaluationPeriods");
                });

            modelBuilder.Entity("lena.Domains.EmployeeEvaluationPeriodItem", b =>
                {
                    b.Property<int>("EmployeeEvaluationPeriodId")
                        .HasColumnType("int");

                    b.Property<int>("EvaluationCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Coefficient")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("EmployeeEvaluationPeriodId", "EvaluationCategoryId");

                    b.HasIndex("EvaluationCategoryId");

                    b.ToTable("EmployeeEvaluationPeriodItems");
                });

            modelBuilder.Entity("lena.Domains.EmployeeOperatorType", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<short>("OperatorTypeId")
                        .HasColumnType("smallint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("EmployeeId", "OperatorTypeId");

                    b.HasIndex("OperatorTypeId");

                    b.ToTable("EmployeeOperatorTypes");
                });

            modelBuilder.Entity("lena.Domains.EmployeeWorkDetailView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FirstEnterTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastExitTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PersianDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UtcDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkTime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("EmployeeWorkDetailView");
                });

            modelBuilder.Entity("lena.Domains.EmployeeWorkReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectERPTaskId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReportDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProjectERPTaskId");

                    b.HasIndex("UserId");

                    b.ToTable("EmployeeWorkReports");
                });

            modelBuilder.Entity("lena.Domains.EmployeeWorkReportItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeWorkReportId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("FromTime")
                        .HasColumnType("time");

                    b.Property<string>("Operation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<TimeSpan>("ToTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeWorkReportId");

                    b.ToTable("EmployeeWorkReportItems");
                });

            modelBuilder.Entity("lena.Domains.Enactment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ActionDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("BankOrderId")
                        .HasColumnType("int");

                    b.Property<double>("CollateralAmount")
                        .HasColumnType("float");

                    b.Property<byte>("CollateralType")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReceiveDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BankOrderId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Enactments");
                });

            modelBuilder.Entity("lena.Domains.EnactmentActionProcess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("EnactmentActionProcesses");
                });

            modelBuilder.Entity("lena.Domains.EnactmentActionProcessLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EnactmentActionProcessId")
                        .HasColumnType("int");

                    b.Property<int>("EnactmentId")
                        .HasColumnType("int");

                    b.Property<int?>("EnactmentId1")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnactmentActionProcessId");

                    b.HasIndex("EnactmentId");

                    b.HasIndex("EnactmentId1")
                        .IsUnique()
                        .HasFilter("[EnactmentId1] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("EnactmentActionProcessLogs");
                });

            modelBuilder.Entity("lena.Domains.EntityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Api")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApiParams")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EntityLogs");
                });

            modelBuilder.Entity("lena.Domains.EquivalentStuff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BillOfMaterialDetailId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("EquivalentStuffType")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BillOfMaterialDetailId");

                    b.ToTable("EquivalentStuffs");
                });

            modelBuilder.Entity("lena.Domains.EquivalentStuffDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EquivalentStuffId")
                        .HasColumnType("int");

                    b.Property<double>("ForQty")
                        .HasColumnType("float");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<short?>("SemiProductBillOfMaterialVersion")
                        .HasColumnType("smallint");

                    b.Property<int>("StuffId")
                        .HasColumnType("int");

                    b.Property<byte>("UnitId")
                        .HasColumnType("tinyint");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("EquivalentStuffId");

                    b.HasIndex("StuffId");

                    b.HasIndex("UnitId");

                    b.HasIndex("SemiProductBillOfMaterialVersion", "StuffId");

                    b.ToTable("EquivalentStuffDetails");
                });

            modelBuilder.Entity("lena.Domains.EvaluationCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short?>("DepartmentId")
                        .HasColumnType("smallint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("EvaluationCategories");
                });

            modelBuilder.Entity("lena.Domains.EvaluationCategoryItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EvaluationCategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("bit");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("EvaluationCategoryId");

                    b.ToTable("EvaluationCategoryItems");
                });

            modelBuilder.Entity("lena.Domains.ExitReceiptDeleteRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ChangeStatusDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int?>("ChangeStatusUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("CreatorUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExitReceiptId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("ChangeStatusUserId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("ExitReceiptId");

                    b.ToTable("ExitReceiptDeleteRequests");
                });

            modelBuilder.Entity("lena.Domains.ExitReceiptDeleteRequestConfirmationLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConfirmerUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExitReceiptDeleteRequestId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("ConfirmerUserId");

                    b.HasIndex("ExitReceiptDeleteRequestId");

                    b.ToTable("ExitReceiptDeleteRequestConfirmationLogs");
                });

            modelBuilder.Entity("lena.Domains.ExitReceiptDeleteRequestStuffSerial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("ExitReceiptDeleteRequestId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<long>("StuffSerialCode")
                        .HasColumnType("bigint");

                    b.Property<int>("StuffSerialId")
                        .HasColumnType("int");

                    b.Property<byte>("UnitId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("ExitReceiptDeleteRequestId");

                    b.HasIndex("UnitId");

                    b.HasIndex("StuffSerialCode", "StuffSerialId");

                    b.ToTable("ExitReceiptDeleteRequestStuffSerials");
                });

            modelBuilder.Entity("lena.Domains.ExitReceiptRequestSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ExitReceiptRequestId")
                        .HasColumnType("int");

                    b.Property<double>("PermissionQty")
                        .HasColumnType("float");

                    b.Property<double>("PreparingSendingQty")
                        .HasColumnType("float");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<double>("SendedQty")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ExitReceiptRequestId")
                        .IsUnique();

                    b.ToTable("ExitReceiptRequestSummaries");
                });

            modelBuilder.Entity("lena.Domains.ExitReceiptRequestType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AutoConfirm")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ExitReceiptRequestTypes");
                });

            modelBuilder.Entity("lena.Domains.FaildProductionOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("RepairProductionId")
                        .HasColumnType("int");

                    b.Property<int?>("ReworkProductionOperationId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("RepairProductionId");

                    b.HasIndex("ReworkProductionOperationId")
                        .IsUnique()
                        .HasFilter("[ReworkProductionOperationId] IS NOT NULL");

                    b.ToTable("FaildProductionOperations");
                });

            modelBuilder.Entity("lena.Domains.Files.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("FileStream")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("File");
                });

            modelBuilder.Entity("lena.Domains.Finance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("CooperatorId")
                        .HasColumnType("int");

                    b.Property<byte>("CurrencyId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FinanacialAccountDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("LastConfimationId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CooperatorId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("FinanacialAccountDetailId");

                    b.HasIndex("LastConfimationId")
                        .IsUnique()
                        .HasFilter("[LastConfimationId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Finances");
                });

            modelBuilder.Entity("lena.Domains.FinanceAllocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AllocationDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("ChequeNumber")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FinanceId")
                        .HasColumnType("int");

                    b.Property<byte>("PaymentMethod")
                        .HasColumnType("tinyint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FinanceId");

                    b.HasIndex("UserId");

                    b.ToTable("FinanceAllocations");
                });

            modelBuilder.Entity("lena.Domains.FinanceAllocationSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AllocatedAmount")
                        .HasColumnType("float");

                    b.Property<int>("FinanceId")
                        .HasColumnType("int");

                    b.Property<double>("RequestedAmount")
                        .HasColumnType("float");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<double>("SeparatedTransferAmount")
                        .HasColumnType("float");

                    b.Property<double>("TransferredAmount")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("FinanceId")
                        .IsUnique();

                    b.ToTable("FinanceAllocationSummaries");
                });

            modelBuilder.Entity("lena.Domains.FinanceConfirmation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("FinanceId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FinanceId");

                    b.HasIndex("UserId");

                    b.ToTable("FinanceConfirmations");
                });

            modelBuilder.Entity("lena.Domains.FinanceItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AcceptedDueDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<byte?>("AcceptedPaymentMethod")
                        .HasColumnType("tinyint");

                    b.Property<double?>("AllocatedAmount")
                        .HasColumnType("float");

                    b.Property<string>("ChequeNumber")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("CooperatorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExpenseFinancialDocumentId")
                        .HasColumnType("int");

                    b.Property<int?>("FinanceId")
                        .HasColumnType("int");

                    b.Property<byte>("FinanceType")
                        .HasColumnType("tinyint");

                    b.Property<string>("FinancialDescription")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("LatestConfirmationId")
                        .HasColumnType("int");

                    b.Property<byte?>("PaymentKind")
                        .HasColumnType("tinyint");

                    b.Property<byte>("PaymentMethod")
                        .HasColumnType("tinyint");

                    b.Property<int?>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReceivedCreatedDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("ReceivedDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int?>("ReceivedUserId")
                        .HasColumnType("int");

                    b.Property<double>("RequestedAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("RequestedDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("RequestedDueDateTime")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CooperatorId");

                    b.HasIndex("ExpenseFinancialDocumentId");

                    b.HasIndex("LatestConfirmationId")
                        .IsUnique()
                        .HasFilter("[LatestConfirmationId] IS NOT NULL");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("ReceivedUserId");

                    b.HasIndex("UserId");

                    b.HasIndex("FinanceId", "CooperatorId");

                    b.ToTable("FinanceItems");
                });

            modelBuilder.Entity("lena.Domains.FinanceItemAllocationSummary", b =>
                {
                    b.Property<int>("FinanceId")
                        .HasColumnType("int");

                    b.Property<int>("CooperatorId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<double>("TotalAllocatedAmount")
                        .HasColumnType("float");

                    b.Property<double>("TotalRequestedAmout")
                        .HasColumnType("float");

                    b.Property<double>("TotalTransferredAmount")
                        .HasColumnType("float");

                    b.HasKey("FinanceId", "CooperatorId");

                    b.HasIndex("CooperatorId");

                    b.ToTable("FinanceItemAllocationSummaries");
                });

            modelBuilder.Entity("lena.Domains.FinanceItemConfirmation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("FinanceItemId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FinanceItemId");

                    b.HasIndex("UserId");

                    b.ToTable("FinanceItemConfirmations");
                });

            modelBuilder.Entity("lena.Domains.FinancialAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("CurrencyId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("FinancialAccounts");
                });

            modelBuilder.Entity("lena.Domains.FinancialAccountDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountOwner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("BankId")
                        .HasColumnType("tinyint");

                    b.Property<int>("FinancialAccountId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("FinancialAccountId");

                    b.ToTable("FinancialAccountDetails");
                });

            modelBuilder.Entity("lena.Domains.FinancialDocumentBankOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("BankOrderAmount")
                        .HasColumnType("float");

                    b.Property<int>("BankOrderId")
                        .HasColumnType("int");

                    b.Property<double>("FOB")
                        .HasColumnType("float");

                    b.Property<int>("FinancialDocumentId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<double>("TransferCost")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BankOrderId");

                    b.HasIndex("FinancialDocumentId")
                        .IsUnique();

                    b.ToTable("FinancialDocumentBankOrders");
                });

            modelBuilder.Entity("lena.Domains.FinancialDocumentBeginning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FinancialDocumentId")
                        .HasColumnType("int");

                    b.Property<byte>("FinancialTransactionLevel")
                        .HasColumnType("tinyint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("FinancialDocumentId")
                        .IsUnique();

                    b.ToTable("FinancialDocumentBeginnings");
                });

            modelBuilder.Entity("lena.Domains.FinancialDocumentCorrection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FinancialDocumentId")
                        .HasColumnType("int");

                    b.Property<byte>("FinancialTransactionLevel")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("FinancialDocumentId")
                        .IsUnique();

                    b.ToTable("FinancialDocumentCorrections");
                });

            modelBuilder.Entity("lena.Domains.FinancialDocumentCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("CargoWeight")
                        .HasColumnType("float");

                    b.Property<byte>("CostType")
                        .HasColumnType("tinyint");

                    b.Property<double?>("EntranceRightsCost")
                        .HasColumnType("float");

                    b.Property<int>("FinancialDocumentId")
                        .HasColumnType("int");

                    b.Property<double?>("KotazhTransPort")
                        .HasColumnType("float");

                    b.Property<double?>("LadingWeight")
                        .HasColumnType("float");

                    b.Property<double?>("PurchaseOrderWeight")
                        .HasColumnType("float");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("FinancialDocumentId")
                        .IsUnique();

                    b.ToTable("FinancialDocumentCosts");
                });

            modelBuilder.Entity("lena.Domains.FinancialDocumentDiscount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("DiscountType")
                        .HasColumnType("tinyint");

                    b.Property<int>("FinancialDocumentId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("FinancialDocumentId")
                        .IsUnique();

                    b.ToTable("FinancialDocumentDiscounts");
                });

            modelBuilder.Entity("lena.Domains.FinancialDocumentTransfer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FinancialDocumentId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<double>("ToDebitAmount")
                        .HasColumnType("float");

                    b.Property<int>("ToFinancialAccountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FinancialDocumentId")
                        .IsUnique();

                    b.HasIndex("ToFinancialAccountId");

                    b.ToTable("FinancialDocumentTransfers");
                });

            modelBuilder.Entity("lena.Domains.FinancialLimit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Allowance")
                        .HasColumnType("int");

                    b.Property<byte>("CurrencyId")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("UserId");

                    b.ToTable("FinancialLimits");
                });

            modelBuilder.Entity("lena.Domains.FinancialTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EffectDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("FinancialAccountId")
                        .HasColumnType("int");

                    b.Property<int>("FinancialTransactionBatchId")
                        .HasColumnType("int");

                    b.Property<int>("FinancialTransactionTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPermanent")
                        .HasColumnType("bit");

                    b.Property<int?>("ReferenceFinancialTransactionId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("FinancialAccountId");

                    b.HasIndex("FinancialTransactionBatchId");

                    b.HasIndex("FinancialTransactionTypeId");

                    b.HasIndex("ReferenceFinancialTransactionId");

                    b.ToTable("FinancialTransactions");
                });

            modelBuilder.Entity("lena.Domains.FinancialTransactionBatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("FinancialTransactionBatches");
                });

            modelBuilder.Entity("lena.Domains.FinancialTransactionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Factor")
                        .HasColumnType("int");

                    b.Property<byte>("FinancialTransactionLevel")
                        .HasColumnType("tinyint");

                    b.Property<int?>("RollbackFinancialTransactionTypeId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RollbackFinancialTransactionTypeId");

                    b.ToTable("FinancialTransactionTypes");
                });

            modelBuilder.Entity("lena.Domains.Forwarder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Forwarders");
                });

            modelBuilder.Entity("lena.Domains.GeneralStuffRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AlternativePurchaseRequestQty")
                        .HasColumnType("float");

                    b.Property<short?>("BillOfMaterialVersion")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("FromWarehouseId")
                        .HasColumnType("smallint");

                    b.Property<int?>("ProductionMaterialRequestId")
                        .HasColumnType("int");

                    b.Property<double>("PurchaseRequestQty")
                        .HasColumnType("float");

                    b.Property<double>("Qty")
                        .HasColumnType("float");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("ScrumEntityId")
                        .HasColumnType("int");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("StatusDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StuffId")
                        .HasColumnType("int");

                    b.Property<double>("StuffRequestQty")
                        .HasColumnType("float");

                    b.Property<byte>("StuffRequestType")
                        .HasColumnType("tinyint");

                    b.Property<short?>("ToDepartmentId")
                        .HasColumnType("smallint");

                    b.Property<int?>("ToEmployeeId")
                        .HasColumnType("int");

                    b.Property<short?>("ToWarehouseId")
                        .HasColumnType("smallint");

                    b.Property<byte>("UnitId")
                        .HasColumnType("tinyint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FromWarehouseId");

                    b.HasIndex("ProductionMaterialRequestId");

                    b.HasIndex("ScrumEntityId");

                    b.HasIndex("StuffId");

                    b.HasIndex("ToDepartmentId");

                    b.HasIndex("ToEmployeeId");

                    b.HasIndex("ToWarehouseId");

                    b.HasIndex("UnitId");

                    b.HasIndex("UserId");

                    b.HasIndex("BillOfMaterialVersion", "StuffId");

                    b.ToTable("GeneralStuffRequests");
                });

            modelBuilder.Entity("lena.Domains.GeneralStuffRequestDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AlternativePurchaseRequestId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GeneralStuffRequestId")
                        .HasColumnType("int");

                    b.Property<int?>("PurchaseRequestId")
                        .HasColumnType("int");

                    b.Property<double>("Qty")
                        .HasColumnType("float");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("StuffRequestId")
                        .HasColumnType("int");

                    b.Property<byte>("UnitId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("AlternativePurchaseRequestId");

                    b.HasIndex("GeneralStuffRequestId");

                    b.HasIndex("PurchaseRequestId");

                    b.HasIndex("StuffRequestId");

                    b.HasIndex("UnitId");

                    b.ToTable("GeneralStuffRequestDetails");
                });

            modelBuilder.Entity("lena.Domains.HowToBuy", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HowToBuys");
                });

            modelBuilder.Entity("lena.Domains.HowToBuyDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("HowToBuyId")
                        .HasColumnType("smallint");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HowToBuyId");

                    b.ToTable("HowToBuyDetails");
                });

            modelBuilder.Entity("lena.Domains.InboundCargoCooperator", b =>
                {
                    b.Property<int>("InboundCargoId")
                        .HasColumnType("int");

                    b.Property<int>("CooperatorId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("InboundCargoId", "CooperatorId");

                    b.HasIndex("CooperatorId");

                    b.ToTable("InboundCargoCooperators");
                });

            modelBuilder.Entity("lena.Domains.Indicator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApiInfoId")
                        .HasColumnType("int");

                    b.Property<short>("DepartmentId")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Formula")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<double>("Target")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ApiInfoId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Indicators");
                });

            modelBuilder.Entity("lena.Domains.IndicatorWeight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("DepartmentId")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("IndicatorWeights");
                });

            modelBuilder.Entity("lena.Domains.IranKhodroSerial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerStuffId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerStuffVersionId")
                        .HasColumnType("int");

                    b.Property<int?>("LinkSerialId")
                        .HasColumnType("int");

                    b.Property<bool>("Print")
                        .HasColumnType("bit");

                    b.Property<int>("PrintQty")
                        .HasColumnType("int");

                    b.Property<DateTime>("ProductionDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("ProductionDay")
                        .HasColumnType("int");

                    b.Property<int>("ProductionSerial")
                        .HasColumnType("int");

                    b.Property<int>("ProductionYearId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerStuffId");

                    b.HasIndex("CustomerStuffVersionId");

                    b.HasIndex("LinkSerialId")
                        .IsUnique()
                        .HasFilter("[LinkSerialId] IS NOT NULL");

                    b.HasIndex("ProductionYearId");

                    b.HasIndex("UserId");

                    b.ToTable("IranKhodroSerials");
                });

            modelBuilder.Entity("lena.Domains.LadingBankOrderLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LadingBankOrderStatusId")
                        .HasColumnType("int");

                    b.Property<int>("LadingId")
                        .HasColumnType("int");

                    b.Property<int?>("LadingId1")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LadingBankOrderStatusId");

                    b.HasIndex("LadingId");

                    b.HasIndex("LadingId1")
                        .IsUnique()
                        .HasFilter("[LadingId1] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("LadingBankOrderLogs");
                });

            modelBuilder.Entity("lena.Domains.LadingBankOrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("LadingBankOrderStatus");
                });

            modelBuilder.Entity("lena.Domains.LadingBlocker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserGroupId");

                    b.ToTable("LadingBlockers");
                });

            modelBuilder.Entity("lena.Domains.LadingChangeRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ConfirmDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int?>("ConfirmerUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LadingId")
                        .HasColumnType("int");

                    b.Property<byte>("LadingType")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("RequestDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConfirmerUserId");

                    b.HasIndex("LadingId");

                    b.HasIndex("UserId");

                    b.ToTable("LadingChangeRequests");
                });

            modelBuilder.Entity("lena.Domains.LadingCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("FinancialDocumentCostId")
                        .HasColumnType("int");

                    b.Property<bool>("IsTemp")
                        .HasColumnType("bit");

                    b.Property<int?>("LadingId")
                        .HasColumnType("int");

                    b.Property<int>("LadingItemId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("FinancialDocumentCostId");

                    b.HasIndex("LadingId");

                    b.HasIndex("LadingItemId");

                    b.ToTable("LadingCosts");
                });

            modelBuilder.Entity("lena.Domains.LadingCustomhouseLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LadingCustomhouseStatusId")
                        .HasColumnType("int");

                    b.Property<int>("LadingId")
                        .HasColumnType("int");

                    b.Property<int?>("LadingId1")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LadingCustomhouseStatusId");

                    b.HasIndex("LadingId");

                    b.HasIndex("LadingId1")
                        .IsUnique()
                        .HasFilter("[LadingId1] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("LadingCustomhouseLogs");
                });

            modelBuilder.Entity("lena.Domains.LadingCustomhouseStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("LadingCustomhouseStatuses");
                });

            modelBuilder.Entity("lena.Domains.LadingItemDetailSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LadingItemDetailId")
                        .HasColumnType("int");

                    b.Property<double>("QualityControlFailedQty")
                        .HasColumnType("float");

                    b.Property<double>("QualityControlPassedQty")
                        .HasColumnType("float");

                    b.Property<double>("ReceiptedQty")
                        .HasColumnType("float");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("LadingItemDetailId")
                        .IsUnique();

                    b.ToTable("LadingItemDetailSummaries");
                });

            modelBuilder.Entity("lena.Domains.LadingItemSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LadingItemId")
                        .HasColumnType("int");

                    b.Property<double>("QualityControlFailedQty")
                        .HasColumnType("float");

                    b.Property<double>("QualityControlPassedQty")
                        .HasColumnType("float");

                    b.Property<double>("ReceiptedQty")
                        .HasColumnType("float");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("LadingItemId")
                        .IsUnique();

                    b.ToTable("LadingItemSummaries");
                });

            modelBuilder.Entity("lena.Domains.LinkSerial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("LinkDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("LinkedSerial")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("StuffId")
                        .HasColumnType("int");

                    b.Property<long>("StuffSerialCode")
                        .HasColumnType("bigint");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserLinkerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LinkedSerial")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.HasIndex("UserLinkerId");

                    b.HasIndex("StuffSerialCode", "StuffId")
                        .IsUnique();

                    b.ToTable("LinkSerials");
                });

            modelBuilder.Entity("lena.Domains.Machine", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("MachineTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("MachineTypeId");

                    b.ToTable("Machines");
                });

            modelBuilder.Entity("lena.Domains.MachineTypeOperatorType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNecessary")
                        .HasColumnType("bit");

                    b.Property<short>("MachineTypeId")
                        .HasColumnType("smallint");

                    b.Property<short>("OperatorTypeId")
                        .HasColumnType("smallint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MachineTypeId");

                    b.HasIndex("OperatorTypeId");

                    b.ToTable("MachineTypeOperatorTypes");
                });

            modelBuilder.Entity("lena.Domains.MachineTypeParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("MachineTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("MachineTypeId");

                    b.ToTable("MachineTypeParameters");
                });

            modelBuilder.Entity("lena.Domains.MeetingApproval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ActionDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("ActualDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GuestOperatorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MinutesMeetingId")
                        .HasColumnType("int");

                    b.Property<short?>("OperatorDepartmentId")
                        .HasColumnType("smallint");

                    b.Property<int?>("OperatorUserId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte?>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MinutesMeetingId");

                    b.HasIndex("OperatorDepartmentId");

                    b.HasIndex("OperatorUserId");

                    b.ToTable("MeetingApprovals");
                });

            modelBuilder.Entity("lena.Domains.MeetingParticipant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GuestParticipantName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MinutesMeetingId")
                        .HasColumnType("int");

                    b.Property<int?>("ParticipantEmployeeId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MinutesMeetingId");

                    b.HasIndex("ParticipantEmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("MeetingParticipants");
                });

            modelBuilder.Entity("lena.Domains.Membership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("UserGroupId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("Memberships");
                });

            modelBuilder.Entity("lena.Domains.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSent")
                        .HasColumnType("bit");

                    b.Property<byte>("MessageAccessType")
                        .HasColumnType("tinyint");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SendDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SenderUserId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SenderUserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("lena.Domains.MessageSend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<byte>("MessageSendType")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("ReciverUserId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("ReciverUserId");

                    b.ToTable("MessageSends");
                });

            modelBuilder.Entity("lena.Domains.MinutesMeeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Agenda")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BossUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsConfidential")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("MeetingDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Place")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegistrantUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RegistrationDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SecretaryUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BossUserId");

                    b.HasIndex("RegistrantUserId");

                    b.HasIndex("SecretaryUserId");

                    b.ToTable("MinutesMeetings");
                });

            modelBuilder.Entity("lena.Domains.NewShoppingDetailSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("NewShoppingDetailId")
                        .HasColumnType("int");

                    b.Property<double>("QualityControlConsumedQty")
                        .HasColumnType("float");

                    b.Property<double>("QualityControlFailedQty")
                        .HasColumnType("float");

                    b.Property<double>("QualityControlPassedQty")
                        .HasColumnType("float");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("NewShoppingDetailId")
                        .IsUnique();

                    b.ToTable("NewShoppingDetailSummaries");
                });

            modelBuilder.Entity("lena.Domains.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<int?>("NotificationGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("smalldatetime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("ScrumEntityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SeenDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NotificationGroupId");

                    b.HasIndex("ScrumEntityId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("lena.Domains.NotificationGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("NotificationGroups");
                });

            modelBuilder.Entity("lena.Domains.Operation", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCorrective")
                        .HasColumnType("bit");

                    b.Property<bool>("IsQualityControl")
                        .HasColumnType("bit");

                    b.Property<byte>("OperationTypeId")
                        .HasColumnType("tinyint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OperationTypeId");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("lena.Domains.OperationConsumingMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BillOfMaterialDetailId")
                        .HasColumnType("int");

                    b.Property<bool>("LimitedSerialBuffer")
                        .HasColumnType("bit");

                    b.Property<int>("OperationSequenceId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BillOfMaterialDetailId");

                    b.HasIndex("OperationSequenceId");

                    b.ToTable("OperationConsumingMaterials");
                });

            modelBuilder.Entity("lena.Domains.OperationSequence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("DefaultTime")
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<bool>("IsOptional")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRepairReturnPoint")
                        .HasColumnType("bit");

                    b.Property<short>("OperationId")
                        .HasColumnType("smallint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("WorkPlanStepId")
                        .HasColumnType("int");

                    b.Property<short>("WorkStationId")
                        .HasColumnType("smallint");

                    b.Property<int>("WorkStationPartCount")
                        .HasColumnType("int");

                    b.Property<short>("WorkStationPartId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.HasIndex("WorkPlanStepId");

                    b.HasIndex("WorkStationPartId");

                    b.HasIndex("WorkStationId", "OperationId");

                    b.ToTable("OperationSequences");
                });

            modelBuilder.Entity("lena.Domains.OperationSequenceMachineTypeParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MachineTypeParameterId")
                        .HasColumnType("int");

                    b.Property<int>("OperationSequenceId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MachineTypeParameterId");

                    b.HasIndex("OperationSequenceId");

                    b.ToTable("OperationSequenceMachineTypeParameters");
                });

            modelBuilder.Entity("lena.Domains.OperationType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte[]>("Symbol")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OperationTypes");
                });

            modelBuilder.Entity("lena.Domains.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("DocumentType")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("OrderTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Orderer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<double?>("TotalAmount")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderTypeId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("lena.Domains.OrderDocument", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "DocumentId");

                    b.HasIndex("DocumentId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("OrderDocuments");
                });

            modelBuilder.Entity("lena.Domains.OrderItemSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("BlockedQty")
                        .HasColumnType("float");

                    b.Property<double>("BlockedQtyOtherCustomers")
                        .HasColumnType("float");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<double>("PermissionQty")
                        .HasColumnType("float");

                    b.Property<double>("PlannedQty")
                        .HasColumnType("float");

                    b.Property<double>("PreparingSendingQty")
                        .HasColumnType("float");

                    b.Property<double>("ProducedQty")
                        .HasColumnType("float");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<double>("SendedQty")
                        .HasColumnType("float");

                    b.Property<double>("SentToOtherCustomersQty")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId")
                        .IsUnique();

                    b.ToTable("OrderItemSummaries");
                });

            modelBuilder.Entity("lena.Domains.OrderType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("OrderTypes");
                });

            modelBuilder.Entity("lena.Domains.OrganizationJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("OranizationPostId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("OranizationPostId");

                    b.ToTable("OrganizationJobs");
                });

            modelBuilder.Entity("lena.Domains.OrganizationPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("UserGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ParentId");

                    b.HasIndex("UserGroupId")
                        .IsUnique()
                        .HasFilter("[UserGroupId] IS NOT NULL");

                    b.ToTable("OrganizationPosts");
                });

            modelBuilder.Entity("lena.Domains.OrganizationPostHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("OrganizationPostId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OrganizationPostId");

                    b.ToTable("OrganizationPostHistories");
                });

            modelBuilder.Entity("lena.Domains.PayRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("DiscountedTotalPrice")
                        .HasColumnType("float");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("FinancialTransactionBatchId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<double>("PayedAmount")
                        .HasColumnType("float");

                    b.Property<int>("QualityControlId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FinancialTransactionBatchId")
                        .IsUnique()
                        .HasFilter("[FinancialTransactionBatchId] IS NOT NULL");

                    b.HasIndex("QualityControlId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("PayRequests");
                });

            modelBuilder.Entity("lena.Domains.PaymentSuggestStatusLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QualityControlId")
                        .HasColumnType("int");

                    b.Property<byte?>("QualityControlPaymentSuggestStatus")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("RegisterDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("RegisterarUserId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("QualityControlId");

                    b.HasIndex("RegisterarUserId");

                    b.ToTable("PaymentSuggestStatusLogs");
                });

            modelBuilder.Entity("lena.Domains.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("lena.Domains.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("AccessType")
                        .HasColumnType("tinyint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SecurityActionId")
                        .HasColumnType("int");

                    b.Property<int?>("UserGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SecurityActionId");

                    b.HasIndex("UserGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("lena.Domains.PermissionRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("IntendedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int?>("RegistrarUserId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("IntendedUserId");

                    b.HasIndex("RegistrarUserId");

                    b.ToTable("PermissionRequests");
                });

            modelBuilder.Entity("lena.Domains.PermissionRequestAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte?>("AccessType")
                        .HasColumnType("tinyint");

                    b.Property<int?>("ConfirmationUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PermissionRequestId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("SecurityActionId")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("ConfirmationUserId");

                    b.HasIndex("PermissionRequestId");

                    b.HasIndex("SecurityActionId");

                    b.ToTable("PermissionRequestActions");
                });

            modelBuilder.Entity("lena.Domains.PlanCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegisterDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("RegisterarUserId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("RegisterarUserId");

                    b.ToTable("PlanCodes");
                });

            modelBuilder.Entity("lena.Domains.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("lena.Domains.PriceAnnunciation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CooperatorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("RegisterDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("RegisterarUserId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.HasIndex("CooperatorId");

                    b.HasIndex("RegisterarUserId");

                    b.ToTable("PriceAnnunciations");
                });

            modelBuilder.Entity("lena.Domains.PriceAnnunciationItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ConfirmationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ConfirmerUserId")
                        .HasColumnType("int");

                    b.Property<double?>("Count")
                        .HasColumnType("float");

                    b.Property<byte>("CurrencyId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("PriceAnnunciationId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int>("StuffId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConfirmerUserId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PriceAnnunciationId");

                    b.HasIndex("StuffId");

                    b.ToTable("PriceAnnunciationItems");
                });

            modelBuilder.Entity("lena.Domains.PriceInquiry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CooperatorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<byte>("CurrencyId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Number")
                        .HasColumnType("int");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime?>("PriceAnnunciationDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("StuffId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CooperatorId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("StuffId");

                    b.HasIndex("UserId");

                    b.ToTable("PriceInquiries");
                });

            modelBuilder.Entity("lena.Domains.Printer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("CreatorUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsColored")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSupportTemplatePrint")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModuleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameInSystem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NetworkAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("PrinterType")
                        .HasColumnType("tinyint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Setting")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SupportLan")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.ToTable("Printers");
                });

            modelBuilder.Entity("lena.Domains.Production", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductionOrderId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<long>("StuffSerialCode")
                        .HasColumnType("bigint");

                    b.Property<int>("StuffSerialStuffId")
                        .HasColumnType("int");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductionOrderId");

                    b.HasIndex("UserId");

                    b.HasIndex("StuffSerialCode", "StuffSerialStuffId");

                    b.ToTable("Productions");
                });

            modelBuilder.Entity("lena.Domains.ProductionFaultType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short?>("OperationId")
                        .HasColumnType("smallint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.ToTable("ProductionFaultTypes");
                });

            modelBuilder.Entity("lena.Domains.ProductionLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdminUserGroupId")
                        .HasColumnType("int");

                    b.Property<bool>("ConfirmationDetailedCode")
                        .HasColumnType("bit");

                    b.Property<short>("ConsumeWarehouseId")
                        .HasColumnType("smallint");

                    b.Property<short>("DepartmentId")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetailedCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("ProductWarehouseId")
                        .HasColumnType("smallint");

                    b.Property<int?>("ProductionLineRepairUnitId")
                        .HasColumnType("int");

                    b.Property<int>("ProductivityImpactFactor")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SortIndex")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdminUserGroupId");

                    b.HasIndex("ConsumeWarehouseId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ProductWarehouseId");

                    b.HasIndex("ProductionLineRepairUnitId");

                    b.ToTable("ProductionLines");
                });

            modelBuilder.Entity("lena.Domains.ProductionLineEmployeeInterval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EntranceDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("ExitDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("HashedOperation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastMoidfied")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductionLineId")
                        .HasColumnType("int");

                    b.Property<string>("RFId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("StuffId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProductionLineId");

                    b.HasIndex("StuffId");

                    b.ToTable("ProductionLineEmployeeIntervals");
                });

            modelBuilder.Entity("lena.Domains.ProductionLineEmployeeIntervalDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("OperationId")
                        .HasColumnType("smallint");

                    b.Property<int>("ProductionLineEmployeeIntervalId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<long>("Time")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.HasIndex("ProductionLineEmployeeIntervalId");

                    b.ToTable("ProductionLineEmployeeIntervalDetails");
                });

            modelBuilder.Entity("lena.Domains.ProductionLineProductionStep", b =>
                {
                    b.Property<int>("ProductionLineId")
                        .HasColumnType("int");

                    b.Property<int>("ProductionStepId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ProductionLineId", "ProductionStepId");

                    b.HasIndex("ProductionStepId");

                    b.ToTable("ProductionLineProductionSteps");
                });

            modelBuilder.Entity("lena.Domains.ProductionLineRepairUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<short>("WarehouseId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("ProductionLineRepairUnits");
                });

            modelBuilder.Entity("lena.Domains.ProductionLineWorkShift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("ProductionLineId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("SaveDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("WorkShiftId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductionLineId");

                    b.HasIndex("WorkShiftId");

                    b.ToTable("ProductionLineWorkShifts");
                });

            modelBuilder.Entity("lena.Domains.ProductionMaterialRequestDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductionMaterialRequestId")
                        .HasColumnType("int");

                    b.Property<int>("ProductionOrderId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("ProductionMaterialRequestId");

                    b.HasIndex("ProductionOrderId");

                    b.ToTable("ProductionMaterialRequestDetails");
                });

            modelBuilder.Entity("lena.Domains.ProductionOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FaildProductionOperationId")
                        .HasColumnType("int");

                    b.Property<bool>("IsFaultCause")
                        .HasColumnType("bit");

                    b.Property<short>("OperationId")
                        .HasColumnType("smallint");

                    b.Property<int>("ProductionId")
                        .HasColumnType("int");

                    b.Property<int>("ProductionOperationEmployeeGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductionOperatorId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductionTerminalId")
                        .HasColumnType("int");

                    b.Property<double?>("Qty")
                        .HasColumnType("float");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionBatchId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FaildProductionOperationId")
                        .IsUnique()
                        .HasFilter("[FaildProductionOperationId] IS NOT NULL");

                    b.HasIndex("OperationId");

                    b.HasIndex("ProductionId");

                    b.HasIndex("ProductionOperationEmployeeGroupId");

                    b.HasIndex("ProductionOperatorId");

                    b.HasIndex("ProductionTerminalId");

                    b.HasIndex("TransactionBatchId")
                        .IsUnique()
                        .HasFilter("[TransactionBatchId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("ProductionOperations");
                });

            modelBuilder.Entity("lena.Domains.ProductionOperationEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("ProductionOperationEmployeeGroupId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProductionOperationEmployeeGroupId");

                    b.ToTable("ProductionOperationEmployees");
                });

            modelBuilder.Entity("lena.Domains.ProductionOperationEmployeeGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("HashedEmployee")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("ProductionOperationEmployeeGroups");
                });

            modelBuilder.Entity("lena.Domains.ProductionOperator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DefaultTime")
                        .HasColumnType("int");

                    b.Property<short?>("MachineTypeOperatorTypeId")
                        .HasColumnType("smallint");

                    b.Property<short>("OperationId")
                        .HasColumnType("smallint");

                    b.Property<int?>("OperationSequenceId")
                        .HasColumnType("int");

                    b.Property<short?>("OperatorTypeId")
                        .HasColumnType("smallint");

                    b.Property<int>("ProductionOrderId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("WrongLimitCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MachineTypeOperatorTypeId");

                    b.HasIndex("OperationId");

                    b.HasIndex("OperationSequenceId");

                    b.HasIndex("OperatorTypeId");

                    b.HasIndex("ProductionOrderId");

                    b.ToTable("ProductionOperators");
                });

            modelBuilder.Entity("lena.Domains.ProductionOperatorEmployeeBan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BanDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsBan")
                        .HasColumnType("bit");

                    b.Property<int>("ProductionOperatorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RevokeDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int?>("RevokeUserId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProductionOperatorId");

                    b.HasIndex("RevokeUserId");

                    b.ToTable("ProductionOperatorEmployeeBans");
                });

            modelBuilder.Entity("lena.Domains.ProductionOperatorMachineEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<short?>("MachineId")
                        .HasColumnType("smallint");

                    b.Property<int>("ProductionOperatorId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductionTerminalId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("MachineId");

                    b.HasIndex("ProductionOperatorId");

                    b.HasIndex("ProductionTerminalId");

                    b.ToTable("ProductionOperatorMachineEmployees");
                });

            modelBuilder.Entity("lena.Domains.ProductionOrderSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("InProductionQty")
                        .HasColumnType("float");

                    b.Property<double>("ProducedQty")
                        .HasColumnType("float");

                    b.Property<int>("ProductionOrderId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("ProductionOrderId")
                        .IsUnique();

                    b.ToTable("ProductionOrderSummaries");
                });

            modelBuilder.Entity("lena.Domains.ProductionPerformanceInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ConfirmationDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int?>("ConfirmatorUserId")
                        .HasColumnType("int");

                    b.Property<string>("CorrectiveAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("DepartmentId")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DescriptionDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("ProductionOrderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int?>("RegistratorUserId")
                        .HasColumnType("int");

                    b.Property<string>("ResponsibleComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte?>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("ConfirmatorUserId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ProductionOrderId");

                    b.HasIndex("RegistratorUserId");

                    b.ToTable("ProductionPerformanceInfoes");
                });

            modelBuilder.Entity("lena.Domains.ProductionPlanDetailLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("ProductionPlanDetailLevels");
                });

            modelBuilder.Entity("lena.Domains.ProductionPlanDetailSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("ProducedQty")
                        .HasColumnType("float");

                    b.Property<int>("ProductionPlanDetailId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<double>("ScheduledQty")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProductionPlanDetailId")
                        .IsUnique();

                    b.ToTable("ProductionPlanDetailSummaries");
                });

            modelBuilder.Entity("lena.Domains.ProductionPlanSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("ProducedQty")
                        .HasColumnType("float");

                    b.Property<int>("ProductionPlanId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<double>("ScheduledQty")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProductionPlanId")
                        .IsUnique();

                    b.ToTable("ProductionPlanSummaries");
                });

            modelBuilder.Entity("lena.Domains.ProductionRequestSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("PlannedQty")
                        .HasColumnType("float");

                    b.Property<double>("ProducedQty")
                        .HasColumnType("float");

                    b.Property<int>("ProductionRequestId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<double>("ScheduledQty")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProductionRequestId")
                        .IsUnique();

                    b.ToTable("ProductionRequestSummaries");
                });

            modelBuilder.Entity("lena.Domains.ProductionScheduleSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("ProducedQty")
                        .HasColumnType("float");

                    b.Property<int>("ProductionScheduleId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("ProductionScheduleId")
                        .IsUnique();

                    b.ToTable("ProductionScheduleSummaries");
                });

            modelBuilder.Entity("lena.Domains.ProductionStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductivityImpactFactor")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("ProductionSteps");
                });

            modelBuilder.Entity("lena.Domains.ProductionStuffDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("BillOfMaterialDetailType")
                        .HasColumnType("tinyint");

                    b.Property<double>("DetachedQty")
                        .HasColumnType("float");

                    b.Property<int>("ProductionId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductionOperationId")
                        .HasColumnType("int");

                    b.Property<double>("Qty")
                        .HasColumnType("float");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("StuffId")
                        .HasColumnType("int");

                    b.Property<long?>("StuffSerialCode")
                        .HasColumnType("bigint");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<byte>("UnitId")
                        .HasColumnType("tinyint");

                    b.Property<short>("WarehouseId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ProductionId");

                    b.HasIndex("ProductionOperationId");

                    b.HasIndex("StuffId");

                    b.HasIndex("UnitId");

                    b.HasIndex("WarehouseId");

                    b.HasIndex("StuffSerialCode", "StuffId");

                    b.ToTable("ProductionStuffDetails");
                });

            modelBuilder.Entity("lena.Domains.ProductionTerminal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("NetworkId")
                        .HasColumnType("int");

                    b.Property<int>("ProductionLineId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique()
                        .HasFilter("[EmployeeId] IS NOT NULL");

                    b.HasIndex("ProductionLineId");

                    b.ToTable("ProductionTerminals");
                });

            modelBuilder.Entity("lena.Domains.ProductionYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .IsFixedLength(true);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("Year")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ProductionYears");
                });

            modelBuilder.Entity("lena.Domains.ProjectERP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("CreatorUserId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EstimateStartDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<short>("Progress")
                        .HasColumnType("smallint");

                    b.Property<short>("ProjectERPCategoryId")
                        .HasColumnType("smallint");

                    b.Property<short?>("ProjectERPPhaseId")
                        .HasColumnType("smallint");

                    b.Property<short?>("ProjectERPTypeId")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("RealStartDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int?>("StuffId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProjectERPCategoryId");

                    b.HasIndex("ProjectERPPhaseId");

                    b.HasIndex("ProjectERPTypeId");

                    b.HasIndex("StuffId");

                    b.ToTable("ProjectERPs");
                });

            modelBuilder.Entity("lena.Domains.ProjectERPCategory", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("ProjectERPCategories");
                });

            modelBuilder.Entity("lena.Domains.ProjectERPDocument", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("ProjectERPDocumentTypeId")
                        .HasColumnType("smallint");

                    b.Property<int>("ProjectERPId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectERPDocumentTypeId");

                    b.HasIndex("ProjectERPId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectERPDocuments");
                });

            modelBuilder.Entity("lena.Domains.ProjectERPDocumentType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("ProjectERPDocumentTypes");
                });

            modelBuilder.Entity("lena.Domains.ProjectERPEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnnouncementDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("AnnouncementType")
                        .HasColumnType("smallint");

                    b.Property<string>("Audience")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AudienceEmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CRMDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<bool>("Confidential")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NextAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("NextActionDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<short?>("ProjectERPEventActionTypeId")
                        .HasColumnType("smallint");

                    b.Property<short>("ProjectERPEventCategoryId")
                        .HasColumnType("smallint");

                    b.Property<int>("ProjectERPId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("RegisterUserId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("AudienceEmployeeId");

                    b.HasIndex("ProjectERPEventActionTypeId");

                    b.HasIndex("ProjectERPEventCategoryId");

                    b.HasIndex("ProjectERPId");

                    b.HasIndex("RegisterUserId");

                    b.ToTable("ProjectERPEvents");
                });

            modelBuilder.Entity("lena.Domains.ProjectERPEventActionType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("ProjectERPEventActionTypes");
                });

            modelBuilder.Entity("lena.Domains.ProjectERPEventCategory", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("ProjectERPEventCategories");
                });

            modelBuilder.Entity("lena.Domains.ProjectERPEventDocument", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("CreatorUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProjectERPEventId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("ProjectERPEventId");

                    b.ToTable("ProjectERPEventDocumentes");
                });

            modelBuilder.Entity("lena.Domains.ProjectERPLabel", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("ProjectERPLabeles");
                });

            modelBuilder.Entity("lena.Domains.ProjectERPLabelLog", b =>
                {
                    b.Property<int>("ProjectERPId")
                        .HasColumnType("int");

                    b.Property<short>("ProjectERPLabelId")
                        .HasColumnType("smallint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ProjectERPId", "ProjectERPLabelId");

                    b.HasIndex("ProjectERPLabelId");

                    b.ToTable("ProjectERPLabelLogs");
                });

            modelBuilder.Entity("lena.Domains.ProjectERPPhase", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("ProjectERPPhases");
                });

            modelBuilder.Entity("lena.Domains.ProjectERPResponsibleEmployee", b =>
                {
                    b.Property<int>("ProjectERPId")
                        .HasColumnType("int");

                    b.Property<int>("ResponsibleEmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatorDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ProjectERPId", "ResponsibleEmployeeId");

                    b.HasIndex("ResponsibleEmployeeId");

                    b.ToTable("ProjectERPResponsibleEmployees");
                });

            modelBuilder.Entity("lena.Domains.ProjectERPTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssigneeEmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("CreatorUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DueDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int?>("DurationMinute")
                        .HasColumnType("int");

                    b.Property<int>("EstimateTime")
                        .HasColumnType("int");

                    b.Property<string>("Output")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentTaskId")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int?>("ProgressPercentage")
                        .HasColumnType("int");

                    b.Property<int>("ProjectERPId")
                        .HasColumnType("int");

                    b.Property<short>("ProjectERPTaskCategoryId")
                        .HasColumnType("smallint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("StartDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeEmployeeId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("ProjectERPId");

                    b.HasIndex("ProjectERPTaskCategoryId");

                    b.ToTable("ProjectERPTaskes");
                });

            modelBuilder.Entity("lena.Domains.ProjectERPTaskCategory", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("ProjectERPTaskCategories");
                });

            modelBuilder.Entity("lena.Domains.ProjectERPTaskDependency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("DependencyType")
                        .HasColumnType("tinyint");

                    b.Property<int>("LagMinutues")
                        .HasColumnType("int");

                    b.Property<int>("PredecessorProjectERPTaskId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectERPTaskId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("PredecessorProjectERPTaskId");

                    b.HasIndex("ProjectERPTaskId");

                    b.ToTable("ProjectERPTaskDependencies");
                });

            modelBuilder.Entity("lena.Domains.ProjectERPTaskDocument", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("CreatorUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProjectERPTaskId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("ProjectERPTaskId");

                    b.ToTable("ProjectERPTaskDocumentes");
                });

            modelBuilder.Entity("lena.Domains.ProjectERPTaskLabelLog", b =>
                {
                    b.Property<int>("ProjectERPTaskId")
                        .HasColumnType("int");

                    b.Property<short>("ProjectERPLabelId")
                        .HasColumnType("smallint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ProjectERPTaskId", "ProjectERPLabelId");

                    b.HasIndex("ProjectERPLabelId");

                    b.ToTable("ProjectERPTaskLabelLogs");
                });

            modelBuilder.Entity("lena.Domains.ProjectERPType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("ProjectERPTypes");
                });

            modelBuilder.Entity("lena.Domains.ProjectRelatedPeople", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Post")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectRelatedPeoples");
                });

            modelBuilder.Entity("lena.Domains.Proposal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CurrentSituationDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<bool?>("IsEffective")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIncognitoUser")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("bit");

                    b.Property<string>("ProposalDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProposalEffect")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProposalTypeId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProposalTypeId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("Proposals");
                });

            modelBuilder.Entity("lena.Domains.ProposalQAReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("ProposalId")
                        .HasColumnType("int");

                    b.Property<int>("ResponsibleUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ReviewResult")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProposalId");

                    b.HasIndex("ResponsibleUserId");

                    b.HasIndex("UserId");

                    b.ToTable("ProposalQAReviews");
                });

            modelBuilder.Entity("lena.Domains.ProposalReviewCommittee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("ProposalId")
                        .HasColumnType("int");

                    b.Property<int>("ResponsibleUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ReviewResult")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProposalId");

                    b.HasIndex("ResponsibleUserId");

                    b.HasIndex("UserId");

                    b.ToTable("ProposalReviewCommittees");
                });

            modelBuilder.Entity("lena.Domains.ProposalType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ProposalTypes");
                });

            modelBuilder.Entity("lena.Domains.ProviderHowToBuy", b =>
                {
                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<short>("HowToBuyId")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<short>("LeadTime")
                        .HasColumnType("smallint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ProviderId", "HowToBuyId");

                    b.HasIndex("HowToBuyId");

                    b.ToTable("ProviderHowToBuys");
                });

            modelBuilder.Entity("lena.Domains.ProvisionersCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int?>("ResponsibleEmployeeId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte?>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResponsibleEmployeeId");

                    b.HasIndex("SupplierId");

                    b.ToTable("ProvisionersCarts");
                });

            modelBuilder.Entity("lena.Domains.ProvisionersCartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ProviderId")
                        .HasColumnType("int");

                    b.Property<int>("ProvisionersCartId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseRequestId")
                        .HasColumnType("int");

                    b.Property<double?>("RequestQty")
                        .HasColumnType("float");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<double?>("SuppliedQty")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.HasIndex("ProvisionersCartId");

                    b.HasIndex("PurchaseRequestId")
                        .IsUnique();

                    b.ToTable("ProvisionersCartItems");
                });

            modelBuilder.Entity("lena.Domains.ProvisionersCartItemDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProviderId")
                        .HasColumnType("int");

                    b.Property<int>("ProvisionersCartItemId")
                        .HasColumnType("int");

                    b.Property<int?>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<double?>("SupplyQty")
                        .HasColumnType("float");

                    b.Property<int>("UnitPrice")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.HasIndex("ProvisionersCartItemId");

                    b.HasIndex("PurchaseOrderId")
                        .IsUnique()
                        .HasFilter("[PurchaseOrderId] IS NOT NULL");

                    b.ToTable("ProvisionersCartItemDetails");
                });

            modelBuilder.Entity("lena.Domains.PurchaseOrderCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("FinancialDocumentCostId")
                        .HasColumnType("int");

                    b.Property<int?>("PurchaseOrderGroupId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("FinancialDocumentCostId");

                    b.HasIndex("PurchaseOrderGroupId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PurchaseOrderCosts");
                });

            modelBuilder.Entity("lena.Domains.PurchaseOrderDetailSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("CargoedQty")
                        .HasColumnType("float");

                    b.Property<int>("PurchaseOrderDetailId")
                        .HasColumnType("int");

                    b.Property<double>("QualityControlFailedQty")
                        .HasColumnType("float");

                    b.Property<double>("QualityControlPassedQty")
                        .HasColumnType("float");

                    b.Property<double>("ReceiptedQty")
                        .HasColumnType("float");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseOrderDetailId")
                        .IsUnique();

                    b.ToTable("PurchaseOrderDetailSummaries");
                });

            modelBuilder.Entity("lena.Domains.PurchaseOrderDiscount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("FinancialDocumentDiscountId")
                        .HasColumnType("int");

                    b.Property<int?>("PurchaseOrderGroupId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("FinancialDocumentDiscountId");

                    b.HasIndex("PurchaseOrderGroupId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PurchaseOrderDiscounts");
                });

            modelBuilder.Entity("lena.Domains.PurchaseOrderPlanCodeView", b =>
                {
                    b.Property<int>("PurchaseOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PlanCodes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PurchaseOrderId");

                    b.ToTable("PurchaseOrderPlanCodeView");
                });

            modelBuilder.Entity("lena.Domains.PurchaseOrderResponsibleView", b =>
                {
                    b.Property<int>("PurchaseOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ResponsibleFullNames")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PurchaseOrderId");

                    b.ToTable("PurchaseOrderResponsibleView");
                });

            modelBuilder.Entity("lena.Domains.PurchaseOrderStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowUploadDocument")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PurchaseOrderSteps");
                });

            modelBuilder.Entity("lena.Domains.PurchaseOrderStepDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("PurchaseOrderStepId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("PurchaseOrderStepId");

                    b.HasIndex("UserId");

                    b.ToTable("PurchaseOrderStepDetails");
                });

            modelBuilder.Entity("lena.Domains.PurchaseOrderSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("CargoedQty")
                        .HasColumnType("float");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<double>("QualityControlFailedQty")
                        .HasColumnType("float");

                    b.Property<double>("QualityControlPassedQty")
                        .HasColumnType("float");

                    b.Property<double>("ReceiptedQty")
                        .HasColumnType("float");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseOrderId")
                        .IsUnique();

                    b.ToTable("PurchaseOrderSummaries");
                });

            modelBuilder.Entity("lena.Domains.PurchaseRequestEditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AfterDeadLineDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<double?>("AfterRequestQty")
                        .HasColumnType("float");

                    b.Property<DateTime?>("BeforeDeadLineDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<double?>("BeforeRequestQty")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PurchaseRequestId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseRequestId");

                    b.HasIndex("UserId");

                    b.ToTable("PurchaseRequestEditLog");
                });

            modelBuilder.Entity("lena.Domains.PurchaseRequestStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowUploadDocument")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PurchaseRequestSteps");
                });

            modelBuilder.Entity("lena.Domains.PurchaseRequestStepDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PurchaseRequestId")
                        .HasColumnType("int");

                    b.Property<int?>("PurchaseRequestStepId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseRequestId");

                    b.HasIndex("PurchaseRequestStepId");

                    b.HasIndex("UserId");

                    b.ToTable("PurchaseRequestStepDetails");
                });

            modelBuilder.Entity("lena.Domains.PurchaseRequestSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("CargoedQty")
                        .HasColumnType("float");

                    b.Property<double>("OrderedQty")
                        .HasColumnType("float");

                    b.Property<int>("PurchaseRequestId")
                        .HasColumnType("int");

                    b.Property<double>("QualityControlFailedQty")
                        .HasColumnType("float");

                    b.Property<double>("QualityControlPassedQty")
                        .HasColumnType("float");

                    b.Property<double>("ReceiptedQty")
                        .HasColumnType("float");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseRequestId")
                        .IsUnique();

                    b.ToTable("PurchaseRequestSummaries");
                });

            modelBuilder.Entity("lena.Domains.QAReviewEmployeeComplain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ActionFinishDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("ActionResponsibleUserId")
                        .HasColumnType("int");

                    b.Property<string>("ActionResult")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ActionStartDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("CreatorUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("EmployeeComplainItemId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("ActionResponsibleUserId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("EmployeeComplainItemId");

                    b.ToTable("QAReviewEmployeeComplain");
                });

            modelBuilder.Entity("lena.Domains.QualityControlAccepter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserGroupId");

                    b.ToTable("QualityControlAccepters");
                });

            modelBuilder.Entity("lena.Domains.QualityControlConfirmationTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AQLAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QualityControlConfirmationId")
                        .HasColumnType("int");

                    b.Property<long>("QualityControlTestId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int>("StuffId")
                        .HasColumnType("int");

                    b.Property<int>("TestConditionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QualityControlConfirmationId");

                    b.HasIndex("TestConditionId");

                    b.HasIndex("UserId");

                    b.HasIndex("StuffId", "QualityControlTestId");

                    b.ToTable("QualityControlConfirmationTests");
                });

            modelBuilder.Entity("lena.Domains.QualityControlConfirmationTestItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("MaxObtainAmount")
                        .HasColumnType("float");

                    b.Property<double?>("MinObtainAmount")
                        .HasColumnType("float");

                    b.Property<double?>("ObtainAmount")
                        .HasColumnType("float");

                    b.Property<int>("QualityControlConfirmationTestId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SampleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TesterUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QualityControlConfirmationTestId");

                    b.HasIndex("TesterUserId");

                    b.ToTable("QualityControlConfirmationTestItems");
                });

            modelBuilder.Entity("lena.Domains.QualityControlSample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("ConsumeQty")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<double>("Qty")
                        .HasColumnType("float");

                    b.Property<int>("QualityControlItemId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int?>("StatusChangerUserId")
                        .HasColumnType("int");

                    b.Property<double?>("TestQty")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QualityControlItemId");

                    b.HasIndex("StatusChangerUserId");

                    b.HasIndex("UserId");

                    b.ToTable("QualityControlSamples");
                });

            modelBuilder.Entity("lena.Domains.QualityControlSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AcceptedQty")
                        .HasColumnType("float");

                    b.Property<double>("ConditionalQty")
                        .HasColumnType("float");

                    b.Property<double>("ConditionalRejectedQty")
                        .HasColumnType("float");

                    b.Property<double>("ConditionalRequestQty")
                        .HasColumnType("float");

                    b.Property<double>("ConsumedQty")
                        .HasColumnType("float");

                    b.Property<double>("FailedQty")
                        .HasColumnType("float");

                    b.Property<int>("QualityControlId")
                        .HasColumnType("int");

                    b.Property<double>("ReturnedQty")
                        .HasColumnType("float");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("QualityControlId")
                        .IsUnique();

                    b.ToTable("QualityControlSummaries");
                });

            modelBuilder.Entity("lena.Domains.QualityControlTest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("QualityControlTests");
                });

            modelBuilder.Entity("lena.Domains.QualityControlTestCondition", b =>
                {
                    b.Property<int>("TestConditionId")
                        .HasColumnType("int");

                    b.Property<long>("QualityControlTestId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("TestConditionId", "QualityControlTestId");

                    b.HasIndex("QualityControlTestId");

                    b.ToTable("QualityControlTestConditions");
                });

            modelBuilder.Entity("lena.Domains.QualityControlTestEquipment", b =>
                {
                    b.Property<int>("TestEquipmentId")
                        .HasColumnType("int");

                    b.Property<long>("QualityControlTestId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("TestEquipmentId", "QualityControlTestId");

                    b.HasIndex("QualityControlTestId");

                    b.ToTable("QualityControlTestEquipments");
                });

            modelBuilder.Entity("lena.Domains.QualityControlTestImportanceDegree", b =>
                {
                    b.Property<int>("TestImportanceDegreeId")
                        .HasColumnType("int");

                    b.Property<long>("QualityControlTestId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("TestImportanceDegreeId", "QualityControlTestId");

                    b.HasIndex("QualityControlTestId");

                    b.ToTable("QualityControlTestImportanceDegrees");
                });

            modelBuilder.Entity("lena.Domains.QualityControlTestOperation", b =>
                {
                    b.Property<int>("TestOperationId")
                        .HasColumnType("int");

                    b.Property<long>("QualityControlTestId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("TestOperationId", "QualityControlTestId");

                    b.HasIndex("QualityControlTestId");

                    b.ToTable("QualityControlTestOperations");
                });

            modelBuilder.Entity("lena.Domains.QualityControlTestUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("QualityControlTestUnits");
                });

            modelBuilder.Entity("lena.Domains.RepairProduction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductionId")
                        .HasColumnType("int");

                    b.Property<int?>("ReferenceRepairProductionId")
                        .HasColumnType("int");

                    b.Property<int?>("ReturnOfSaleId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte>("SerialStatus")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("WarrantyExpirationExceptionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductionId");

                    b.HasIndex("ReferenceRepairProductionId")
                        .IsUnique()
                        .HasFilter("[ReferenceRepairProductionId] IS NOT NULL");

                    b.HasIndex("ReturnOfSaleId");

                    b.HasIndex("UserId");

                    b.ToTable("RepairProductions");
                });

            modelBuilder.Entity("lena.Domains.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("lena.Domains.ReportPrintSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("NumberOfCopies")
                        .HasColumnType("int");

                    b.Property<int>("PrinterId")
                        .HasColumnType("int");

                    b.Property<int>("ReportId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<bool>("ShowPreview")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowPrintDialog")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PrinterId");

                    b.HasIndex("ReportId");

                    b.HasIndex("UserId");

                    b.ToTable("ReportPrintSettings");
                });

            modelBuilder.Entity("lena.Domains.ReportVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApiUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("CreatorUserId")
                        .HasColumnType("int");

                    b.Property<string>("CultureName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExportFormat")
                        .HasColumnType("int");

                    b.Property<bool>("IsBarcodeTemplate")
                        .HasColumnType("bit");

                    b.Property<bool>("IsForExport")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("ReportContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReportId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportVersions");
                });

            modelBuilder.Entity("lena.Domains.ResponsibleDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeComplainDepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Opinion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeComplainDepartmentId");

                    b.ToTable("ResponsibleDepartment");
                });

            modelBuilder.Entity("lena.Domains.ReturnOfSaleSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("QualityControlConsumedQty")
                        .HasColumnType("float");

                    b.Property<double>("QualityControlFailedQty")
                        .HasColumnType("float");

                    b.Property<double>("QualityControlPassedQty")
                        .HasColumnType("float");

                    b.Property<double>("ReceiptQualityControlConsumedQty")
                        .HasColumnType("float");

                    b.Property<double>("ReceiptQualityControlFailedQty")
                        .HasColumnType("float");

                    b.Property<double>("ReceiptQualityControlPassedQty")
                        .HasColumnType("float");

                    b.Property<int>("ReturnOfSaleId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("ReturnOfSaleId")
                        .IsUnique();

                    b.ToTable("ReturnOfSaleSummaries");
                });

            modelBuilder.Entity("lena.Domains.ReturnSerialToPreviousStateRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ConfirmDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int?>("ConfirmerUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Serial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int>("StuffId")
                        .HasColumnType("int");

                    b.Property<long>("StuffSerialCode")
                        .HasColumnType("bigint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("WrongDoerUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConfirmerUserId");

                    b.HasIndex("UserId");

                    b.HasIndex("WrongDoerUserId");

                    b.HasIndex("StuffSerialCode", "StuffId");

                    b.ToTable("ReturnSerialToPreviousStateRequests");
                });

            modelBuilder.Entity("lena.Domains.RialRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("FinancialTransactionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.Property<int?>("ReferenceRialRateId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("FinancialTransactionId");

                    b.HasIndex("ReferenceRialRateId");

                    b.ToTable("RialRates");
                });

            modelBuilder.Entity("lena.Domains.Risk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CargoItemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("CreatorUserId")
                        .HasColumnType("int");

                    b.Property<int>("LatestRiskResolveId")
                        .HasColumnType("int");

                    b.Property<int>("LatestRiskStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("PurchaseRequestId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CargoItemId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("LatestRiskResolveId")
                        .IsUnique();

                    b.HasIndex("LatestRiskStatusId")
                        .IsUnique();

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("PurchaseRequestId");

                    b.ToTable("Risks");
                });

            modelBuilder.Entity("lena.Domains.RiskParameter", b =>
                {
                    b.Property<byte>("OccurrenceSeverityStatus")
                        .HasColumnType("tinyint");

                    b.Property<byte>("OccurrenceProbabilityStatus")
                        .HasColumnType("tinyint");

                    b.Property<byte>("RiskLevelStatus")
                        .HasColumnType("tinyint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("OccurrenceSeverityStatus", "OccurrenceProbabilityStatus");

                    b.ToTable("RiskParameters");
                });

            modelBuilder.Entity("lena.Domains.RiskResolve", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CorrectiveAction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatorUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ReviewDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RevieweDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int?>("ReviewerUserId")
                        .HasColumnType("int");

                    b.Property<int>("RiskId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("ReviewerUserId");

                    b.HasIndex("RiskId");

                    b.ToTable("RiskResolves");
                });

            modelBuilder.Entity("lena.Domains.RiskStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<byte>("OccurrenceProbabilityStatus")
                        .HasColumnType("tinyint");

                    b.Property<byte>("OccurrenceSeverityStatus")
                        .HasColumnType("tinyint");

                    b.Property<int>("RiskId")
                        .HasColumnType("int");

                    b.Property<int?>("RiskResolveId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RiskId");

                    b.HasIndex("RiskResolveId")
                        .IsUnique()
                        .HasFilter("[RiskResolveId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.HasIndex("OccurrenceSeverityStatus", "OccurrenceProbabilityStatus");

                    b.ToTable("RiskStatuses");
                });

            modelBuilder.Entity("lena.Domains.ScrumEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BaseEntityId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<short>("DepartmentId")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("EstimatedTime")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCommit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("BaseEntityId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("ScrumEntities");
                });

            modelBuilder.Entity("lena.Domains.ScrumEntityComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("ScrumEntityId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ScrumEntityId");

                    b.HasIndex("UserId");

                    b.ToTable("ScrumEntityComments");
                });

            modelBuilder.Entity("lena.Domains.ScrumEntityDependency", b =>
                {
                    b.Property<int>("RequisiteScrumEntityId")
                        .HasColumnType("int");

                    b.Property<int>("NextScrumEntityId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("RequisiteScrumEntityId", "NextScrumEntityId");

                    b.HasIndex("NextScrumEntityId");

                    b.ToTable("ScrumEntityDependencies");
                });

            modelBuilder.Entity("lena.Domains.ScrumEntityDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("ScrumEntityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("ScrumEntityId");

                    b.ToTable("ScrumEntityDocuments");
                });

            modelBuilder.Entity("lena.Domains.ScrumEntityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("ScrumEntityId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ScrumEntityId");

                    b.HasIndex("UserId");

                    b.ToTable("ScrumEntityLogs");
                });

            modelBuilder.Entity("lena.Domains.ScrumTaskType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("ScrumTaskTypes");
                });

            modelBuilder.Entity("lena.Domains.SecurityAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublicAction")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SecurityActionGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SecurityActionGroupId");

                    b.ToTable("SecurityActions");
                });

            modelBuilder.Entity("lena.Domains.SecurityActionGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("SecurityActionGroups");
                });

            modelBuilder.Entity("lena.Domains.SendPermissionSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("PreparingSendingQty")
                        .HasColumnType("float");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SendPermissionId")
                        .HasColumnType("int");

                    b.Property<double>("SendedQty")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("SendPermissionId")
                        .IsUnique();

                    b.ToTable("SendPermissionSummaries");
                });

            modelBuilder.Entity("lena.Domains.SerialBuffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BaseTransactionId")
                        .HasColumnType("int");

                    b.Property<double>("DamagedAmount")
                        .HasColumnType("float");

                    b.Property<int>("ProductionTerminalId")
                        .HasColumnType("int");

                    b.Property<double>("RemainingAmount")
                        .HasColumnType("float");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte>("SerialBufferType")
                        .HasColumnType("tinyint");

                    b.Property<double>("ShortageAmount")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BaseTransactionId")
                        .IsUnique();

                    b.HasIndex("ProductionTerminalId");

                    b.ToTable("SerialBuffers");
                });

            modelBuilder.Entity("lena.Domains.SerialFailedOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ConfirmUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRepaired")
                        .HasColumnType("bit");

                    b.Property<int>("ProductionOperationId")
                        .HasColumnType("int");

                    b.Property<int>("ProductionOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("RepairProductionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReviewedDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int?>("ReviewerUserId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("ConfirmUserId");

                    b.HasIndex("ProductionOperationId");

                    b.HasIndex("ProductionOrderId");

                    b.HasIndex("RepairProductionId");

                    b.HasIndex("ReviewerUserId");

                    b.ToTable("SerialFailedOperations");
                });

            modelBuilder.Entity("lena.Domains.SerialFailedOperationFaultOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("OperationId")
                        .HasColumnType("smallint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SerialFailedOperationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.HasIndex("SerialFailedOperationId");

                    b.ToTable("SerialFailedOperationFaultOperations");
                });

            modelBuilder.Entity("lena.Domains.SerialFailedOperationFaultOperationEmployee", b =>
                {
                    b.Property<int>("SerialFailedOperationFaultOperationId")
                        .HasColumnType("int");

                    b.Property<int>("ProductionOperationEmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductionOperatorEmployeeBanId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("SerialFailedOperationFaultOperationId", "ProductionOperationEmployeeId");

                    b.HasIndex("ProductionOperationEmployeeId");

                    b.HasIndex("ProductionOperatorEmployeeBanId");

                    b.ToTable("SerialFailedOperationFaultOperationEmployees");
                });

            modelBuilder.Entity("lena.Domains.SerialProfile", b =>
                {
                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<int>("StuffId")
                        .HasColumnType("int");

                    b.Property<int>("CooperatorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Code", "StuffId");

                    b.HasIndex("CooperatorId");

                    b.HasIndex("StuffId");

                    b.HasIndex("UserId");

                    b.ToTable("SerialProfiles");
                });

            modelBuilder.Entity("lena.Domains.SoftwareWorkReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReportDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("SoftwareWorkReports");
                });

            modelBuilder.Entity("lena.Domains.SoftwareWorkReportItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Estimated")
                        .HasColumnType("int");

                    b.Property<string>("Issue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("RestTimeIssue")
                        .HasColumnType("tinyint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SoftwareWorkReportId")
                        .HasColumnType("int");

                    b.Property<int>("Spent")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SoftwareWorkReportId");

                    b.ToTable("SoftwareWorkReportItems");
                });

            modelBuilder.Entity("lena.Domains.StockChecking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActiveTagTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("smalldatetime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<bool>("ShowInventory")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("smalldatetime");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActiveTagTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("StockCheckings");
                });

            modelBuilder.Entity("lena.Domains.StockCheckingPerson", b =>
                {
                    b.Property<int>("StockCheckingId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("StockCheckingId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("StockCheckingPersons");
                });

            modelBuilder.Entity("lena.Domains.StockCheckingStuff", b =>
                {
                    b.Property<int>("StockCheckingId")
                        .HasColumnType("int");

                    b.Property<int>("StuffId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("StockCheckingId", "StuffId");

                    b.HasIndex("StuffId");

                    b.ToTable("StockCheckingStuffs");
                });

            modelBuilder.Entity("lena.Domains.StockCheckingTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("StockCheckingId")
                        .HasColumnType("int");

                    b.Property<int>("StuffId")
                        .HasColumnType("int");

                    b.Property<long?>("StuffSerialCode")
                        .HasColumnType("bigint");

                    b.Property<int>("TagTypeId")
                        .HasColumnType("int");

                    b.Property<byte?>("UnitId")
                        .HasColumnType("tinyint");

                    b.Property<short>("WarehouseId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("StuffId");

                    b.HasIndex("TagTypeId");

                    b.HasIndex("UnitId");

                    b.HasIndex("StockCheckingId", "WarehouseId");

                    b.HasIndex("StuffSerialCode", "StuffId");

                    b.ToTable("StockCheckingTags");
                });

            modelBuilder.Entity("lena.Domains.StockCheckingWarehouse", b =>
                {
                    b.Property<int>("StockCheckingId")
                        .HasColumnType("int");

                    b.Property<short>("WarehouseId")
                        .HasColumnType("smallint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("StockCheckingId", "WarehouseId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("StockCheckingWarehouses");
                });

            modelBuilder.Entity("lena.Domains.StockPlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("WarehouseId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseId");

                    b.ToTable("StockPlaces");
                });

            modelBuilder.Entity("lena.Domains.StoreReceiptDeleteRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StoreReceiptId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreReceiptId");

                    b.HasIndex("UserId");

                    b.ToTable("StoreReceiptDeleteRequests");
                });

            modelBuilder.Entity("lena.Domains.StoreReceiptDeleteRequestConfirmationLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConfirmerUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StoreReceiptDeleteRequestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConfirmerUserId");

                    b.HasIndex("StoreReceiptDeleteRequestId");

                    b.ToTable("StoreReceiptDeleteRequestConfirmationLogs");
                });

            modelBuilder.Entity("lena.Domains.StoreReceiptDeleteRequestStuffSerial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("StoreReceiptDeleteRequestId")
                        .HasColumnType("int");

                    b.Property<long>("StuffSerialCode")
                        .HasColumnType("bigint");

                    b.Property<int>("StuffSerialId")
                        .HasColumnType("int");

                    b.Property<byte>("UnitId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("StoreReceiptDeleteRequestId");

                    b.HasIndex("UnitId");

                    b.HasIndex("StuffSerialCode", "StuffSerialId");

                    b.ToTable("StoreReceiptDeleteRequestStuffSerials");
                });

            modelBuilder.Entity("lena.Domains.StoreReceiptSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("PayedAmount")
                        .HasColumnType("float");

                    b.Property<double>("QualityControlConsumedQty")
                        .HasColumnType("float");

                    b.Property<double>("QualityControlFailedQty")
                        .HasColumnType("float");

                    b.Property<double>("QualityControlPassedQty")
                        .HasColumnType("float");

                    b.Property<double>("ReceiptQualityControlConsumedQty")
                        .HasColumnType("float");

                    b.Property<double>("ReceiptQualityControlFailedQty")
                        .HasColumnType("float");

                    b.Property<double>("ReceiptQualityControlPassedQty")
                        .HasColumnType("float");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("StoreReceiptId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreReceiptId")
                        .IsUnique();

                    b.ToTable("StoreReceiptSummaries");
                });

            modelBuilder.Entity("lena.Domains.Stuff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("CeofficientSet")
                        .HasColumnType("smallint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("FaultyPercentage")
                        .HasColumnType("float");

                    b.Property<double?>("GrossWeight")
                        .HasColumnType("float");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTraceable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NeedToQualityControl")
                        .HasColumnType("bit");

                    b.Property<bool>("NeedToQualityControlDocumentUpload")
                        .HasColumnType("bit");

                    b.Property<double?>("NetWeight")
                        .HasColumnType("float");

                    b.Property<string>("Noun")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectHeaderId")
                        .HasColumnType("int");

                    b.Property<int?>("QualityControlCheckDuration")
                        .HasColumnType("int");

                    b.Property<short?>("QualityControlDepartmentId")
                        .HasColumnType("smallint");

                    b.Property<int?>("QualityControlEmployeeId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("StockSafety")
                        .HasColumnType("int");

                    b.Property<short>("StuffCategoryId")
                        .HasColumnType("smallint");

                    b.Property<int?>("StuffDefinitionRequestId")
                        .HasColumnType("int");

                    b.Property<int?>("StuffHSGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("StuffPurchaseCategoryId")
                        .HasColumnType("int");

                    b.Property<byte>("StuffType")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Tolerance")
                        .HasColumnType("float");

                    b.Property<byte>("UnitTypeId")
                        .HasColumnType("tinyint");

                    b.Property<double?>("Volume")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProjectHeaderId")
                        .IsUnique()
                        .HasFilter("[ProjectHeaderId] IS NOT NULL");

                    b.HasIndex("QualityControlDepartmentId");

                    b.HasIndex("QualityControlEmployeeId");

                    b.HasIndex("StuffCategoryId");

                    b.HasIndex("StuffDefinitionRequestId")
                        .IsUnique()
                        .HasFilter("[StuffDefinitionRequestId] IS NOT NULL");

                    b.HasIndex("StuffHSGroupId");

                    b.HasIndex("StuffPurchaseCategoryId");

                    b.HasIndex("UnitTypeId");

                    b.ToTable("Stuffs");
                });

            modelBuilder.Entity("lena.Domains.StuffBasePriceCustoms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("CurrencyId")
                        .HasColumnType("tinyint");

                    b.Property<short?>("HowToBuyId")
                        .HasColumnType("smallint");

                    b.Property<double?>("HowToBuyRatio")
                        .HasColumnType("float");

                    b.Property<double?>("Percent")
                        .HasColumnType("float");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("StuffBasePriceId")
                        .HasColumnType("int");

                    b.Property<double?>("Tariff")
                        .HasColumnType("float");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<double?>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("HowToBuyId");

                    b.HasIndex("StuffBasePriceId")
                        .IsUnique();

                    b.ToTable("StuffBasePriceCustoms");
                });

            modelBuilder.Entity("lena.Domains.StuffBasePriceTransport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte?>("ComputeType")
                        .HasColumnType("tinyint");

                    b.Property<double?>("Percent")
                        .HasColumnType("float");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("StuffBasePriceId")
                        .HasColumnType("int");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("StuffBasePriceId")
                        .IsUnique();

                    b.ToTable("StuffBasePriceTransports");
                });

            modelBuilder.Entity("lena.Domains.StuffCategory", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("DefaultWarehouseId")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("ParentStuffCategoryId")
                        .HasColumnType("smallint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("DefaultWarehouseId");

                    b.HasIndex("ParentStuffCategoryId");

                    b.ToTable("StuffCategories");
                });

            modelBuilder.Entity("lena.Domains.StuffDefinitionRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ConfirmDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConfirmDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ConfirmerUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<byte>("DefinitionStatus")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Noun")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("StuffId")
                        .HasColumnType("int");

                    b.Property<int>("StuffPurchaseCategoryId")
                        .HasColumnType("int");

                    b.Property<byte>("StuffType")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("UnitTypeId")
                        .HasColumnType("tinyint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConfirmerUserId");

                    b.HasIndex("StuffId");

                    b.HasIndex("StuffPurchaseCategoryId");

                    b.HasIndex("UnitTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("StuffDefinitionRequests");
                });

            modelBuilder.Entity("lena.Domains.StuffDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte>("StuffDocumentType")
                        .HasColumnType("tinyint");

                    b.Property<int>("StuffId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StuffId");

                    b.HasIndex("UserId");

                    b.ToTable("StuffDocuments");
                });

            modelBuilder.Entity("lena.Domains.StuffFractionResult", b =>
                {
                    b.Property<int>("StuffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AfterPeriodPlanAmount")
                        .HasColumnType("float");

                    b.Property<double>("AfterPeriodPlanCargoAmount")
                        .HasColumnType("float");

                    b.Property<double>("AfterPeriodPlanConsumeAmount")
                        .HasColumnType("float");

                    b.Property<double>("AfterPeriodPlanMinusAmount")
                        .HasColumnType("float");

                    b.Property<double>("AfterPeriodPlanPlusAmount")
                        .HasColumnType("float");

                    b.Property<double>("AfterPeriodPlanProduceAmount")
                        .HasColumnType("float");

                    b.Property<double>("AfterPeriodPlanPurchaseOrderAmount")
                        .HasColumnType("float");

                    b.Property<double>("AfterPeriodPlanPurchaseRequestAmount")
                        .HasColumnType("float");

                    b.Property<double>("AfterPeriodPlanSaleOrderAmount")
                        .HasColumnType("float");

                    b.Property<double>("AvailableAmount")
                        .HasColumnType("float");

                    b.Property<double>("BeforePeriodPlanAmount")
                        .HasColumnType("float");

                    b.Property<double>("BeforePeriodPlanCargoAmount")
                        .HasColumnType("float");

                    b.Property<double>("BeforePeriodPlanConsumeAmount")
                        .HasColumnType("float");

                    b.Property<double>("BeforePeriodPlanMinusAmount")
                        .HasColumnType("float");

                    b.Property<double>("BeforePeriodPlanPlusAmount")
                        .HasColumnType("float");

                    b.Property<double>("BeforePeriodPlanProduceAmount")
                        .HasColumnType("float");

                    b.Property<double>("BeforePeriodPlanPurchaseOrderAmount")
                        .HasColumnType("float");

                    b.Property<double>("BeforePeriodPlanPurchaseRequestAmount")
                        .HasColumnType("float");

                    b.Property<double>("BeforePeriodPlanSaleOrderAmount")
                        .HasColumnType("float");

                    b.Property<double>("BlockedAmount")
                        .HasColumnType("float");

                    b.Property<double>("BufferRemainingAmount")
                        .HasColumnType("float");

                    b.Property<double>("PeriodPlanAmount")
                        .HasColumnType("float");

                    b.Property<double>("PeriodPlanCargoAmount")
                        .HasColumnType("float");

                    b.Property<double>("PeriodPlanConsumeAmount")
                        .HasColumnType("float");

                    b.Property<double>("PeriodPlanMinusAmount")
                        .HasColumnType("float");

                    b.Property<double>("PeriodPlanPlusAmount")
                        .HasColumnType("float");

                    b.Property<double>("PeriodPlanProduceAmount")
                        .HasColumnType("float");

                    b.Property<double>("PeriodPlanPurchaseOrderAmount")
                        .HasColumnType("float");

                    b.Property<double>("PeriodPlanPurchaseRequestAmount")
                        .HasColumnType("float");

                    b.Property<double>("PeriodPlanSaleOrderAmount")
                        .HasColumnType("float");

                    b.Property<double>("PlanAmount")
                        .HasColumnType("float");

                    b.Property<double>("PlanCargoAmount")
                        .HasColumnType("float");

                    b.Property<double>("PlanConsumeAmount")
                        .HasColumnType("float");

                    b.Property<double>("PlanProduceAmount")
                        .HasColumnType("float");

                    b.Property<double>("PlanPurchaseOrderAmount")
                        .HasColumnType("float");

                    b.Property<double>("PlanPurchaseRequestAmount")
                        .HasColumnType("float");

                    b.Property<double>("PlanSaleOrderAmount")
                        .HasColumnType("float");

                    b.Property<double>("QualityControlAmount")
                        .HasColumnType("float");

                    b.Property<double>("RemainedAmount")
                        .HasColumnType("float");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("StuffCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("StuffFaultyPercentage")
                        .HasColumnType("float");

                    b.Property<string>("StuffName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StuffNoun")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StuffStockSafety")
                        .HasColumnType("int");

                    b.Property<string>("StuffTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<byte>("UnitId")
                        .HasColumnType("tinyint");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("UnitTypeId")
                        .HasColumnType("tinyint");

                    b.Property<string>("UnitTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("WasteAmount")
                        .HasColumnType("float");

                    b.HasKey("StuffId");

                    b.ToTable("StuffFractionResults");
                });

            modelBuilder.Entity("lena.Domains.StuffFractionTemporaryStuff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ProjectCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Qty")
                        .HasColumnType("float");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("StuffId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StuffId");

                    b.HasIndex("UserId");

                    b.ToTable("StuffFractionTemporaryStuffs");
                });

            modelBuilder.Entity("lena.Domains.StuffHSGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StuffHSGroups");
                });

            modelBuilder.Entity("lena.Domains.StuffPriceDiscrepancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ConfirmationDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ConfirmationDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ConfirmerUserId")
                        .HasColumnType("int");

                    b.Property<double?>("CurrentStuffBasePrice")
                        .HasColumnType("float");

                    b.Property<byte?>("CurrentStuffBasePriceCurrencyId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("PurchaseOrderCurrencyId")
                        .HasColumnType("tinyint");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<double>("PurchaseOrderPrice")
                        .HasColumnType("float");

                    b.Property<double>("PurchaseOrderQty")
                        .HasColumnType("float");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("ConfirmerUserId");

                    b.HasIndex("CurrentStuffBasePriceCurrencyId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("StuffPriceDiscrepancies");
                });

            modelBuilder.Entity("lena.Domains.StuffProductionFaultType", b =>
                {
                    b.Property<int>("ProductionFaultTypeId")
                        .HasColumnType("int");

                    b.Property<int>("StuffId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ProductionFaultTypeId", "StuffId");

                    b.HasIndex("StuffId");

                    b.ToTable("StuffProductionFaultTypes");
                });

            modelBuilder.Entity("lena.Domains.StuffProvider", b =>
                {
                    b.Property<int>("StuffId")
                        .HasColumnType("int");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("InstantLeadTime")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<short>("LeadTime")
                        .HasColumnType("smallint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("StuffId", "ProviderId");

                    b.HasIndex("ProviderId");

                    b.ToTable("StuffProviders");
                });

            modelBuilder.Entity("lena.Domains.StuffPurchaseCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("QualityControlDepartmentId")
                        .HasColumnType("smallint");

                    b.Property<int>("QualityControlUserGroupId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("StuffDefinitionConfirmerUserGroupId")
                        .HasColumnType("int");

                    b.Property<int>("StuffDefinitionUserGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QualityControlDepartmentId");

                    b.HasIndex("QualityControlUserGroupId");

                    b.HasIndex("StuffDefinitionConfirmerUserGroupId");

                    b.HasIndex("StuffDefinitionUserGroupId");

                    b.ToTable("StuffPurchaseCategories");
                });

            modelBuilder.Entity("lena.Domains.StuffPurchaseCategoryDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicatorConfirmerUserGroupId")
                        .HasColumnType("int");

                    b.Property<int>("ApplicatorUserGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("RequestConfirmerUserGroupId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("StuffPurchaseCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicatorConfirmerUserGroupId");

                    b.HasIndex("ApplicatorUserGroupId");

                    b.HasIndex("RequestConfirmerUserGroupId");

                    b.HasIndex("StuffPurchaseCategoryId");

                    b.ToTable("StuffPurchaseCategoryDetails");
                });

            modelBuilder.Entity("lena.Domains.StuffQualityControlObservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisterDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("RegisterarUserId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("StuffId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegisterarUserId");

                    b.HasIndex("StuffId");

                    b.ToTable("StuffQualityControlObservations");
                });

            modelBuilder.Entity("lena.Domains.StuffQualityControlTest", b =>
                {
                    b.Property<int>("StuffId")
                        .HasColumnType("int");

                    b.Property<long>("QualityControlTestId")
                        .HasColumnType("bigint");

                    b.Property<string>("CorrectiveReaction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Frequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MeasurementMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("QualityControlTestConditionQualityControlTestId")
                        .HasColumnType("bigint");

                    b.Property<int?>("QualityControlTestConditionTestConditionId")
                        .HasColumnType("int");

                    b.Property<long?>("QualityControlTestEquipmentQualityControlTestId")
                        .HasColumnType("bigint");

                    b.Property<int?>("QualityControlTestEquipmentTestEquipmentId")
                        .HasColumnType("int");

                    b.Property<long?>("QualityControlTestImportanceDegreeQualityControlTestId")
                        .HasColumnType("bigint");

                    b.Property<int?>("QualityControlTestImportanceDegreeTestImportanceDegreeId")
                        .HasColumnType("int");

                    b.Property<long?>("QualityControlTestOperationQualityControlTestId")
                        .HasColumnType("bigint");

                    b.Property<int?>("QualityControlTestOperationTestOperationId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("StuffId", "QualityControlTestId");

                    b.HasIndex("QualityControlTestId");

                    b.HasIndex("QualityControlTestConditionTestConditionId", "QualityControlTestConditionQualityControlTestId");

                    b.HasIndex("QualityControlTestEquipmentTestEquipmentId", "QualityControlTestEquipmentQualityControlTestId");

                    b.HasIndex("QualityControlTestImportanceDegreeTestImportanceDegreeId", "QualityControlTestImportanceDegreeQualityControlTestId");

                    b.HasIndex("QualityControlTestOperationTestOperationId", "QualityControlTestOperationQualityControlTestId");

                    b.ToTable("StuffQualityControlTests");
                });

            modelBuilder.Entity("lena.Domains.StuffQualityControlTestCondition", b =>
                {
                    b.Property<int>("StuffId")
                        .HasColumnType("int");

                    b.Property<long>("QualityControlTestId")
                        .HasColumnType("bigint");

                    b.Property<int>("QualityControlConditionTestConditionId")
                        .HasColumnType("int");

                    b.Property<long>("QualityControlTestConditionQualityControlTestId")
                        .HasColumnType("bigint");

                    b.Property<string>("AcceptanceLimit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Max")
                        .HasColumnType("float");

                    b.Property<double>("Min")
                        .HasColumnType("float");

                    b.Property<int>("QualityControlTestUnitId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte>("ToleranceType")
                        .HasColumnType("tinyint");

                    b.HasKey("StuffId", "QualityControlTestId", "QualityControlConditionTestConditionId", "QualityControlTestConditionQualityControlTestId");

                    b.HasIndex("QualityControlTestUnitId");

                    b.HasIndex("QualityControlConditionTestConditionId", "QualityControlTestConditionQualityControlTestId");

                    b.ToTable("StuffQualityControlTestConditions");
                });

            modelBuilder.Entity("lena.Domains.StuffQualityControlTestEquipment", b =>
                {
                    b.Property<int>("StuffId")
                        .HasColumnType("int");

                    b.Property<long>("QualityControlTestId")
                        .HasColumnType("bigint");

                    b.Property<int>("QualityControlEquipmentTestEquipmentId")
                        .HasColumnType("int");

                    b.Property<long>("QualityControlTestEquipmentQualityControlTestId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("StuffId", "QualityControlTestId", "QualityControlEquipmentTestEquipmentId", "QualityControlTestEquipmentQualityControlTestId");

                    b.HasIndex("QualityControlEquipmentTestEquipmentId", "QualityControlTestEquipmentQualityControlTestId");

                    b.ToTable("StuffQualityControlTestEquipments");
                });

            modelBuilder.Entity("lena.Domains.StuffQualityControlTestImportanceDegree", b =>
                {
                    b.Property<int>("StuffId")
                        .HasColumnType("int");

                    b.Property<long>("QualityControlTestId")
                        .HasColumnType("bigint");

                    b.Property<int>("QualityControlImportanceDegreeTestImportanceDegreeId")
                        .HasColumnType("int");

                    b.Property<long>("QualityControlTestImportanceDegreeQualityControlTestId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("StuffId", "QualityControlTestId", "QualityControlImportanceDegreeTestImportanceDegreeId", "QualityControlTestImportanceDegreeQualityControlTestId");

                    b.HasIndex("QualityControlImportanceDegreeTestImportanceDegreeId", "QualityControlTestImportanceDegreeQualityControlTestId");

                    b.ToTable("StuffQualityControlTestImportanceDegrees");
                });

            modelBuilder.Entity("lena.Domains.StuffQualityControlTestOperation", b =>
                {
                    b.Property<int>("StuffId")
                        .HasColumnType("int");

                    b.Property<long>("QualityControlTestId")
                        .HasColumnType("bigint");

                    b.Property<int>("QualityControlOperationTestOperationId")
                        .HasColumnType("int");

                    b.Property<long>("QualityControlTestOperationQualityControlTestId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("StuffId", "QualityControlTestId", "QualityControlOperationTestOperationId", "QualityControlTestOperationQualityControlTestId");

                    b.HasIndex("QualityControlOperationTestOperationId", "QualityControlTestOperationQualityControlTestId");

                    b.ToTable("StuffQualityControlTestOperations");
                });

            modelBuilder.Entity("lena.Domains.StuffRequestMilestoneDetailSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("CargoedQty")
                        .HasColumnType("float");

                    b.Property<double>("OrderedQty")
                        .HasColumnType("float");

                    b.Property<double>("QualityControlPassedQty")
                        .HasColumnType("float");

                    b.Property<double>("ReciptedQty")
                        .HasColumnType("float");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("StuffRequestMilestoneDetailId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StuffRequestMilestoneDetailId")
                        .IsUnique();

                    b.ToTable("StuffRequestMilestoneDetailSummaries");
                });

            modelBuilder.Entity("lena.Domains.StuffSerial", b =>
                {
                    b.Property<long>("Code")
                        .HasColumnType("bigint");

                    b.Property<int>("StuffId")
                        .HasColumnType("int");

                    b.Property<long>("BatchNo")
                        .HasColumnType("bigint");

                    b.Property<short?>("BillOfMaterialVersion")
                        .HasColumnType("smallint");

                    b.Property<string>("CRC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("InitQty")
                        .HasColumnType("float");

                    b.Property<byte>("InitUnitId")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsPacking")
                        .HasColumnType("bit");

                    b.Property<int?>("IssueConfirmerUserId")
                        .HasColumnType("int");

                    b.Property<int?>("IssueUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedUserId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("PartitionStuffSerialId")
                        .HasColumnType("int");

                    b.Property<double>("PartitionedQty")
                        .HasColumnType("float");

                    b.Property<int?>("ProductionOrderId")
                        .HasColumnType("int");

                    b.Property<string>("QualityControlDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Serial")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SerialProfileCode")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<double?>("UnitRialPrice")
                        .HasColumnType("float");

                    b.Property<DateTime?>("WarehouseEnterTime")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Code", "StuffId");

                    b.HasIndex("InitUnitId");

                    b.HasIndex("IssueConfirmerUserId");

                    b.HasIndex("IssueUserId");

                    b.HasIndex("LastModifiedUserId");

                    b.HasIndex("PartitionStuffSerialId");

                    b.HasIndex("ProductionOrderId");

                    b.HasIndex("StuffId");

                    b.HasIndex("BillOfMaterialVersion", "StuffId");

                    b.HasIndex("SerialProfileCode", "StuffId");

                    b.ToTable("StuffSerials");
                });

            modelBuilder.Entity("lena.Domains.StuffStockPlace", b =>
                {
                    b.Property<int>("StuffId")
                        .HasColumnType("int");

                    b.Property<int>("StockPlaceId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("StuffId", "StockPlaceId");

                    b.HasIndex("StockPlaceId");

                    b.ToTable("StuffStockPlaces");
                });

            modelBuilder.Entity("lena.Domains.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("lena.Domains.SuppliesPurchaserUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int>("PurchaserUserId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("StuffId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PurchaserUserId");

                    b.HasIndex("StuffId");

                    b.ToTable("SuppliesPurchaserUsers");
                });

            modelBuilder.Entity("lena.Domains.TagCounting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("StockCheckingTagId")
                        .HasColumnType("int");

                    b.Property<byte>("UnitId")
                        .HasColumnType("tinyint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StockCheckingTagId");

                    b.HasIndex("UnitId");

                    b.HasIndex("UserId");

                    b.ToTable("TagCountings");
                });

            modelBuilder.Entity("lena.Domains.TagType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("TagTypes");
                });

            modelBuilder.Entity("lena.Domains.TerminalTicketRegistery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("smalldatetime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TerminalTicketRegisteries");
                });

            modelBuilder.Entity("lena.Domains.TestCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Condition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TestConditions");
                });

            modelBuilder.Entity("lena.Domains.TestEquipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("TestEquipments");
                });

            modelBuilder.Entity("lena.Domains.TestImportanceDegree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("TestImportanceDegrees");
                });

            modelBuilder.Entity("lena.Domains.TestOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("TestOperations");
                });

            modelBuilder.Entity("lena.Domains.TicketComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("TicketSoftwareId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TicketSoftwareId");

                    b.HasIndex("UserId");

                    b.ToTable("TicketComments");
                });

            modelBuilder.Entity("lena.Domains.TicketFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("TicketSoftWareId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TicketSoftWareId");

                    b.HasIndex("UserId");

                    b.ToTable("TicketFiles");
                });

            modelBuilder.Entity("lena.Domains.TicketSoftware", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("IssueLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LastedEditorUserId")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LastedEditorUserId");

                    b.HasIndex("UserId");

                    b.ToTable("TicketSoftwares");
                });

            modelBuilder.Entity("lena.Domains.TransactionBatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TransactionBatches");
                });

            modelBuilder.Entity("lena.Domains.TransactionType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Factor")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("RollbackTransactionTypeId")
                        .HasColumnType("smallint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte>("TransactionLevel")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("RollbackTransactionTypeId");

                    b.ToTable("TransactionTypes");
                });

            modelBuilder.Entity("lena.Domains.Unit", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("ConversionRatio")
                        .HasColumnType("float");

                    b.Property<byte>("DecimalDigitCount")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMainUnit")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("UnitTypeId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("UnitTypeId");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("lena.Domains.UnitType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("UnitTypes");
                });

            modelBuilder.Entity("lena.Domains.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasAccessFromInternet")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LockOutDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("LoginFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTime>("PasswordExpirationDate")
                        .HasColumnType("smalldatetime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("lena.Domains.UserGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("lena.Domains.UserMessageRelation", b =>
                {
                    b.Property<int>("FromUserId")
                        .HasColumnType("int");

                    b.Property<int>("ToUserId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("FromUserId", "ToUserId");

                    b.HasIndex("ToUserId");

                    b.ToTable("UserMessageRelations");
                });

            modelBuilder.Entity("lena.Domains.UserPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPosts");
                });

            modelBuilder.Entity("lena.Domains.UserSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("ValueType")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("lena.Domains.UserToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ExpiresIn")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("lena.Domains.Warehouse", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("DepartmentId")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("FIFO")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<byte>("WarehouseType")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("lena.Domains.WarehouseExitReceiptType", b =>
                {
                    b.Property<short>("WarehouseId")
                        .HasColumnType("smallint");

                    b.Property<int>("ExitReceiptRequestTypeId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("WarehouseId", "ExitReceiptRequestTypeId");

                    b.HasIndex("ExitReceiptRequestTypeId");

                    b.ToTable("WarehouseExitReceiptTypes");
                });

            modelBuilder.Entity("lena.Domains.WarehouseFiscalPeriod", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("smalldatetime");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("Id");

                    b.ToTable("WarehouseFiscalPeriods");
                });

            modelBuilder.Entity("lena.Domains.WarehouseInventoryResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("AvailableAmount")
                        .HasColumnType("float");

                    b.Property<string>("BillOfMaterialTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("BillOfMaterialVersion")
                        .HasColumnType("smallint");

                    b.Property<double?>("BlockedAmount")
                        .HasColumnType("float");

                    b.Property<byte>("DecimalDigitCount")
                        .HasColumnType("tinyint");

                    b.Property<string>("IssueConfirmerUserFullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IssueConfirmerUserId")
                        .HasColumnType("int");

                    b.Property<string>("IssueUserFullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IssueUserId")
                        .HasColumnType("int");

                    b.Property<double?>("QualityControlAmount")
                        .HasColumnType("float");

                    b.Property<string>("QualityControlDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Serial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("SerialBufferAmount")
                        .HasColumnType("float");

                    b.Property<int?>("SerialProfileCode")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SerialProfileDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<byte?>("SerialStatus")
                        .HasColumnType("tinyint");

                    b.Property<string>("StockPlaceCodes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StockPlaceTitles")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("StuffCategoryId")
                        .HasColumnType("smallint");

                    b.Property<string>("StuffCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StuffCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StuffId")
                        .HasColumnType("int");

                    b.Property<string>("StuffName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("StuffSerialCode")
                        .HasColumnType("bigint");

                    b.Property<byte>("StuffType")
                        .HasColumnType("tinyint");

                    b.Property<double?>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<byte>("UnitId")
                        .HasColumnType("tinyint");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("UnitRialPrice")
                        .HasColumnType("float");

                    b.Property<DateTime?>("WarehouseEnterTime")
                        .HasColumnType("datetime2");

                    b.Property<short>("WarehouseId")
                        .HasColumnType("smallint");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("WasteAmount")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("WarehouseInventoryResults");
                });

            modelBuilder.Entity("lena.Domains.WarehousePriceReportResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AvailableAmount")
                        .HasColumnType("float");

                    b.Property<double>("BlockedAmount")
                        .HasColumnType("float");

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("CurrencyDecimalDigitCount")
                        .HasColumnType("tinyint");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("CurrencySign")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrencyTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("LastStuffPrice")
                        .HasColumnType("float");

                    b.Property<DateTime?>("LastStuffPriceDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<double>("QualityControlAmount")
                        .HasColumnType("float");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Serial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SerialBufferAmount")
                        .HasColumnType("float");

                    b.Property<int?>("StuffCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("StuffCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StuffCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StuffId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StuffLastTransactionDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("StuffName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("StuffSerialCode")
                        .HasColumnType("bigint");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<double?>("TotalAmountPrice")
                        .HasColumnType("float");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("WasteAmount")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("WarehousePriceReportResults");
                });

            modelBuilder.Entity("lena.Domains.WarehouseStoreReceiptType", b =>
                {
                    b.Property<short>("WarehouseId")
                        .HasColumnType("smallint");

                    b.Property<byte>("StoreReceiptType")
                        .HasColumnType("tinyint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("WarehouseId", "StoreReceiptType");

                    b.ToTable("WarehouseSotreReceiptTypes");
                });

            modelBuilder.Entity("lena.Domains.WarehouseStuffType", b =>
                {
                    b.Property<short>("WarehouseId")
                        .HasColumnType("smallint");

                    b.Property<byte>("StuffType")
                        .HasColumnType("tinyint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("WarehouseId", "StuffType");

                    b.ToTable("WarehouseStuffTypes");
                });

            modelBuilder.Entity("lena.Domains.WarehouseTransactionLevel", b =>
                {
                    b.Property<short>("WareHouserId")
                        .HasColumnType("smallint");

                    b.Property<byte>("TransactionLevel")
                        .HasColumnType("tinyint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("WareHouserId", "TransactionLevel");

                    b.ToTable("WarehouseTransactionLevels");
                });

            modelBuilder.Entity("lena.Domains.WarrantyExpirationExceptionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FreeOfCharge")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WarrantyExpirationExceptionTypes");
                });

            modelBuilder.Entity("lena.Domains.WeightDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<int>("IndicatorWeightId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("IndicatorWeightId");

                    b.ToTable("WeightDays");
                });

            modelBuilder.Entity("lena.Domains.WorkPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BillOfMaterialStuffId")
                        .HasColumnType("int");

                    b.Property<short>("BillOfMaterialVersion")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BillOfMaterialVersion", "BillOfMaterialStuffId");

                    b.ToTable("WorkPlans");
                });

            modelBuilder.Entity("lena.Domains.WorkPlanStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("BatchCount")
                        .HasColumnType("float");

                    b.Property<long>("BatchTime")
                        .HasColumnType("bigint");

                    b.Property<short?>("ConsumeWarehouseId")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("InitialTime")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("NeedToQualityControl")
                        .HasColumnType("bit");

                    b.Property<bool>("PlanningWithoutMachineLimit")
                        .HasColumnType("bit");

                    b.Property<short?>("ProductWarehouseId")
                        .HasColumnType("smallint");

                    b.Property<int>("ProductionLineId")
                        .HasColumnType("int");

                    b.Property<int>("ProductionStepId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<long>("SwitchTime")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkPlanId")
                        .HasColumnType("int");

                    b.Property<bool>("WorkPlanIsPublished")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ConsumeWarehouseId");

                    b.HasIndex("ProductWarehouseId");

                    b.HasIndex("ProductionStepId");

                    b.HasIndex("WorkPlanId");

                    b.HasIndex("ProductionLineId", "ProductionStepId");

                    b.ToTable("WorkPlanSteps");
                });

            modelBuilder.Entity("lena.Domains.WorkShift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("WorkShifts");
                });

            modelBuilder.Entity("lena.Domains.WorkStation", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductionLineId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("ProductionLineId");

                    b.ToTable("WorkStations");
                });

            modelBuilder.Entity("lena.Domains.WorkStationOperation", b =>
                {
                    b.Property<short>("WorkStationId")
                        .HasColumnType("smallint");

                    b.Property<short>("OperationId")
                        .HasColumnType("smallint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("WorkStationId", "OperationId");

                    b.HasIndex("OperationId");

                    b.ToTable("WorkStationOperations");
                });

            modelBuilder.Entity("lena.Domains.WorkStationPart", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<short>("WorkStationId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("WorkStationId");

                    b.ToTable("WorkStationParts");
                });

            modelBuilder.Entity("lena.Domains.BankOrder", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<byte>("BankId")
                        .HasColumnType("tinyint");

                    b.Property<short>("BankOrderContractTypeId")
                        .HasColumnType("smallint");

                    b.Property<int>("BankOrderType")
                        .HasColumnType("int");

                    b.Property<byte>("CountryId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("CurrencyId")
                        .HasColumnType("tinyint");

                    b.Property<short>("CustomhouseId")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("smalldatetime");

                    b.Property<double>("FOB")
                        .HasColumnType("float");

                    b.Property<string>("FolderCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("SettlementDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int>("StuffPriority")
                        .HasColumnType("int");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<double>("TransferCost")
                        .HasColumnType("float");

                    b.Property<bool>("WithoutCurrencyTransfer")
                        .HasColumnType("bit");

                    b.HasIndex("BankId");

                    b.HasIndex("BankOrderContractTypeId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomhouseId");

                    b.HasIndex("ProviderId");

                    b.ToTable("BaseEntities_BankOrder");
                });

            modelBuilder.Entity("lena.Domains.BaseEntityConfirmation", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<int>("BaseEntityConfirmTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ConfirmDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ConfirmDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ConfirmerId")
                        .HasColumnType("int");

                    b.Property<int>("ConfirmingEntityId")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasIndex("BaseEntityConfirmTypeId");

                    b.HasIndex("ConfirmerId");

                    b.HasIndex("ConfirmingEntityId");

                    b.ToTable("BaseEntities_BaseEntityConfirmation");
                });

            modelBuilder.Entity("lena.Domains.BillOfMaterialPublishRequest", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<int>("BillOfMaterialStuffId")
                        .HasColumnType("int");

                    b.Property<int?>("BillOfMaterialStuffId1")
                        .HasColumnType("int");

                    b.Property<short>("BillOfMaterialVersion")
                        .HasColumnType("smallint");

                    b.Property<short?>("BillOfMaterialVersion1")
                        .HasColumnType("smallint");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.HasIndex("BillOfMaterialVersion", "BillOfMaterialStuffId");

                    b.HasIndex("BillOfMaterialVersion1", "BillOfMaterialStuffId1")
                        .IsUnique()
                        .HasFilter("[BillOfMaterialVersion1] IS NOT NULL AND [BillOfMaterialStuffId1] IS NOT NULL");

                    b.ToTable("BaseEntities_BillOfMaterialPublishRequest");
                });

            modelBuilder.Entity("lena.Domains.Cargo", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.ToTable("BaseEntities_Cargo");
                });

            modelBuilder.Entity("lena.Domains.CargoItem", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<byte?>("BuyingProcess")
                        .HasColumnType("tinyint");

                    b.Property<int>("CargoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CargoItemDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("EstimateDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<Guid?>("ForwarderDocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ForwarderId")
                        .HasColumnType("int");

                    b.Property<short>("HowToBuyId")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int?>("LadingId")
                        .HasColumnType("int");

                    b.Property<int?>("LatestRiskId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<double>("Qty")
                        .HasColumnType("float");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<byte>("UnitId")
                        .HasColumnType("tinyint");

                    b.HasIndex("CargoId");

                    b.HasIndex("ForwarderId");

                    b.HasIndex("HowToBuyId");

                    b.HasIndex("LatestRiskId")
                        .IsUnique()
                        .HasFilter("[LatestRiskId] IS NOT NULL");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("UnitId");

                    b.ToTable("BaseEntities_CargoItem");
                });

            modelBuilder.Entity("lena.Domains.CargoItemDetail", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<int>("CargoItemId")
                        .HasColumnType("int");

                    b.Property<int?>("PurchaseOrderDetailId")
                        .HasColumnType("int");

                    b.Property<double>("Qty")
                        .HasColumnType("float");

                    b.Property<byte>("UnitId")
                        .HasColumnType("tinyint");

                    b.HasIndex("CargoItemId");

                    b.HasIndex("PurchaseOrderDetailId");

                    b.HasIndex("UnitId");

                    b.ToTable("BaseEntities_CargoItemDetail");
                });

            modelBuilder.Entity("lena.Domains.CheckOrderItem", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<bool>("Confirmed")
                        .HasColumnType("bit");

                    b.Property<int>("OrderItemConfirmationId")
                        .HasColumnType("int");

                    b.HasIndex("OrderItemConfirmationId");

                    b.ToTable("BaseEntities_CheckOrderItem");
                });

            modelBuilder.Entity("lena.Domains.ConditionalQualityControl", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<int>("QualityControlAccepterId")
                        .HasColumnType("int");

                    b.Property<int>("QualityControlConfirmationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ResponseConditionalConfirmationDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int?>("ResponseConditionalConfirmationUserId")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int?>("WarrantyExpirationExceptionTypeId")
                        .HasColumnType("int");

                    b.HasIndex("QualityControlAccepterId");

                    b.HasIndex("QualityControlConfirmationId");

                    b.HasIndex("ResponseConditionalConfirmationUserId");

                    b.HasIndex("WarrantyExpirationExceptionTypeId");

                    b.ToTable("BaseEntities_ConditionalQualityControl");
                });

            modelBuilder.Entity("lena.Domains.ConditionalQualityControlItem", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<int>("ConditionalQualityControlId")
                        .HasColumnType("int");

                    b.Property<double>("Qty")
                        .HasColumnType("float");

                    b.Property<int>("QualityControlConfirmationItemId")
                        .HasColumnType("int");

                    b.Property<byte>("UnitId")
                        .HasColumnType("tinyint");

                    b.HasIndex("ConditionalQualityControlId");

                    b.HasIndex("QualityControlConfirmationItemId");

                    b.HasIndex("UnitId");

                    b.ToTable("BaseEntities_ConditionalQualityControlItem");
                });

            modelBuilder.Entity("lena.Domains.CustomsDeclaration", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.ToTable("BaseEntities_CustomsDeclaration");
                });

            modelBuilder.Entity("lena.Domains.Decomposition", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<int>("ProductionOperationId")
                        .HasColumnType("int");

                    b.Property<int>("StuffId")
                        .HasColumnType("int");

                    b.Property<long?>("StuffSerialCode")
                        .HasColumnType("bigint");

                    b.HasIndex("ProductionOperationId")
                        .IsUnique()
                        .HasFilter("[ProductionOperationId] IS NOT NULL");

                    b.HasIndex("StuffId");

                    b.HasIndex("StuffSerialCode", "StuffId");

                    b.ToTable("BaseEntities_Decomposition");
                });

            modelBuilder.Entity("lena.Domains.EquivalentStuffUsage", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<int>("EquivalentStuffId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductionOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductionPlanDetailId")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<double>("UsageQty")
                        .HasColumnType("float");

                    b.HasIndex("EquivalentStuffId");

                    b.HasIndex("ProductionOrderId");

                    b.HasIndex("ProductionPlanDetailId");

                    b.ToTable("BaseEntities_EquivalentStuffUsage");
                });

            modelBuilder.Entity("lena.Domains.EquivalentStuffUsageConfirmation", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<int>("EquivalentStuffUsageId")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasIndex("EquivalentStuffUsageId");

                    b.ToTable("BaseEntities_EquivalentStuffUsageConfirmation");
                });

            modelBuilder.Entity("lena.Domains.ExitReceipt", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<bool?>("Confirmed")
                        .HasColumnType("bit");

                    b.Property<int>("CooperatorId")
                        .HasColumnType("int");

                    b.Property<int?>("OutboundCargoId")
                        .HasColumnType("int");

                    b.HasIndex("CooperatorId");

                    b.HasIndex("OutboundCargoId");

                    b.ToTable("BaseEntities_ExitReceipt");
                });

            modelBuilder.Entity("lena.Domains.ExitReceiptRequest", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CooperatorId")
                        .HasColumnType("int");

                    b.Property<int>("ExitReceiptRequestTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("PriceAnnunciationItemId")
                        .HasColumnType("int");

                    b.Property<double>("Qty")
                        .HasColumnType("float");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<int>("StuffId")
                        .HasColumnType("int");

                    b.Property<byte>("UnitId")
                        .HasColumnType("tinyint");

                    b.Property<short>("WarehouseId")
                        .HasColumnType("smallint");

                    b.HasIndex("CooperatorId");

                    b.HasIndex("ExitReceiptRequestTypeId");

                    b.HasIndex("PriceAnnunciationItemId");

                    b.HasIndex("StuffId");

                    b.HasIndex("UnitId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("BaseEntities_ExitReceiptRequest");
                });

            modelBuilder.Entity("lena.Domains.FinancialDocument", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<double>("CreditAmount")
                        .HasColumnType("float");

                    b.Property<double>("DebitAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("DocumentDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("FinanceId")
                        .HasColumnType("int");

                    b.Property<int>("FinancialAccountId")
                        .HasColumnType("int");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.HasIndex("FinanceId");

                    b.HasIndex("FinancialAccountId");

                    b.ToTable("BaseEntities_FinancialDocument");
                });

            modelBuilder.Entity("lena.Domains.Lading", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<double?>("ActualWeight")
                        .HasColumnType("float");

                    b.Property<int?>("BankOrderId")
                        .HasColumnType("int");

                    b.Property<long?>("BoxCount")
                        .HasColumnType("bigint");

                    b.Property<short>("CityId")
                        .HasColumnType("smallint");

                    b.Property<short?>("CustomhouseId")
                        .HasColumnType("smallint");

                    b.Property<double?>("CustomsValue")
                        .HasColumnType("float");

                    b.Property<DateTime?>("DeliveryDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<bool>("HasLadingChangeRequest")
                        .HasColumnType("bit");

                    b.Property<bool>("HasReceiptLicence")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<string>("KotazhCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LadingBlockerId")
                        .HasColumnType("int");

                    b.Property<bool>("NeedToCost")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ReceiptLicenceDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("SataCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TransportDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.HasIndex("BankOrderId");

                    b.HasIndex("CityId");

                    b.HasIndex("CustomhouseId");

                    b.HasIndex("LadingBlockerId");

                    b.ToTable("BaseEntities_Lading");
                });

            modelBuilder.Entity("lena.Domains.LadingItem", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<int>("CargoItemId")
                        .HasColumnType("int");

                    b.Property<int>("LadingId")
                        .HasColumnType("int");

                    b.Property<double>("Qty")
                        .HasColumnType("float");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.HasIndex("CargoItemId");

                    b.HasIndex("LadingId");

                    b.ToTable("BaseEntities_LadingItem");
                });

            modelBuilder.Entity("lena.Domains.LadingItemDetail", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<int>("CargoItemDetailId")
                        .HasColumnType("int");

                    b.Property<int>("LadingItemId")
                        .HasColumnType("int");

                    b.Property<double>("Qty")
                        .HasColumnType("float");

                    b.HasIndex("CargoItemDetailId");

                    b.HasIndex("LadingItemId");

                    b.ToTable("BaseEntities_LadingItemDetail");
                });

            modelBuilder.Entity("lena.Domains.ManualTransaction", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<int?>("BillOfMaterialVersion")
                        .HasColumnType("int");

                    b.Property<int?>("ProviderId")
                        .HasColumnType("int");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.Property<int>("QtyPerBox")
                        .HasColumnType("int");

                    b.Property<int?>("StuffId")
                        .HasColumnType("int");

                    b.Property<byte?>("UnitId")
                        .HasColumnType("tinyint");

                    b.Property<short?>("WarehouseId")
                        .HasColumnType("smallint");

                    b.HasIndex("ProviderId");

                    b.HasIndex("StuffId");

                    b.HasIndex("UnitId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("BaseEntities_ManualTransaction");
                });

            modelBuilder.Entity("lena.Domains.NewShoppingDetail", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<int?>("LadingItemDetailId")
                        .HasColumnType("int");

                    b.Property<int>("NewShoppingId")
                        .HasColumnType("int");

                    b.Property<double>("Qty")
                        .HasColumnType("float");

                    b.Property<byte>("UnitId")
                        .HasColumnType("tinyint");

                    b.HasIndex("LadingItemDetailId");

                    b.HasIndex("NewShoppingId");

                    b.HasIndex("UnitId");

                    b.ToTable("BaseEntities_NewShoppingDetail");
                });

            modelBuilder.Entity("lena.Domains.OrderItem", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<short?>("BillOfMaterialVersion")
                        .HasColumnType("smallint");

                    b.Property<double>("CanceledQty")
                        .HasColumnType("float");

                    b.Property<bool?>("CheckOrderItemConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CheckOrderItemDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("smalldatetime");

                    b.Property<bool>("HasChange")
                        .HasColumnType("bit");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<byte>("OrderItemChangeStatus")
                        .HasColumnType("tinyint");

                    b.Property<bool?>("OrderItemConfirmationConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("OrderItemConfirmationDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<bool?>("OrderItemHasActivated")
                        .HasColumnType("bit");

                    b.Property<int?>("ProductPackBillOfMaterialStuffId")
                        .HasColumnType("int");

                    b.Property<short?>("ProductPackBillOfMaterialVersion")
                        .HasColumnType("smallint");

                    b.Property<double>("Qty")
                        .HasColumnType("float");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StuffId")
                        .HasColumnType("int");

                    b.Property<byte>("UnitId")
                        .HasColumnType("tinyint");

                    b.HasIndex("OrderId");

                    b.HasIndex("StuffId");

                    b.HasIndex("UnitId");

                    b.HasIndex("BillOfMaterialVersion", "StuffId");

                    b.HasIndex("ProductPackBillOfMaterialVersion", "ProductPackBillOfMaterialStuffId");

                    b.ToTable("BaseEntities_OrderItem");
                });

            modelBuilder.Entity("lena.Domains.OrderItemChangeConfirmation", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<bool>("Confirmed")
                        .HasColumnType("bit");

                    b.Property<int>("OrderItemChangeRequestId")
                        .HasColumnType("int");

                    b.HasIndex("OrderItemChangeRequestId");

                    b.ToTable("BaseEntities_OrderItemChangeConfirmation");
                });

            modelBuilder.Entity("lena.Domains.OrderItemChangeRequest", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("smalldatetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte>("OrderItemChangeStatus")
                        .HasColumnType("tinyint");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<double>("Qty")
                        .HasColumnType("float");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("smalldatetime");

                    b.Property<byte>("UnitId")
                        .HasColumnType("tinyint");

                    b.HasIndex("OrderItemId");

                    b.HasIndex("UnitId");

                    b.ToTable("BaseEntities_OrderItemChangeRequest");
                });

            modelBuilder.Entity("lena.Domains.OrderItemConfirmation", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<bool>("Confirmed")
                        .HasColumnType("bit");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.HasIndex("OrderItemId");

                    b.ToTable("BaseEntities_OrderItemConfirmation");
                });

            modelBuilder.Entity("lena.Domains.PartitionStuffSerial", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<int>("BoxCount")
                        .HasColumnType("int");

                    b.Property<long>("MainStuffSerialCode")
                        .HasColumnType("bigint");

                    b.Property<int>("MainStuffSerialStuffId")
                        .HasColumnType("int");

                    b.Property<double>("Qty")
                        .HasColumnType("float");

                    b.Property<double>("QtyPerBox")
                        .HasColumnType("float");

                    b.Property<byte>("UnitId")
                        .HasColumnType("tinyint");

                    b.Property<short>("WarehouseId")
                        .HasColumnType("smallint");

                    b.HasIndex("UnitId");

                    b.HasIndex("WarehouseId");

                    b.HasIndex("MainStuffSerialCode", "MainStuffSerialStuffId");

                    b.ToTable("BaseEntities_PartitionStuffSerial");
                });

            modelBuilder.Entity("lena.Domains.PaymentDueDate", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.HasIndex("OrderId");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("BaseEntities_PaymentDueDate");
                });

            modelBuilder.Entity("lena.Domains.PreparingSending", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<double>("Qty")
                        .HasColumnType("float");

                    b.Property<int>("SendPermissionId")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<byte>("UnitId")
                        .HasColumnType("tinyint");

                    b.HasIndex("SendPermissionId");

                    b.HasIndex("UnitId");

                    b.ToTable("BaseEntities_PreparingSending");
                });

            modelBuilder.Entity("lena.Domains.PreparingSendingItem", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<int>("PreparingSendingId")
                        .HasColumnType("int");

                    b.Property<double>("Qty")
                        .HasColumnType("float");

                    b.Property<int>("StuffId")
                        .HasColumnType("int");

                    b.Property<long>("StuffSerialCode")
                        .HasColumnType("bigint");

                    b.Property<byte>("UnitId")
                        .HasColumnType("tinyint");

                    b.HasIndex("PreparingSendingId");

                    b.HasIndex("StuffId");

                    b.HasIndex("UnitId");

                    b.HasIndex("StuffSerialCode", "StuffId");

                    b.ToTable("BaseEntities_PreparingSendingItem");
                });

            modelBuilder.Entity("lena.Domains.ProductionMaterialRequest", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<int?>("ProductionOrderId")
                        .HasColumnType("int");

                    b.HasIndex("ProductionOrderId");

                    b.ToTable("BaseEntities_ProductionMaterialRequest");
                });

            modelBuilder.Entity("lena.Domains.ProductionOrder", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<int?>("CalendarEventId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductionScheduleId")
                        .HasColumnType("int");

                    b.Property<double>("Qty")
                        .HasColumnType("float");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int>("SupervisorEmployeeId")
                        .HasColumnType("int");

                    b.Property<double>("ToleranceQty")
                        .HasColumnType("float");

                    b.Property<byte>("UnitId")
                        .HasColumnType("tinyint");

                    b.Property<int>("WorkPlanStepId")
                        .HasColumnType("int");

                    b.HasIndex("CalendarEventId")
                        .IsUnique()
                        .HasFilter("[CalendarEventId] IS NOT NULL");

                    b.HasIndex("ProductionScheduleId");

                    b.HasIndex("SupervisorEmployeeId");

                    b.HasIndex("UnitId");

                    b.HasIndex("WorkPlanStepId");

                    b.ToTable("BaseEntities_ProductionOrder");
                });

            modelBuilder.Entity("lena.Domains.ProductionPlan", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<int>("BillOfMaterialStuffId")
                        .HasColumnType("int");

                    b.Property<short>("BillOfMaterialVersion")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("EstimatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<bool>("IsTemporary")
                        .HasColumnType("bit");

                    b.Property<int?>("ProductionRequestId")
                        .HasColumnType("int");

                    b.Property<double>("Qty")
                        .HasColumnType("float");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<byte>("UnitId")
                        .HasColumnType("tinyint");

                    b.HasIndex("ProductionRequestId");

                    b.HasIndex("UnitId");

                    b.HasIndex("BillOfMaterialVersion", "BillOfMaterialStuffId");

                    b.ToTable("BaseEntities_ProductionPlan");
                });

            modelBuilder.Entity("lena.Domains.ProductionPlanDetail", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<int>("BillOfMaterialStuffId")
                        .HasColumnType("int");

                    b.Property<short>("BillOfMaterialVersion")
                        .HasColumnType("smallint");

                    b.Property<int>("ProductionPlanDetailLevelId")
                        .HasColumnType("int");

                    b.Property<int>("ProductionPlanId")
                        .HasColumnType("int");

                    b.Property<double>("Qty")
                        .HasColumnType("float");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<byte>("UnitId")
                        .HasColumnType("tinyint");

                    b.HasIndex("ProductionPlanDetailLevelId");

                    b.HasIndex("ProductionPlanId");

                    b.HasIndex("UnitId");

                    b.HasIndex("BillOfMaterialVersion", "BillOfMaterialStuffId");

                    b.ToTable("BaseEntities_ProductionPlanDetail");
                });

            modelBuilder.Entity("lena.Domains.ProductionRequest", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<int>("CheckOrderItemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DeadlineDate")
                        .HasColumnType("smalldatetime");

                    b.Property<double>("Qty")
                        .HasColumnType("float");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<byte>("UnitId")
                        .HasColumnType("tinyint");

                    b.HasIndex("CheckOrderItemId");

                    b.HasIndex("UnitId");

                    b.ToTable("BaseEntities_ProductionRequest");
                });

            modelBuilder.Entity("lena.Domains.ProductionSchedule", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<bool>("ApplySwitchTime")
                        .HasColumnType("bit");

                    b.Property<int>("CalendarEventId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<int>("OperatorCount")
                        .HasColumnType("int");

                    b.Property<bool>("PlanningWithoutMachineLimit")
                        .HasColumnType("bit");

                    b.Property<int>("ProductionPlanDetailId")
                        .HasColumnType("int");

                    b.Property<double>("Qty")
                        .HasColumnType("float");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int>("SwitchTime")
                        .HasColumnType("int");

                    b.Property<int>("WorkPlanStepId")
                        .HasColumnType("int");

                    b.HasIndex("CalendarEventId")
                        .IsUnique()
                        .HasFilter("[CalendarEventId] IS NOT NULL");

                    b.HasIndex("ProductionPlanDetailId");

                    b.HasIndex("WorkPlanStepId");

                    b.ToTable("BaseEntities_ProductionSchedule");
                });

            modelBuilder.Entity("lena.Domains.PurchaseOrder", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<byte?>("CurrencyId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int?>("LatestRiskId")
                        .HasColumnType("int");

                    b.Property<string>("OrderInvoiceNum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("ProviderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PurchaseOrderDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int?>("PurchaseOrderGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PurchaseOrderPreparingDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int?>("PurchaseOrderStepDetailId")
                        .HasColumnType("int");

                    b.Property<byte>("PurchaseOrderType")
                        .HasColumnType("tinyint");

                    b.Property<double>("Qty")
                        .HasColumnType("float");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<int>("StuffId")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<byte>("UnitId")
                        .HasColumnType("tinyint");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("LatestRiskId")
                        .IsUnique()
                        .HasFilter("[LatestRiskId] IS NOT NULL");

                    b.HasIndex("ProviderId");

                    b.HasIndex("PurchaseOrderGroupId");

                    b.HasIndex("PurchaseOrderStepDetailId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UnitId");

                    b.HasIndex("StuffId", "ProviderId");

                    b.ToTable("BaseEntities_PurchaseOrder");
                });

            modelBuilder.Entity("lena.Domains.PurchaseOrderDetail", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("PurchaseRequestId")
                        .HasColumnType("int");

                    b.Property<double>("Qty")
                        .HasColumnType("float");

                    b.Property<byte>("UnitId")
                        .HasColumnType("tinyint");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("PurchaseRequestId");

                    b.HasIndex("UnitId");

                    b.ToTable("BaseEntities_PurchaseOrderDetail");
                });

            modelBuilder.Entity("lena.Domains.PurchaseOrderGroup", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.ToTable("BaseEntities_PurchaseOrderGroup");
                });

            modelBuilder.Entity("lena.Domains.PurchaseRequest", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<int>("CostCenterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<short?>("DepartmentId")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("EmployeeRequesterId")
                        .HasColumnType("int");

                    b.Property<bool>("Essential")
                        .HasColumnType("bit");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int?>("LatestRiskId")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldPlanCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlanCodeId")
                        .HasColumnType("int");

                    b.Property<string>("ProjectCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PurchaseRequestStepDetailId")
                        .HasColumnType("int");

                    b.Property<double>("Qty")
                        .HasColumnType("float");

                    b.Property<double>("RequestQty")
                        .HasColumnType("float");

                    b.Property<int?>("ResponsibleEmployeeId")
                        .HasColumnType("int");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<int>("StuffId")
                        .HasColumnType("int");

                    b.Property<byte?>("SupplyType")
                        .HasColumnType("tinyint");

                    b.Property<byte>("UnitId")
                        .HasColumnType("tinyint");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeRequesterId");

                    b.HasIndex("LatestRiskId")
                        .IsUnique()
                        .HasFilter("[LatestRiskId] IS NOT NULL");

                    b.HasIndex("PlanCodeId");

                    b.HasIndex("PurchaseRequestStepDetailId");

                    b.HasIndex("ResponsibleEmployeeId");

                    b.HasIndex("StuffId");

                    b.HasIndex("UnitId");

                    b.ToTable("BaseEntities_PurchaseRequest");
                });

            modelBuilder.Entity("lena.Domains.PurchaseStep", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<int>("CargoItemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FollowUpDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("HowToBuyDetailId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCurrentStep")
                        .HasColumnType("bit");

                    b.HasIndex("CargoItemId");

                    b.HasIndex("HowToBuyDetailId");

                    b.ToTable("BaseEntities_PurchaseStep");
                });

            modelBuilder.Entity("lena.Domains.QtyCorrectionRequest", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<double>("Qty")
                        .HasColumnType("float");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int?>("StockCheckingTagId")
                        .HasColumnType("int");

                    b.Property<int>("StuffId")
                        .HasColumnType("int");

                    b.Property<long?>("StuffSerialCode")
                        .HasColumnType("bigint");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<byte>("UnitId")
                        .HasColumnType("tinyint");

                    b.Property<short>("WarehouseId")
                        .HasColumnType("smallint");

                    b.HasIndex("StockCheckingTagId");

                    b.HasIndex("StuffId");

                    b.HasIndex("UnitId");

                    b.HasIndex("WarehouseId");

                    b.HasIndex("StuffSerialCode", "StuffId");

                    b.ToTable("BaseEntities_QtyCorrectionRequest");
                });

            modelBuilder.Entity("lena.Domains.QualityControl", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<DateTime?>("ConfirmationDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int?>("ConfirmationUserId")
                        .HasColumnType("int");

                    b.Property<short>("DepartmentId")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<double>("Qty")
                        .HasColumnType("float");

                    b.Property<byte?>("QualityControlPaymentSuggestStatus")
                        .HasColumnType("tinyint");

                    b.Property<byte>("QualityControlType")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int>("StuffId")
                        .HasColumnType("int");

                    b.Property<byte>("UnitId")
                        .HasColumnType("tinyint");

                    b.Property<short>("WarehouseId")
                        .HasColumnType("smallint");

                    b.HasIndex("ConfirmationUserId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("StuffId");

                    b.HasIndex("UnitId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("BaseEntities_QualityControl");
                });

            modelBuilder.Entity("lena.Domains.QualityControlConfirmation", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<bool?>("IsEmergency")
                        .HasColumnType("bit");

                    b.Property<int>("QualityControlId")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasIndex("QualityControlId")
                        .IsUnique()
                        .HasFilter("[QualityControlId] IS NOT NULL");

                    b.ToTable("BaseEntities_QualityControlConfirmation");
                });

            modelBuilder.Entity("lena.Domains.QualityControlConfirmationItem", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<double>("ConsumeQty")
                        .HasColumnType("float");

                    b.Property<int>("QualityControlConfirmationId")
                        .HasColumnType("int");

                    b.Property<int>("QualityControlItemId")
                        .HasColumnType("int");

                    b.Property<double>("RemainedQty")
                        .HasColumnType("float");

                    b.Property<double>("TestQty")
                        .HasColumnType("float");

                    b.Property<byte>("UnitId")
                        .HasColumnType("tinyint");

                    b.HasIndex("QualityControlConfirmationId");

                    b.HasIndex("QualityControlItemId")
                        .IsUnique()
                        .HasFilter("[QualityControlItemId] IS NOT NULL");

                    b.HasIndex("UnitId");

                    b.ToTable("BaseEntities_QualityControlConfirmationItem");
                });

            modelBuilder.Entity("lena.Domains.QualityControlItem", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<double>("Qty")
                        .HasColumnType("float");

                    b.Property<int>("QualityControlId")
                        .HasColumnType("int");

                    b.Property<int?>("ReturnOfSaleId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("StuffId")
                        .HasColumnType("int");

                    b.Property<long?>("StuffSerialCode")
                        .HasColumnType("bigint");

                    b.Property<byte>("UnitId")
                        .HasColumnType("tinyint");

                    b.HasIndex("QualityControlId");

                    b.HasIndex("ReturnOfSaleId");

                    b.HasIndex("StuffId");

                    b.HasIndex("UnitId");

                    b.HasIndex("StuffSerialCode", "StuffId");

                    b.ToTable("BaseEntities_QualityControlItem");
                });

            modelBuilder.Entity("lena.Domains.Receipt", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<int>("CooperatorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReceiptDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<byte>("ReceiptType")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasIndex("CooperatorId");

                    b.ToTable("BaseEntities_Receipt");
                });

            modelBuilder.Entity("lena.Domains.RepairProductionFault", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<int>("ProductionFaultTypeId")
                        .HasColumnType("int");

                    b.Property<int>("RepairProductionId")
                        .HasColumnType("int");

                    b.HasIndex("ProductionFaultTypeId");

                    b.HasIndex("RepairProductionId");

                    b.ToTable("BaseEntities_RepairProductionFault");
                });

            modelBuilder.Entity("lena.Domains.ResponseConditionalQualityControl", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<int>("ConditionalQualityControlId")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasIndex("ConditionalQualityControlId")
                        .IsUnique()
                        .HasFilter("[ConditionalQualityControlId] IS NOT NULL");

                    b.ToTable("BaseEntities_ResponseConditionalQualityControl");
                });

            modelBuilder.Entity("lena.Domains.ResponseStuffRequestItem", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<short?>("BillOfMaterialVersion")
                        .HasColumnType("smallint");

                    b.Property<double>("Qty")
                        .HasColumnType("float");

                    b.Property<int?>("RequestWarehouseIssueId")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int?>("StuffId")
                        .HasColumnType("int");

                    b.Property<int>("StuffRequestItemId")
                        .HasColumnType("int");

                    b.HasIndex("RequestWarehouseIssueId");

                    b.HasIndex("StuffId");

                    b.HasIndex("StuffRequestItemId");

                    b.HasIndex("BillOfMaterialVersion", "StuffId");

                    b.ToTable("BaseEntities_ResponseStuffRequestItem");
                });

            modelBuilder.Entity("lena.Domains.ResponseWarehouseIssue", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<int>("WarehouseIssueId")
                        .HasColumnType("int");

                    b.HasIndex("WarehouseIssueId")
                        .IsUnique()
                        .HasFilter("[WarehouseIssueId] IS NOT NULL");

                    b.ToTable("BaseEntities_ResponseWarehouseIssue");
                });

            modelBuilder.Entity("lena.Domains.ReturnOfSale", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<string>("ExitReceiptCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MainStuffId")
                        .HasColumnType("int");

                    b.Property<double>("Qty")
                        .HasColumnType("float");

                    b.Property<int>("ReturnStoreReceiptId")
                        .HasColumnType("int");

                    b.Property<int?>("SendProductId")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int>("StuffId")
                        .HasColumnType("int");

                    b.Property<long?>("StuffSerialCode")
                        .HasColumnType("bigint");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<byte>("UnitId")
                        .HasColumnType("tinyint");

                    b.HasIndex("ReturnStoreReceiptId");

                    b.HasIndex("SendProductId");

                    b.HasIndex("StuffId");

                    b.HasIndex("UnitId");

                    b.HasIndex("StuffSerialCode", "StuffId");

                    b.ToTable("BaseEntities_ReturnOfSale");
                });

            modelBuilder.Entity("lena.Domains.SendPermission", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<DateTime?>("ConfirmDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ConfirmDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ConfirmerUserId")
                        .HasColumnType("int");

                    b.Property<int>("ExitReceiptRequestId")
                        .HasColumnType("int");

                    b.Property<double>("Qty")
                        .HasColumnType("float");

                    b.Property<short>("SendPermissionStatusType")
                        .HasColumnType("smallint");

                    b.Property<byte>("UnitId")
                        .HasColumnType("tinyint");

                    b.HasIndex("ConfirmerUserId");

                    b.HasIndex("ExitReceiptRequestId");

                    b.HasIndex("UnitId");

                    b.ToTable("BaseEntities_SendPermission");
                });

            modelBuilder.Entity("lena.Domains.SendProduct", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<int>("ExitReceiptId")
                        .HasColumnType("int");

                    b.Property<int>("PreparingSendingId")
                        .HasColumnType("int");

                    b.HasIndex("ExitReceiptId");

                    b.HasIndex("PreparingSendingId")
                        .IsUnique()
                        .HasFilter("[PreparingSendingId] IS NOT NULL");

                    b.ToTable("BaseEntities_SendProduct");
                });

            modelBuilder.Entity("lena.Domains.StockAdjustment", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("StockCheckingTagId")
                        .HasColumnType("int");

                    b.Property<byte>("UnitId")
                        .HasColumnType("tinyint");

                    b.HasIndex("StockCheckingTagId");

                    b.HasIndex("UnitId");

                    b.ToTable("BaseEntities_StockAdjustment");
                });

            modelBuilder.Entity("lena.Domains.StoreReceipt", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<short?>("BillOfMaterialVersion")
                        .HasColumnType("smallint");

                    b.Property<int>("CooperatorId")
                        .HasColumnType("int");

                    b.Property<int?>("CurrentPurchasePriceId")
                        .HasColumnType("int");

                    b.Property<int>("InboundCargoId")
                        .HasColumnType("int");

                    b.Property<int?>("ReceiptId")
                        .HasColumnType("int");

                    b.Property<byte>("StoreReceiptType")
                        .HasColumnType("tinyint");

                    b.Property<int>("StuffId")
                        .HasColumnType("int");

                    b.Property<bool>("StuffNeedToQualityControl")
                        .HasColumnType("bit");

                    b.Property<byte>("UnitId")
                        .HasColumnType("tinyint");

                    b.Property<short>("WarehouseId")
                        .HasColumnType("smallint");

                    b.HasIndex("CooperatorId");

                    b.HasIndex("CurrentPurchasePriceId")
                        .IsUnique()
                        .HasFilter("[CurrentPurchasePriceId] IS NOT NULL");

                    b.HasIndex("InboundCargoId");

                    b.HasIndex("ReceiptId");

                    b.HasIndex("StuffId");

                    b.HasIndex("UnitId");

                    b.HasIndex("WarehouseId");

                    b.HasIndex("BillOfMaterialVersion", "StuffId");

                    b.ToTable("BaseEntities_StoreReceipt");
                });

            modelBuilder.Entity("lena.Domains.StuffPrice", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<DateTime?>("ConfirmDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int?>("ConfirmUserId")
                        .HasColumnType("int");

                    b.Property<byte>("CurrencyId")
                        .HasColumnType("tinyint");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<int>("StuffId")
                        .HasColumnType("int");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.HasIndex("ConfirmUserId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("StuffId");

                    b.ToTable("BaseEntities_StuffPrice");
                });

            modelBuilder.Entity("lena.Domains.StuffRequest", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<short>("FromWarehouseId")
                        .HasColumnType("smallint");

                    b.Property<int?>("ProductionMaterialRequestId")
                        .HasColumnType("int");

                    b.Property<int?>("ScrumEntityId")
                        .HasColumnType("int");

                    b.Property<byte>("StuffRequestType")
                        .HasColumnType("tinyint");

                    b.Property<short?>("ToDepartmentId")
                        .HasColumnType("smallint");

                    b.Property<int?>("ToEmployeeId")
                        .HasColumnType("int");

                    b.Property<short?>("ToWarehouseId")
                        .HasColumnType("smallint");

                    b.HasIndex("FromWarehouseId");

                    b.HasIndex("ProductionMaterialRequestId");

                    b.HasIndex("ScrumEntityId");

                    b.HasIndex("ToDepartmentId");

                    b.HasIndex("ToEmployeeId");

                    b.HasIndex("ToWarehouseId");

                    b.ToTable("BaseEntities_StuffRequest");
                });

            modelBuilder.Entity("lena.Domains.StuffRequestItem", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<short?>("BillOfMaterialVersion")
                        .HasColumnType("smallint");

                    b.Property<double>("Qty")
                        .HasColumnType("float");

                    b.Property<double>("ResponsedQty")
                        .HasColumnType("float");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int?>("StuffId")
                        .HasColumnType("int");

                    b.Property<int>("StuffRequestId")
                        .HasColumnType("int");

                    b.Property<byte>("UnitId")
                        .HasColumnType("tinyint");

                    b.HasIndex("StuffId");

                    b.HasIndex("StuffRequestId");

                    b.HasIndex("UnitId");

                    b.HasIndex("BillOfMaterialVersion", "StuffId");

                    b.ToTable("BaseEntities_StuffRequestItem");
                });

            modelBuilder.Entity("lena.Domains.StuffRequestMilestone", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("smalldatetime");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.ToTable("BaseEntities_StuffRequestMilestone");
                });

            modelBuilder.Entity("lena.Domains.StuffRequestMilestoneDetail", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<double>("Qty")
                        .HasColumnType("float");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int>("StuffId")
                        .HasColumnType("int");

                    b.Property<int>("StuffRequestMilestoneId")
                        .HasColumnType("int");

                    b.Property<byte>("UnitId")
                        .HasColumnType("tinyint");

                    b.HasIndex("StuffId");

                    b.HasIndex("StuffRequestMilestoneId");

                    b.HasIndex("UnitId");

                    b.ToTable("BaseEntities_StuffRequestMilestoneDetail");
                });

            modelBuilder.Entity("lena.Domains.Transport", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<string>("CarInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OutputTransportId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingCompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("TransportDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("TransportDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("TransportType")
                        .HasColumnType("tinyint");

                    b.HasIndex("OutputTransportId")
                        .IsUnique()
                        .HasFilter("[OutputTransportId] IS NOT NULL");

                    b.ToTable("BaseEntities_Transport");
                });

            modelBuilder.Entity("lena.Domains.WarehouseIssue", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<short>("FromWarehouseId")
                        .HasColumnType("smallint");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<short?>("ToDepartmentId")
                        .HasColumnType("smallint");

                    b.Property<int?>("ToEmployeeId")
                        .HasColumnType("int");

                    b.Property<short?>("ToWarehouseId")
                        .HasColumnType("smallint");

                    b.HasIndex("FromWarehouseId");

                    b.HasIndex("ToDepartmentId");

                    b.HasIndex("ToEmployeeId");

                    b.HasIndex("ToWarehouseId");

                    b.ToTable("BaseEntities_WarehouseIssue");
                });

            modelBuilder.Entity("lena.Domains.WarehouseIssueItem", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntity");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("AssetCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("BillOfMaterialVersion")
                        .HasColumnType("smallint");

                    b.Property<int>("StuffId")
                        .HasColumnType("int");

                    b.Property<long?>("StuffSerialCode")
                        .HasColumnType("bigint");

                    b.Property<byte>("TransactionLevel")
                        .HasColumnType("tinyint");

                    b.Property<byte>("UnitId")
                        .HasColumnType("tinyint");

                    b.Property<int>("WarehouseIssueId")
                        .HasColumnType("int");

                    b.HasIndex("StuffId");

                    b.HasIndex("UnitId");

                    b.HasIndex("WarehouseIssueId");

                    b.HasIndex("BillOfMaterialVersion", "StuffId");

                    b.HasIndex("StuffSerialCode", "StuffId");

                    b.ToTable("BaseEntities_WarehouseIssueItem");
                });

            modelBuilder.Entity("lena.Domains.ReturnOfSaleStatusLog", b =>
                {
                    b.HasBaseType("lena.Domains.BaseEntityLog");

                    b.Property<int>("ReturnOfSaleId")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasIndex("ReturnOfSaleId");

                    b.ToTable("BaseEntityLogs_ReturnOfSaleStatusLog");
                });

            modelBuilder.Entity("lena.Domains.CooperatorFinancialAccount", b =>
                {
                    b.HasBaseType("lena.Domains.FinancialAccount");

                    b.Property<int>("CooperatorId")
                        .HasColumnType("int");

                    b.HasIndex("CooperatorId");

                    b.ToTable("FinancialAccounts_CooperatorFinancialAccount");
                });

            modelBuilder.Entity("lena.Domains.PostMessageSend", b =>
                {
                    b.HasBaseType("lena.Domains.MessageSend");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasIndex("PostId");

                    b.ToTable("MessageSends_PostMessageSend");
                });

            modelBuilder.Entity("lena.Domains.UserMessageSend", b =>
                {
                    b.HasBaseType("lena.Domains.MessageSend");

                    b.ToTable("MessageSends_UserMessageSend");
                });

            modelBuilder.Entity("lena.Domains.RepairProductionStuffDetail", b =>
                {
                    b.HasBaseType("lena.Domains.ProductionStuffDetail");

                    b.Property<int>("RepairProductionFaultId")
                        .HasColumnType("int");

                    b.HasIndex("RepairProductionFaultId");

                    b.ToTable("ProductionStuffDetails_RepairProductionStuffDetail");
                });

            modelBuilder.Entity("lena.Domains.ScrumBackLog", b =>
                {
                    b.HasBaseType("lena.Domains.ScrumEntity");

                    b.Property<int>("ScrumSprintId")
                        .HasColumnType("int");

                    b.HasIndex("ScrumSprintId");

                    b.ToTable("ScrumEntities_ScrumBackLog");
                });

            modelBuilder.Entity("lena.Domains.ScrumProject", b =>
                {
                    b.HasBaseType("lena.Domains.ScrumEntity");

                    b.Property<int>("ScrumProjectGroupId")
                        .HasColumnType("int");

                    b.HasIndex("ScrumProjectGroupId");

                    b.ToTable("ScrumEntities_ScrumProject");
                });

            modelBuilder.Entity("lena.Domains.ScrumProjectGroup", b =>
                {
                    b.HasBaseType("lena.Domains.ScrumEntity");

                    b.ToTable("ScrumEntities_ScrumProjectGroup");
                });

            modelBuilder.Entity("lena.Domains.ScrumSprint", b =>
                {
                    b.HasBaseType("lena.Domains.ScrumEntity");

                    b.Property<int>("ScrumProjectId")
                        .HasColumnType("int");

                    b.HasIndex("ScrumProjectId");

                    b.ToTable("ScrumEntities_ScrumSprint");
                });

            modelBuilder.Entity("lena.Domains.ScrumTask", b =>
                {
                    b.HasBaseType("lena.Domains.ScrumEntity");

                    b.Property<long>("RemainedTime")
                        .HasColumnType("bigint");

                    b.Property<int>("ScrumBackLogId")
                        .HasColumnType("int");

                    b.Property<byte>("ScrumTaskStep")
                        .HasColumnType("tinyint");

                    b.Property<int>("ScrumTaskTypeId")
                        .HasColumnType("int");

                    b.Property<long>("SpentTime")
                        .HasColumnType("bigint");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasIndex("ScrumBackLogId");

                    b.HasIndex("ScrumTaskTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("ScrumEntities_ScrumTask");
                });

            modelBuilder.Entity("lena.Domains.ProductionSerialProfile", b =>
                {
                    b.HasBaseType("lena.Domains.SerialProfile");

                    b.ToTable("SerialProfiles_ProductionSerialProfile");
                });

            modelBuilder.Entity("lena.Domains.StoreReceiptSerialProfile", b =>
                {
                    b.HasBaseType("lena.Domains.SerialProfile");

                    b.Property<int>("StoreReceiptId")
                        .HasColumnType("int");

                    b.HasIndex("StoreReceiptId")
                        .IsUnique()
                        .HasFilter("[StoreReceiptId] IS NOT NULL");

                    b.ToTable("SerialProfiles_StoreReceiptSerialProfile");
                });

            modelBuilder.Entity("lena.Domains.MachineType", b =>
                {
                    b.HasBaseType("lena.Domains.WorkStationPart");

                    b.ToTable("WorkStationParts_MachineType");
                });

            modelBuilder.Entity("lena.Domains.OperatorType", b =>
                {
                    b.HasBaseType("lena.Domains.WorkStationPart");

                    b.ToTable("WorkStationParts_OperatorType");
                });

            modelBuilder.Entity("lena.Domains.GiveBackExitReceiptRequest", b =>
                {
                    b.HasBaseType("lena.Domains.ExitReceiptRequest");

                    b.Property<int>("QualityControlId")
                        .HasColumnType("int");

                    b.HasIndex("QualityControlId");

                    b.ToTable("BaseEntities_GiveBackExitReceiptRequest");
                });

            modelBuilder.Entity("lena.Domains.OrderItemBlock", b =>
                {
                    b.HasBaseType("lena.Domains.ExitReceiptRequest");

                    b.Property<byte>("OrderItemBlockType")
                        .HasColumnType("tinyint");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.HasIndex("OrderItemId");

                    b.ToTable("BaseEntities_OrderItemBlock");
                });

            modelBuilder.Entity("lena.Domains.ReturnedExitReceiptRequest", b =>
                {
                    b.HasBaseType("lena.Domains.ExitReceiptRequest");

                    b.Property<int>("ReturnStoreReceiptId")
                        .HasColumnType("int");

                    b.HasIndex("ReturnStoreReceiptId");

                    b.ToTable("BaseEntities_ReturnedExitReceiptRequest");
                });

            modelBuilder.Entity("lena.Domains.CustomQualityControl", b =>
                {
                    b.HasBaseType("lena.Domains.QualityControl");

                    b.ToTable("BaseEntities_CustomQualityControl");
                });

            modelBuilder.Entity("lena.Domains.ProductionQualityControl", b =>
                {
                    b.HasBaseType("lena.Domains.QualityControl");

                    b.ToTable("BaseEntities_ProductionQualityControl");
                });

            modelBuilder.Entity("lena.Domains.ReceiptQualityControl", b =>
                {
                    b.HasBaseType("lena.Domains.QualityControl");

                    b.Property<int>("StoreReceiptId")
                        .HasColumnType("int");

                    b.HasIndex("StoreReceiptId");

                    b.ToTable("BaseEntities_ReceiptQualityControl");
                });

            modelBuilder.Entity("lena.Domains.NewShopping", b =>
                {
                    b.HasBaseType("lena.Domains.StoreReceipt");

                    b.Property<int>("BoxNo")
                        .HasColumnType("int");

                    b.Property<int?>("LadingItemId")
                        .HasColumnType("int");

                    b.Property<double>("QtyPerBox")
                        .HasColumnType("float");

                    b.HasIndex("LadingItemId");

                    b.ToTable("BaseEntities_NewShopping");
                });

            modelBuilder.Entity("lena.Domains.ReturnStoreReceipt", b =>
                {
                    b.HasBaseType("lena.Domains.StoreReceipt");

                    b.ToTable("BaseEntities_ReturnStoreReceipt");
                });

            modelBuilder.Entity("lena.Domains.EstimatedPurchasePrice", b =>
                {
                    b.HasBaseType("lena.Domains.StuffPrice");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("BaseEntities_EstimatedPurchasePrice");
                });

            modelBuilder.Entity("lena.Domains.PurchasePrice", b =>
                {
                    b.HasBaseType("lena.Domains.StuffPrice");

                    b.Property<double>("CurrencyRate")
                        .HasColumnType("float");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<double>("DutyCost")
                        .HasColumnType("float");

                    b.Property<double>("OtherCost")
                        .HasColumnType("float");

                    b.Property<double>("RialPrice")
                        .HasColumnType("float");

                    b.Property<int>("StoreReceiptId")
                        .HasColumnType("int");

                    b.Property<double>("TransferCost")
                        .HasColumnType("float");

                    b.HasIndex("StoreReceiptId");

                    b.ToTable("BaseEntities_PurchasePrice");
                });

            modelBuilder.Entity("lena.Domains.StuffBasePrice", b =>
                {
                    b.HasBaseType("lena.Domains.StuffPrice");

                    b.Property<double>("MainPrice")
                        .HasColumnType("float");

                    b.Property<int?>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<byte>("StuffBasePriceType")
                        .HasColumnType("tinyint");

                    b.HasIndex("PurchaseOrderId")
                        .IsUnique()
                        .HasFilter("[PurchaseOrderId] IS NOT NULL");

                    b.ToTable("BaseEntities_StuffBasePrice");
                });

            modelBuilder.Entity("lena.Domains.InboundCargo", b =>
                {
                    b.HasBaseType("lena.Domains.Transport");

                    b.Property<short>("BoxCount")
                        .HasColumnType("smallint");

                    b.ToTable("BaseEntities_InboundCargo");
                });

            modelBuilder.Entity("lena.Domains.OutboundCargo", b =>
                {
                    b.HasBaseType("lena.Domains.Transport");

                    b.ToTable("BaseEntities_OutboundCargo");
                });

            modelBuilder.Entity("lena.Domains.RequestWarehouseIssue", b =>
                {
                    b.HasBaseType("lena.Domains.WarehouseIssue");

                    b.ToTable("BaseEntities_RequestWarehouseIssue");
                });

            modelBuilder.Entity("lena.Domains.ProjectWork", b =>
                {
                    b.HasBaseType("lena.Domains.ScrumBackLog");

                    b.ToTable("ScrumEntities_ProjectWork");
                });

            modelBuilder.Entity("lena.Domains.Project", b =>
                {
                    b.HasBaseType("lena.Domains.ScrumProject");

                    b.ToTable("ScrumEntities_Project");
                });

            modelBuilder.Entity("lena.Domains.ProjectHeader", b =>
                {
                    b.HasBaseType("lena.Domains.ScrumProjectGroup");

                    b.Property<int>("OwnerCustomerId")
                        .HasColumnType("int");

                    b.HasIndex("OwnerCustomerId");

                    b.ToTable("ScrumEntities_ProjectHeader");
                });

            modelBuilder.Entity("lena.Domains.ProjectStep", b =>
                {
                    b.HasBaseType("lena.Domains.ScrumSprint");

                    b.ToTable("ScrumEntities_ProjectStep");
                });

            modelBuilder.Entity("lena.Domains.ProjectWorkItem", b =>
                {
                    b.HasBaseType("lena.Domains.ScrumTask");

                    b.ToTable("ScrumEntities_ProjectWorkItem");
                });

            modelBuilder.Entity("lena.Domains.OrderItemProductionBlock", b =>
                {
                    b.HasBaseType("lena.Domains.OrderItemBlock");

                    b.ToTable("BaseEntities_OrderItemProductionBlock");
                });

            modelBuilder.Entity("lena.Domains.OrderItemSaleBlock", b =>
                {
                    b.HasBaseType("lena.Domains.OrderItemBlock");

                    b.Property<int>("CheckOrderItemId")
                        .HasColumnType("int");

                    b.HasIndex("CheckOrderItemId");

                    b.ToTable("BaseEntities_OrderItemSaleBlock");
                });

            modelBuilder.Entity("lena.Domains.ProductRequest", b =>
                {
                    b.HasBaseType("lena.Domains.Project");

                    b.Property<bool>("Response")
                        .HasColumnType("bit");

                    b.ToTable("ScrumEntities_ProductRequest");
                });

            modelBuilder.Entity("lena.Domains.ActionParameter", b =>
                {
                    b.HasOne("lena.Domains.SecurityAction", "SecurityAction")
                        .WithMany("ActionParamaters")
                        .HasForeignKey("SecurityActionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SecurityAction");
                });

            modelBuilder.Entity("lena.Domains.AddLadingItemDetailChange", b =>
                {
                    b.HasOne("lena.Domains.LadingChangeRequest", "LadingChangeRequest")
                        .WithMany("AddLadingItemDetailChanges")
                        .HasForeignKey("LadingChangeRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LadingChangeRequest");
                });

            modelBuilder.Entity("lena.Domains.Allocation", b =>
                {
                    b.HasOne("lena.Domains.BankOrder", "BankOrder")
                        .WithMany("Allocations")
                        .HasForeignKey("BankOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId");

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("Allocations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BankOrder");

                    b.Navigation("Currency");

                    b.Navigation("Document");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.ApplicationLog", b =>
                {
                    b.HasOne("lena.Domains.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.Asset", b =>
                {
                    b.HasOne("lena.Domains.Department", "Department")
                        .WithMany("DepartmentAssets")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Employee", "Employee")
                        .WithMany("EmployeeAssets")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("lena.Domains.Stuff", "Stuff")
                        .WithMany("StuffAssets")
                        .HasForeignKey("StuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("UserAssets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Warehouse", "Warehouse")
                        .WithMany("WarehouseAssets")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.StuffSerial", "StuffSerial")
                        .WithOne("Asset")
                        .HasForeignKey("lena.Domains.Asset", "StuffSerialCode", "StuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Employee");

                    b.Navigation("Stuff");

                    b.Navigation("StuffSerial");

                    b.Navigation("User");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("lena.Domains.AssetLog", b =>
                {
                    b.HasOne("lena.Domains.Asset", "Asset")
                        .WithMany("AssetLogs")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Department", "Department")
                        .WithMany("DepartmentAssetLogs")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Employee", "Employee")
                        .WithMany("EmployeeAssetLogs")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("UserAssetLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("Department");

                    b.Navigation("Employee");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.AssetTransferRequest", b =>
                {
                    b.HasOne("lena.Domains.Asset", "Asset")
                        .WithMany("AssetTransferRequests")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "ConfirmerUser")
                        .WithMany("ConfirmerUserAssetTransfers")
                        .HasForeignKey("ConfirmerUserId");

                    b.HasOne("lena.Domains.Department", "NewDepartment")
                        .WithMany("NewDepartmentAssetTransferRequests")
                        .HasForeignKey("NewDepartmentId");

                    b.HasOne("lena.Domains.Employee", "NewEmployee")
                        .WithMany("NewEmployeeAssetTransferRequests")
                        .HasForeignKey("NewEmployeeId");

                    b.HasOne("lena.Domains.User", "RequestingUser")
                        .WithMany("RequestingUserAssetTransfers")
                        .HasForeignKey("RequestingUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("ConfirmerUser");

                    b.Navigation("NewDepartment");

                    b.Navigation("NewEmployee");

                    b.Navigation("RequestingUser");
                });

            modelBuilder.Entity("lena.Domains.Attachment", b =>
                {
                    b.HasOne("lena.Domains.Message", "Message")
                        .WithMany("Attachments")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("lena.Domains.BankOrderCost", b =>
                {
                    b.HasOne("lena.Domains.BankOrder", "BankOrder")
                        .WithMany("BankOrderCosts")
                        .HasForeignKey("BankOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.FinancialDocumentCost", "FinancialDocumentCost")
                        .WithMany("BankOrderCosts")
                        .HasForeignKey("FinancialDocumentCostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BankOrder");

                    b.Navigation("FinancialDocumentCost");
                });

            modelBuilder.Entity("lena.Domains.BankOrderCurrencySource", b =>
                {
                    b.HasOne("lena.Domains.BankOrder", "BankOrder")
                        .WithMany("BankOrderCurrencySources")
                        .HasForeignKey("BankOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Lading", "Lading")
                        .WithOne("BankOrderCurrencySource")
                        .HasForeignKey("lena.Domains.BankOrderCurrencySource", "LadingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BankOrder");

                    b.Navigation("Lading");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.BankOrderDetail", b =>
                {
                    b.HasOne("lena.Domains.BankOrder", "BankOrder")
                        .WithMany("BankOrderDetails")
                        .HasForeignKey("BankOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.StuffHSGroup", "StuffHSGroup")
                        .WithMany("BankOrderDetails")
                        .HasForeignKey("StuffHSGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Unit", "Unit")
                        .WithMany("BankOrderDetails")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BankOrder");

                    b.Navigation("StuffHSGroup");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("lena.Domains.BankOrderIssue", b =>
                {
                    b.HasOne("lena.Domains.Allocation", "Allocation")
                        .WithMany("BankOrderIssues")
                        .HasForeignKey("AllocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.BankOrderIssueType", "BankOrderIssueType")
                        .WithMany("BankOrderIssues")
                        .HasForeignKey("BankOrderIssueTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.FinancialDocument", "FinancialDocument")
                        .WithMany("BankOrderIssues")
                        .HasForeignKey("FinancialDocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Allocation");

                    b.Navigation("BankOrderIssueType");

                    b.Navigation("FinancialDocument");
                });

            modelBuilder.Entity("lena.Domains.BankOrderLog", b =>
                {
                    b.HasOne("lena.Domains.BankOrder", "BankOrder")
                        .WithMany("BankOrderLogs")
                        .HasForeignKey("BankOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.BankOrder", null)
                        .WithOne("CurrentBankOrderLog")
                        .HasForeignKey("lena.Domains.BankOrderLog", "BankOrderId1");

                    b.HasOne("lena.Domains.BankOrderStatusType", "BankOrderStatusType")
                        .WithMany("BankOrderLogs")
                        .HasForeignKey("BankOrderStatusTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("BankOrderStateLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BankOrder");

                    b.Navigation("BankOrderStatusType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.BaseEntity", b =>
                {
                    b.HasOne("lena.Domains.FinancialTransactionBatch", "FinancialTransactionBatch")
                        .WithOne("BaseEntity")
                        .HasForeignKey("lena.Domains.BaseEntity", "FinancialTransactionBatchId");

                    b.HasOne("lena.Domains.TransactionBatch", "TransactionBatch")
                        .WithOne("BaseEntity")
                        .HasForeignKey("lena.Domains.BaseEntity", "TransactionBatchId");

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("BaseEntities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FinancialTransactionBatch");

                    b.Navigation("TransactionBatch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.BaseEntityConfirmType", b =>
                {
                    b.HasOne("lena.Domains.Department", "Department")
                        .WithMany("BaseEntityConfirmTypes")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("BaseEntityConfirmTypes")
                        .HasForeignKey("UserId");

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.BaseEntityDocument", b =>
                {
                    b.HasOne("lena.Domains.BaseEntityDocumentType", "BaseEntityDocumentType")
                        .WithMany("BaseEntityDocuments")
                        .HasForeignKey("BaseEntityDocumentTypeId");

                    b.HasOne("lena.Domains.BaseEntity", "BaseEntity")
                        .WithMany("BaseEntityDocuments")
                        .HasForeignKey("BaseEntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Cooperator", "Cooperator")
                        .WithMany("BaseEntityDocuments")
                        .HasForeignKey("CooperatorId");

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("BaseEntityDocuments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BaseEntity");

                    b.Navigation("BaseEntityDocumentType");

                    b.Navigation("Cooperator");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.BaseEntityLog", b =>
                {
                    b.HasOne("lena.Domains.BaseEntity", "BaseEntity")
                        .WithMany("BaseEntityLogs")
                        .HasForeignKey("BaseEntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("BaseEntityLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BaseEntity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.BaseTransaction", b =>
                {
                    b.HasOne("lena.Domains.BaseTransaction", "ReferenceTransaction")
                        .WithMany("ReferencedTransactions")
                        .HasForeignKey("ReferenceTransactionId");

                    b.HasOne("lena.Domains.Stuff", "Stuff")
                        .WithMany("BaseTransactions")
                        .HasForeignKey("StuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.TransactionBatch", "TransactionBatch")
                        .WithMany("BaseTransactions")
                        .HasForeignKey("TransactionBatchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.TransactionType", "TransactionType")
                        .WithMany("BaseTransactions")
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Unit", "Unit")
                        .WithMany("BaseTransactions")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.WarehouseFiscalPeriod", "WarehouseFiscalPeriod")
                        .WithMany("BaseTransactions")
                        .HasForeignKey("WarehouseFiscalPeriodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Warehouse", "Warehouse")
                        .WithMany("BaseTransactions")
                        .HasForeignKey("WarehouseId");

                    b.HasOne("lena.Domains.BillOfMaterial", "BillOfMaterial")
                        .WithMany("BaseTransactions")
                        .HasForeignKey("BillOfMaterialVersion", "StuffId");

                    b.HasOne("lena.Domains.StuffSerial", "StuffSerial")
                        .WithMany("BaseTransactions")
                        .HasForeignKey("StuffSerialCode", "StuffId");

                    b.Navigation("BillOfMaterial");

                    b.Navigation("ReferenceTransaction");

                    b.Navigation("Stuff");

                    b.Navigation("StuffSerial");

                    b.Navigation("TransactionBatch");

                    b.Navigation("TransactionType");

                    b.Navigation("Unit");

                    b.Navigation("Warehouse");

                    b.Navigation("WarehouseFiscalPeriod");
                });

            modelBuilder.Entity("lena.Domains.BillOfMaterial", b =>
                {
                    b.HasOne("lena.Domains.ProductionStep", "ProductionStep")
                        .WithMany("BillOfMaterials")
                        .HasForeignKey("ProductionStepId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Stuff", "Stuff")
                        .WithMany("BillOfMaterials")
                        .HasForeignKey("StuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Unit", "Unit")
                        .WithMany("BillOfMaterials")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("BillOfMaterials")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductionStep");

                    b.Navigation("Stuff");

                    b.Navigation("Unit");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.BillOfMaterialDetail", b =>
                {
                    b.HasOne("lena.Domains.Stuff", "Stuff")
                        .WithMany("BillOfMaterialDetails")
                        .HasForeignKey("StuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Unit", "Unit")
                        .WithMany("BillOfMaterialDetails")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.BillOfMaterial", "BillOfMaterial")
                        .WithMany("BillOfMaterialDetails")
                        .HasForeignKey("BillOfMaterialVersion", "BillOfMaterialStuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.BillOfMaterial", "SemiProductBillOfMaterial")
                        .WithMany("UsedInBillOfMaterialDetails")
                        .HasForeignKey("SemiProductBillOfMaterialVersion", "StuffId");

                    b.Navigation("BillOfMaterial");

                    b.Navigation("SemiProductBillOfMaterial");

                    b.Navigation("Stuff");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("lena.Domains.BillOfMaterialDocument", b =>
                {
                    b.HasOne("lena.Domains.BillOfMaterialDocumentType", "BillOfMaterialDocumentType")
                        .WithMany("BillOfMaterialDocuments")
                        .HasForeignKey("BillOfMaterialDocumentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("BillOfMaterialDocuments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.BillOfMaterial", "BillOfMaterial")
                        .WithMany("BillOfMaterialDocuments")
                        .HasForeignKey("BillOfMaterialVersion", "BillOfMaterialStuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BillOfMaterial");

                    b.Navigation("BillOfMaterialDocumentType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.BillOfMaterialPriceHistory", b =>
                {
                    b.HasOne("lena.Domains.Currency", "Currency")
                        .WithMany("BillOfMaterialPriceHistories")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Stuff", "Stuff")
                        .WithMany("BillOfMaterialPriceHistories")
                        .HasForeignKey("StuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("BillOfMaterialPriceHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Stuff");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.BillOfMaterialPriceHistoryCurrencyRate", b =>
                {
                    b.HasOne("lena.Domains.BillOfMaterialPriceHistory", "BillOfMaterialHistory")
                        .WithMany("BillOfMaterialPriceHistoryCurrencyRates")
                        .HasForeignKey("BillOfMaterialPriceHistoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Currency", "FromCurrency")
                        .WithMany("BillOfMaterialPriceHistoryFromCurrencyRates")
                        .HasForeignKey("FromCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Currency", "ToCurrency")
                        .WithMany("BillOfMaterialPriceHistoryToCurrencyRates")
                        .HasForeignKey("ToCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BillOfMaterialHistory");

                    b.Navigation("FromCurrency");

                    b.Navigation("ToCurrency");
                });

            modelBuilder.Entity("lena.Domains.BillOfMaterialPriceHistoryDetail", b =>
                {
                    b.HasOne("lena.Domains.BillOfMaterialPriceHistory", "BillOfMaterialPriceHistory")
                        .WithMany("BillOfMaterialPriceHistoryDetails")
                        .HasForeignKey("BillOfMaerialPriceHistoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BillOfMaterialPriceHistory");
                });

            modelBuilder.Entity("lena.Domains.CalendarEvent", b =>
                {
                    b.HasOne("lena.Domains.WorkShift", "WorkShift")
                        .WithMany("CalendarEvents")
                        .HasForeignKey("WorkShiftId");

                    b.Navigation("WorkShift");
                });

            modelBuilder.Entity("lena.Domains.CargoCost", b =>
                {
                    b.HasOne("lena.Domains.Cargo", "Cargo")
                        .WithMany("CargoCosts")
                        .HasForeignKey("CargoId");

                    b.HasOne("lena.Domains.CargoItem", "CargoItem")
                        .WithMany("CargoCosts")
                        .HasForeignKey("CargoItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.FinancialDocumentCost", "FinancialDocumentCost")
                        .WithMany("CargoCosts")
                        .HasForeignKey("FinancialDocumentCostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cargo");

                    b.Navigation("CargoItem");

                    b.Navigation("FinancialDocumentCost");
                });

            modelBuilder.Entity("lena.Domains.CargoItemDetailSummary", b =>
                {
                    b.HasOne("lena.Domains.CargoItemDetail", "CargoItemDetail")
                        .WithOne("CargoItemDetailSummary")
                        .HasForeignKey("lena.Domains.CargoItemDetailSummary", "CargoItemDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CargoItemDetail");
                });

            modelBuilder.Entity("lena.Domains.CargoItemLog", b =>
                {
                    b.HasOne("lena.Domains.CargoItem", "CargoItem")
                        .WithMany("CargoItemLogs")
                        .HasForeignKey("CargoItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "ModifierUser")
                        .WithMany("CargoItemLogs")
                        .HasForeignKey("ModifierUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CargoItem");

                    b.Navigation("ModifierUser");
                });

            modelBuilder.Entity("lena.Domains.CargoItemSummary", b =>
                {
                    b.HasOne("lena.Domains.CargoItem", "CargoItem")
                        .WithOne("CargoItemSummary")
                        .HasForeignKey("lena.Domains.CargoItemSummary", "CargoItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CargoItem");
                });

            modelBuilder.Entity("lena.Domains.City", b =>
                {
                    b.HasOne("lena.Domains.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("lena.Domains.Contact", b =>
                {
                    b.HasOne("lena.Domains.ContactType", "ContactType")
                        .WithMany("Contacts")
                        .HasForeignKey("ContactTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Cooperator", "Cooperator")
                        .WithMany("Contacts")
                        .HasForeignKey("CooperatorId");

                    b.HasOne("lena.Domains.Cooperator", null)
                        .WithMany("CooperatorContacts")
                        .HasForeignKey("CooperatorId1");

                    b.HasOne("lena.Domains.Employee", "Employee")
                        .WithMany("Contacts")
                        .HasForeignKey("EmployeeId");

                    b.Navigation("ContactType");

                    b.Navigation("Cooperator");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("lena.Domains.Cooperator", b =>
                {
                    b.HasOne("lena.Domains.City", "City")
                        .WithMany("Cooperators")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("lena.Domains.CostCenter", b =>
                {
                    b.HasOne("lena.Domains.User", "ConfirmerUser")
                        .WithMany("ConfirmerCostCenters")
                        .HasForeignKey("ConfirmerUserId");

                    b.Navigation("ConfirmerUser");
                });

            modelBuilder.Entity("lena.Domains.Cottage", b =>
                {
                    b.HasOne("lena.Domains.CustomsDeclaration", "CustomsDeclaration")
                        .WithMany("Cottages")
                        .HasForeignKey("CustomsDeclarationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CustomsDeclaration");
                });

            modelBuilder.Entity("lena.Domains.CottageItem", b =>
                {
                    b.HasOne("lena.Domains.BankOrderDetail", "BankOrderDetail")
                        .WithMany("CottageItems")
                        .HasForeignKey("BankOrderDetailId");

                    b.HasOne("lena.Domains.Cottage", "Cottage")
                        .WithMany("CottageItems")
                        .HasForeignKey("CottageId");

                    b.HasOne("lena.Domains.StuffHSGroup", "StuffHSGroup")
                        .WithMany("CottageItems")
                        .HasForeignKey("StuffHSGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BankOrderDetail");

                    b.Navigation("Cottage");

                    b.Navigation("StuffHSGroup");
                });

            modelBuilder.Entity("lena.Domains.CurrencyRate", b =>
                {
                    b.HasOne("lena.Domains.Cooperator", "Exchange")
                        .WithMany("CurrencyRates")
                        .HasForeignKey("ExchangeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Currency", "FromCurrency")
                        .WithMany("ToCurrencyRates")
                        .HasForeignKey("FromCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Currency", "ToCurrency")
                        .WithMany("FromCurrencyRates")
                        .HasForeignKey("ToCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Exchange");

                    b.Navigation("FromCurrency");

                    b.Navigation("ToCurrency");
                });

            modelBuilder.Entity("lena.Domains.CustomerComplaint", b =>
                {
                    b.HasOne("lena.Domains.Cooperator", "Customer")
                        .WithMany("CustomerComplaints")
                        .HasForeignKey("CustomerId");

                    b.HasOne("lena.Domains.User", "RegisterarUser")
                        .WithMany("CustomerComplaints")
                        .HasForeignKey("RegisterarUserId");

                    b.HasOne("lena.Domains.User", null)
                        .WithMany("CorrectiveActions")
                        .HasForeignKey("UserId");

                    b.Navigation("Customer");

                    b.Navigation("RegisterarUser");
                });

            modelBuilder.Entity("lena.Domains.CustomerComplaintDepartment", b =>
                {
                    b.HasOne("lena.Domains.CustomerComplaintSummary", "CustomerComplaintSummary")
                        .WithMany("CustomerComplaintDepartments")
                        .HasForeignKey("CustomerComplaintSummaryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Department", "Department")
                        .WithMany("CustomerComplaintDepartments")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CustomerComplaintSummary");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("lena.Domains.CustomerComplaintSummary", b =>
                {
                    b.HasOne("lena.Domains.User", "CorrectiveActionUser")
                        .WithMany("CustomerComplaintSummaries")
                        .HasForeignKey("CorrectiveActionUserId");

                    b.HasOne("lena.Domains.CustomerComplaint", "CustomerComplaint")
                        .WithMany("CustomerComplaintSummaries")
                        .HasForeignKey("CustomerComplaintId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CorrectiveActionUser");

                    b.Navigation("CustomerComplaint");
                });

            modelBuilder.Entity("lena.Domains.CustomerStuff", b =>
                {
                    b.HasOne("lena.Domains.Cooperator", "Customer")
                        .WithMany("CustomerStuffs")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Stuff", "Stuff")
                        .WithMany("CustomerStuffs")
                        .HasForeignKey("StuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Stuff");
                });

            modelBuilder.Entity("lena.Domains.CustomerStuffVersion", b =>
                {
                    b.HasOne("lena.Domains.CustomerStuff", "CustomerStuff")
                        .WithMany("CustomerStuffVersions")
                        .HasForeignKey("CustomerStuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CustomerStuff");
                });

            modelBuilder.Entity("lena.Domains.DeleteLadingItemDetailChange", b =>
                {
                    b.HasOne("lena.Domains.LadingChangeRequest", "LadingChangeRequest")
                        .WithMany("DeleteLadingItemDetailChanges")
                        .HasForeignKey("LadingChangeRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LadingChangeRequest");
                });

            modelBuilder.Entity("lena.Domains.Department", b =>
                {
                    b.HasOne("lena.Domains.Department", "ParentDepartment")
                        .WithMany("ChildDepartments")
                        .HasForeignKey("ParentDepartmentId");

                    b.Navigation("ParentDepartment");
                });

            modelBuilder.Entity("lena.Domains.DepartmentManager", b =>
                {
                    b.HasOne("lena.Domains.Department", "Department")
                        .WithOne("DepartmentManager")
                        .HasForeignKey("lena.Domains.DepartmentManager", "DepartmentId");

                    b.HasOne("lena.Domains.OrganizationPost", "OrganizationPost")
                        .WithOne("DepartmentManager")
                        .HasForeignKey("lena.Domains.DepartmentManager", "OrganizationPostId");

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("DepartmentManagers")
                        .HasForeignKey("UserId");

                    b.Navigation("Department");

                    b.Navigation("OrganizationPost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.DepartmentWorkShift", b =>
                {
                    b.HasOne("lena.Domains.Department", "Department")
                        .WithMany("DepartmentWorkShifts")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.WorkShift", "WorkShift")
                        .WithMany("DepartmentWorkShifts")
                        .HasForeignKey("WorkShiftId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("WorkShift");
                });

            modelBuilder.Entity("lena.Domains.DetailedCodeConfirmationRequest", b =>
                {
                    b.HasOne("lena.Domains.User", "DetailedCodeConfirmerUser")
                        .WithMany("ConfirmerDetailedCodeConfirmationRequest")
                        .HasForeignKey("ConfirmationUserId");

                    b.HasOne("lena.Domains.Cooperator", "Cooperator")
                        .WithMany("DetailedCodeConfirmationRequests")
                        .HasForeignKey("CooperatorId");

                    b.HasOne("lena.Domains.ProductionLine", "ProductionLine")
                        .WithMany("DetailedCodeConfirmationRequests")
                        .HasForeignKey("ProductionLineId");

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("DetailedCodeConfirmationRequest")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cooperator");

                    b.Navigation("DetailedCodeConfirmerUser");

                    b.Navigation("ProductionLine");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.EditLadingItemDetailChange", b =>
                {
                    b.HasOne("lena.Domains.LadingChangeRequest", "LadingChangeRequest")
                        .WithMany("EditLadingItemDetailChanges")
                        .HasForeignKey("LadingChangeRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LadingChangeRequest");
                });

            modelBuilder.Entity("lena.Domains.Employee", b =>
                {
                    b.HasOne("lena.Domains.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("lena.Domains.OrganizationJob", "OrganizationJob")
                        .WithMany("Employees")
                        .HasForeignKey("OrganizationJobId");

                    b.HasOne("lena.Domains.OrganizationPost", "OrganizationPost")
                        .WithMany("Employees")
                        .HasForeignKey("OrgnizationPostId");

                    b.HasOne("lena.Domains.User", "User")
                        .WithOne("Employee")
                        .HasForeignKey("lena.Domains.Employee", "UserId");

                    b.Navigation("Department");

                    b.Navigation("OrganizationJob");

                    b.Navigation("OrganizationPost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.EmployeeComplain", b =>
                {
                    b.HasOne("lena.Domains.Employee", "Employee")
                        .WithMany("EmployeeComplains")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("EmployeeComplains")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.EmployeeComplainDepartment", b =>
                {
                    b.HasOne("lena.Domains.Department", "Department")
                        .WithMany("EmployeeComplainDepartments")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.EmployeeComplainItem", "EmployeeComplainItem")
                        .WithMany("EmployeeComplainDepartments")
                        .HasForeignKey("EmployeeComplainItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("EmployeeComplainItem");
                });

            modelBuilder.Entity("lena.Domains.EmployeeComplainItem", b =>
                {
                    b.HasOne("lena.Domains.EmployeeComplain", "EmployeeComplain")
                        .WithMany("EmployeeComplainItems")
                        .HasForeignKey("EmployeeComplainId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EmployeeComplain");
                });

            modelBuilder.Entity("lena.Domains.EmployeeEvaluation", b =>
                {
                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("EmployeeEvaluations")
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.EmployeeEvaluationPeriod", "EmployeeEvaluationPeriod")
                        .WithMany("EmployeeEvaluations")
                        .HasForeignKey("EmployeeEvaluationPeriodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Employee", "Employee")
                        .WithMany("EmployeeEvaluations")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("EmployeeEvaluationPeriod");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.EmployeeEvaluationItem", b =>
                {
                    b.HasOne("lena.Domains.EmployeeEvaluation", "EmployeeEvaluation")
                        .WithMany("EmployeeEvaluationItems")
                        .HasForeignKey("EmployeeEvaluationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.EvaluationCategory", "EvaluationCategory")
                        .WithMany("EmployeeEvaluationItems")
                        .HasForeignKey("EvaluationCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("EmployeeEvaluationItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EmployeeEvaluation");

                    b.Navigation("EvaluationCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.EmployeeEvaluationItemDetail", b =>
                {
                    b.HasOne("lena.Domains.EvaluationCategoryItem", "EvaluationCategoryItem")
                        .WithMany("EmployeeEvaluationItemDetails")
                        .HasForeignKey("EvaluationCategoryItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.EmployeeEvaluationItem", "EmployeeEvaluationItem")
                        .WithMany("EmployeeEvaluationItemDetails")
                        .HasForeignKey("EmployeeEvaluationId", "EvaluationCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EmployeeEvaluationItem");

                    b.Navigation("EvaluationCategoryItem");
                });

            modelBuilder.Entity("lena.Domains.EmployeeEvaluationPeriod", b =>
                {
                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("EmployeeEvaluationPeriods")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.EmployeeEvaluationPeriodItem", b =>
                {
                    b.HasOne("lena.Domains.EmployeeEvaluationPeriod", "EmployeeEvaluationPeriod")
                        .WithMany("EmployeeEvaluationPeriodItems")
                        .HasForeignKey("EmployeeEvaluationPeriodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.EvaluationCategory", "EvaluationCategory")
                        .WithMany("EmployeeEvaluationPeriodItems")
                        .HasForeignKey("EvaluationCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EmployeeEvaluationPeriod");

                    b.Navigation("EvaluationCategory");
                });

            modelBuilder.Entity("lena.Domains.EmployeeOperatorType", b =>
                {
                    b.HasOne("lena.Domains.Employee", "Employee")
                        .WithMany("EmployeeOperatorTypes")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.OperatorType", "OperatorType")
                        .WithMany("EmployeeOperatorTypes")
                        .HasForeignKey("OperatorTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("OperatorType");
                });

            modelBuilder.Entity("lena.Domains.EmployeeWorkReport", b =>
                {
                    b.HasOne("lena.Domains.Employee", "Employee")
                        .WithMany("EmployeeWorkReports")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.ProjectERPTask", "ProjectERPTask")
                        .WithMany("EmployeeWorkReports")
                        .HasForeignKey("ProjectERPTaskId");

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("EmployeeWorkReports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("ProjectERPTask");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.EmployeeWorkReportItem", b =>
                {
                    b.HasOne("lena.Domains.EmployeeWorkReport", "EmployeeWorkReport")
                        .WithMany("EmployeeWorkReportItems")
                        .HasForeignKey("EmployeeWorkReportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EmployeeWorkReport");
                });

            modelBuilder.Entity("lena.Domains.Enactment", b =>
                {
                    b.HasOne("lena.Domains.BankOrder", "BankOrder")
                        .WithOne("Enactment")
                        .HasForeignKey("lena.Domains.Enactment", "BankOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BankOrder");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.EnactmentActionProcessLog", b =>
                {
                    b.HasOne("lena.Domains.EnactmentActionProcess", "EnactmentActionProcess")
                        .WithMany("EnactmentActionProcessLogs")
                        .HasForeignKey("EnactmentActionProcessId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Enactment", "Enactment")
                        .WithMany("EnactmentActionProcessLogs")
                        .HasForeignKey("EnactmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Enactment", null)
                        .WithOne("CurrentEnactmentActionProcessLog")
                        .HasForeignKey("lena.Domains.EnactmentActionProcessLog", "EnactmentId1");

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("EnactmentActionProcessLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Enactment");

                    b.Navigation("EnactmentActionProcess");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.EntityLog", b =>
                {
                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("EntityLogs")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.EquivalentStuff", b =>
                {
                    b.HasOne("lena.Domains.BillOfMaterialDetail", "BillOfMaterialDetail")
                        .WithMany("EquivalentStuffs")
                        .HasForeignKey("BillOfMaterialDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BillOfMaterialDetail");
                });

            modelBuilder.Entity("lena.Domains.EquivalentStuffDetail", b =>
                {
                    b.HasOne("lena.Domains.EquivalentStuff", "EquivalentStuff")
                        .WithMany("EquivalentStuffDetails")
                        .HasForeignKey("EquivalentStuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Stuff", "Stuff")
                        .WithMany("EquivalentStuffDetails")
                        .HasForeignKey("StuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Unit", "Unit")
                        .WithMany("EquivalentStuffDetails")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.BillOfMaterial", "SemiProductBillOfMaterial")
                        .WithMany("UsedInEquivalentStuffs")
                        .HasForeignKey("SemiProductBillOfMaterialVersion", "StuffId");

                    b.Navigation("EquivalentStuff");

                    b.Navigation("SemiProductBillOfMaterial");

                    b.Navigation("Stuff");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("lena.Domains.EvaluationCategory", b =>
                {
                    b.HasOne("lena.Domains.Department", "Department")
                        .WithMany("EvaluationCategories")
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("lena.Domains.EvaluationCategoryItem", b =>
                {
                    b.HasOne("lena.Domains.EvaluationCategory", "EvaluationCategory")
                        .WithMany("EvaluationCategoryItems")
                        .HasForeignKey("EvaluationCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EvaluationCategory");
                });

            modelBuilder.Entity("lena.Domains.ExitReceiptDeleteRequest", b =>
                {
                    b.HasOne("lena.Domains.User", "ChangeStatusUser")
                        .WithMany()
                        .HasForeignKey("ChangeStatusUserId");

                    b.HasOne("lena.Domains.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.ExitReceipt", "ExitReceipt")
                        .WithMany("ExitReceiptDeleteRequests")
                        .HasForeignKey("ExitReceiptId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChangeStatusUser");

                    b.Navigation("CreatorUser");

                    b.Navigation("ExitReceipt");
                });

            modelBuilder.Entity("lena.Domains.ExitReceiptDeleteRequestConfirmationLog", b =>
                {
                    b.HasOne("lena.Domains.User", "ConfirmerUser")
                        .WithMany("ExitReceiptDeleteRequestConfirmationLogs")
                        .HasForeignKey("ConfirmerUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.ExitReceiptDeleteRequest", "ExitReceiptDeleteRequest")
                        .WithMany("ExitReceiptDeleteRequestConfirmationLogs")
                        .HasForeignKey("ExitReceiptDeleteRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ConfirmerUser");

                    b.Navigation("ExitReceiptDeleteRequest");
                });

            modelBuilder.Entity("lena.Domains.ExitReceiptDeleteRequestStuffSerial", b =>
                {
                    b.HasOne("lena.Domains.ExitReceiptDeleteRequest", "ExitReceiptDeleteRequest")
                        .WithMany("ExitReceiptDeleteRequestStuffSerials")
                        .HasForeignKey("ExitReceiptDeleteRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Unit", "Unit")
                        .WithMany("ExitReceiptDeleteRequestStuffSerials")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.StuffSerial", "StuffSerial")
                        .WithMany("ExitReceiptDeleteRequestStuffSerials")
                        .HasForeignKey("StuffSerialCode", "StuffSerialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ExitReceiptDeleteRequest");

                    b.Navigation("StuffSerial");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("lena.Domains.ExitReceiptRequestSummary", b =>
                {
                    b.HasOne("lena.Domains.ExitReceiptRequest", "ExitReceiptRequest")
                        .WithOne("ExitReceiptRequestSummary")
                        .HasForeignKey("lena.Domains.ExitReceiptRequestSummary", "ExitReceiptRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ExitReceiptRequest");
                });

            modelBuilder.Entity("lena.Domains.FaildProductionOperation", b =>
                {
                    b.HasOne("lena.Domains.RepairProduction", "RepairProduction")
                        .WithMany("FaildProductionOperations")
                        .HasForeignKey("RepairProductionId");

                    b.HasOne("lena.Domains.ProductionOperation", "ReworkProductionOperation")
                        .WithOne("ReworkFaildProductionOperation")
                        .HasForeignKey("lena.Domains.FaildProductionOperation", "ReworkProductionOperationId");

                    b.Navigation("RepairProduction");

                    b.Navigation("ReworkProductionOperation");
                });

            modelBuilder.Entity("lena.Domains.Finance", b =>
                {
                    b.HasOne("lena.Domains.Cooperator", "Cooperator")
                        .WithMany("Finances")
                        .HasForeignKey("CooperatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Currency", "Currency")
                        .WithMany("Finances")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.FinancialAccountDetail", "FinancialAccountDetail")
                        .WithMany("Finances")
                        .HasForeignKey("FinanacialAccountDetailId");

                    b.HasOne("lena.Domains.FinanceConfirmation", "LatestFinanceConfirmation")
                        .WithOne("LatestFinance")
                        .HasForeignKey("lena.Domains.Finance", "LastConfimationId");

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("Finances")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cooperator");

                    b.Navigation("Currency");

                    b.Navigation("FinancialAccountDetail");

                    b.Navigation("LatestFinanceConfirmation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.FinanceAllocation", b =>
                {
                    b.HasOne("lena.Domains.Finance", "Finance")
                        .WithMany("FinanceAllocations")
                        .HasForeignKey("FinanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("FinanceAllocations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Finance");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.FinanceAllocationSummary", b =>
                {
                    b.HasOne("lena.Domains.Finance", "Finance")
                        .WithOne("FinanceAllocationSummary")
                        .HasForeignKey("lena.Domains.FinanceAllocationSummary", "FinanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Finance");
                });

            modelBuilder.Entity("lena.Domains.FinanceConfirmation", b =>
                {
                    b.HasOne("lena.Domains.Finance", "Finance")
                        .WithMany("FinanceConfirmations")
                        .HasForeignKey("FinanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("FinanceConfirmations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Finance");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.FinanceItem", b =>
                {
                    b.HasOne("lena.Domains.Cooperator", "Cooperator")
                        .WithMany("FinanceItems")
                        .HasForeignKey("CooperatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.FinancialDocument", "FinancialDocument")
                        .WithMany("FinanceItems")
                        .HasForeignKey("ExpenseFinancialDocumentId");

                    b.HasOne("lena.Domains.Finance", "Finance")
                        .WithMany("FinanceItems")
                        .HasForeignKey("FinanceId");

                    b.HasOne("lena.Domains.FinanceItemConfirmation", "LatestFinanceItemConfirmation")
                        .WithOne("LatestFinanceItem")
                        .HasForeignKey("lena.Domains.FinanceItem", "LatestConfirmationId");

                    b.HasOne("lena.Domains.PurchaseOrder", "PurchaseOrder")
                        .WithMany("FinanceItems")
                        .HasForeignKey("PurchaseOrderId");

                    b.HasOne("lena.Domains.User", "ReceivedUser")
                        .WithMany("ReceivedFinanceItems")
                        .HasForeignKey("ReceivedUserId");

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("FinanceItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.FinanceItemAllocationSummary", "FinanceItemAllocationSummary")
                        .WithMany("FinanceItem")
                        .HasForeignKey("FinanceId", "CooperatorId");

                    b.Navigation("Cooperator");

                    b.Navigation("Finance");

                    b.Navigation("FinanceItemAllocationSummary");

                    b.Navigation("FinancialDocument");

                    b.Navigation("LatestFinanceItemConfirmation");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("ReceivedUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.FinanceItemAllocationSummary", b =>
                {
                    b.HasOne("lena.Domains.Cooperator", "Cooperator")
                        .WithMany("FinanceItemAllocationSummaries")
                        .HasForeignKey("CooperatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Finance", "Finance")
                        .WithMany("FinanceItemAllocationSummaries")
                        .HasForeignKey("FinanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cooperator");

                    b.Navigation("Finance");
                });

            modelBuilder.Entity("lena.Domains.FinanceItemConfirmation", b =>
                {
                    b.HasOne("lena.Domains.FinanceItem", "FinanceItem")
                        .WithMany("FinanceItemConfirmations")
                        .HasForeignKey("FinanceItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("FinanceItemConfirmations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FinanceItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.FinancialAccount", b =>
                {
                    b.HasOne("lena.Domains.Currency", "Currency")
                        .WithMany("FinancialAccounts")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("lena.Domains.FinancialAccountDetail", b =>
                {
                    b.HasOne("lena.Domains.Bank", "Bank")
                        .WithMany("FinancialAccountDetails")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.FinancialAccount", "FinancialAccount")
                        .WithMany("FinancialAccountDetails")
                        .HasForeignKey("FinancialAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("FinancialAccount");
                });

            modelBuilder.Entity("lena.Domains.FinancialDocumentBankOrder", b =>
                {
                    b.HasOne("lena.Domains.BankOrder", "BankOrder")
                        .WithMany("FinancialDocumentBankOrders")
                        .HasForeignKey("BankOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.FinancialDocument", "FinancialDocument")
                        .WithOne("FinancialDocumentBankOrder")
                        .HasForeignKey("lena.Domains.FinancialDocumentBankOrder", "FinancialDocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BankOrder");

                    b.Navigation("FinancialDocument");
                });

            modelBuilder.Entity("lena.Domains.FinancialDocumentBeginning", b =>
                {
                    b.HasOne("lena.Domains.FinancialDocument", "FinancialDocument")
                        .WithOne("FinancialDocumentBeginning")
                        .HasForeignKey("lena.Domains.FinancialDocumentBeginning", "FinancialDocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FinancialDocument");
                });

            modelBuilder.Entity("lena.Domains.FinancialDocumentCorrection", b =>
                {
                    b.HasOne("lena.Domains.FinancialDocument", "FinancialDocument")
                        .WithOne("FinancialDocumentCorrection")
                        .HasForeignKey("lena.Domains.FinancialDocumentCorrection", "FinancialDocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FinancialDocument");
                });

            modelBuilder.Entity("lena.Domains.FinancialDocumentCost", b =>
                {
                    b.HasOne("lena.Domains.FinancialDocument", "FinancialDocument")
                        .WithOne("FinancialDocumentCost")
                        .HasForeignKey("lena.Domains.FinancialDocumentCost", "FinancialDocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FinancialDocument");
                });

            modelBuilder.Entity("lena.Domains.FinancialDocumentDiscount", b =>
                {
                    b.HasOne("lena.Domains.FinancialDocument", "FinancialDocument")
                        .WithOne("FinancialDocumentDiscount")
                        .HasForeignKey("lena.Domains.FinancialDocumentDiscount", "FinancialDocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FinancialDocument");
                });

            modelBuilder.Entity("lena.Domains.FinancialDocumentTransfer", b =>
                {
                    b.HasOne("lena.Domains.FinancialDocument", "FinancialDocument")
                        .WithOne("FinancialDocumentTransfer")
                        .HasForeignKey("lena.Domains.FinancialDocumentTransfer", "FinancialDocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.FinancialAccount", "ToFinancialAccount")
                        .WithMany("FinancialDocumentTransfers")
                        .HasForeignKey("ToFinancialAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FinancialDocument");

                    b.Navigation("ToFinancialAccount");
                });

            modelBuilder.Entity("lena.Domains.FinancialLimit", b =>
                {
                    b.HasOne("lena.Domains.Currency", "Currency")
                        .WithMany("FinancialLimits")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("FinancialLimits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.FinancialTransaction", b =>
                {
                    b.HasOne("lena.Domains.FinancialAccount", "FinancialAccount")
                        .WithMany("FinancialTransactions")
                        .HasForeignKey("FinancialAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.FinancialTransactionBatch", "FinancialTransactionBatch")
                        .WithMany("FinancialTransactions")
                        .HasForeignKey("FinancialTransactionBatchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.FinancialTransactionType", "FinancialTransactionType")
                        .WithMany("FinancialTransactions")
                        .HasForeignKey("FinancialTransactionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.FinancialTransaction", "ReferenceFinancialTransaction")
                        .WithMany("ReferencedFinancialTransactions")
                        .HasForeignKey("ReferenceFinancialTransactionId");

                    b.Navigation("FinancialAccount");

                    b.Navigation("FinancialTransactionBatch");

                    b.Navigation("FinancialTransactionType");

                    b.Navigation("ReferenceFinancialTransaction");
                });

            modelBuilder.Entity("lena.Domains.FinancialTransactionBatch", b =>
                {
                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("FinancialTransactionBatches")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.FinancialTransactionType", b =>
                {
                    b.HasOne("lena.Domains.FinancialTransactionType", "RollbackFinancialTransactionType")
                        .WithMany("ReferenceFinancialTransactionTypes")
                        .HasForeignKey("RollbackFinancialTransactionTypeId");

                    b.Navigation("RollbackFinancialTransactionType");
                });

            modelBuilder.Entity("lena.Domains.GeneralStuffRequest", b =>
                {
                    b.HasOne("lena.Domains.Warehouse", "FromWarehosue")
                        .WithMany("ExportGeneralStuffRequests")
                        .HasForeignKey("FromWarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.ProductionMaterialRequest", "ProductionMaterialRequest")
                        .WithMany("GeneralStuffRequests")
                        .HasForeignKey("ProductionMaterialRequestId");

                    b.HasOne("lena.Domains.ScrumEntity", "ScrumEntity")
                        .WithMany("GeneralStuffRequests")
                        .HasForeignKey("ScrumEntityId");

                    b.HasOne("lena.Domains.Stuff", "Stuff")
                        .WithMany("GeneralStuffRequests")
                        .HasForeignKey("StuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Department", "ToDepartment")
                        .WithMany("GeneralStuffRequests")
                        .HasForeignKey("ToDepartmentId");

                    b.HasOne("lena.Domains.Employee", "ToEmployee")
                        .WithMany("GeneralStuffRequests")
                        .HasForeignKey("ToEmployeeId");

                    b.HasOne("lena.Domains.Warehouse", "ToWarehouse")
                        .WithMany("ImportGeneralStuffRequests")
                        .HasForeignKey("ToWarehouseId");

                    b.HasOne("lena.Domains.Unit", "Unit")
                        .WithMany("GeneralStuffRequests")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("GeneralStuffRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.BillOfMaterial", "BillOfMaterial")
                        .WithMany("GeneralStuffRequests")
                        .HasForeignKey("BillOfMaterialVersion", "StuffId");

                    b.Navigation("BillOfMaterial");

                    b.Navigation("FromWarehosue");

                    b.Navigation("ProductionMaterialRequest");

                    b.Navigation("ScrumEntity");

                    b.Navigation("Stuff");

                    b.Navigation("ToDepartment");

                    b.Navigation("ToEmployee");

                    b.Navigation("ToWarehouse");

                    b.Navigation("Unit");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.GeneralStuffRequestDetail", b =>
                {
                    b.HasOne("lena.Domains.PurchaseRequest", "AlternativePurchaseRequest")
                        .WithMany()
                        .HasForeignKey("AlternativePurchaseRequestId");

                    b.HasOne("lena.Domains.GeneralStuffRequest", "GeneralStuffRequest")
                        .WithMany("GeneralStuffRequestDetails")
                        .HasForeignKey("GeneralStuffRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.PurchaseRequest", "PurchaseRequest")
                        .WithMany()
                        .HasForeignKey("PurchaseRequestId");

                    b.HasOne("lena.Domains.StuffRequest", "StuffRequest")
                        .WithMany()
                        .HasForeignKey("StuffRequestId");

                    b.HasOne("lena.Domains.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AlternativePurchaseRequest");

                    b.Navigation("GeneralStuffRequest");

                    b.Navigation("PurchaseRequest");

                    b.Navigation("StuffRequest");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("lena.Domains.HowToBuyDetail", b =>
                {
                    b.HasOne("lena.Domains.HowToBuy", "HowToBuy")
                        .WithMany("HowToBuyDetails")
                        .HasForeignKey("HowToBuyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("HowToBuy");
                });

            modelBuilder.Entity("lena.Domains.InboundCargoCooperator", b =>
                {
                    b.HasOne("lena.Domains.Cooperator", "Cooperator")
                        .WithMany("InboundCargoCooperators")
                        .HasForeignKey("CooperatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.InboundCargo", "InboundCargo")
                        .WithMany("InboundCargoCooperators")
                        .HasForeignKey("InboundCargoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cooperator");

                    b.Navigation("InboundCargo");
                });

            modelBuilder.Entity("lena.Domains.Indicator", b =>
                {
                    b.HasOne("lena.Domains.ApiInfo", "ApiInfo")
                        .WithMany("Indicators")
                        .HasForeignKey("ApiInfoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Department", "Department")
                        .WithMany("Indicators")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApiInfo");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("lena.Domains.IndicatorWeight", b =>
                {
                    b.HasOne("lena.Domains.Department", "Department")
                        .WithMany("IndicatorWeights")
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("lena.Domains.IranKhodroSerial", b =>
                {
                    b.HasOne("lena.Domains.CustomerStuff", "CustomerStuff")
                        .WithMany("IranKhordoSerials")
                        .HasForeignKey("CustomerStuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.CustomerStuffVersion", "CustomerStuffVersion")
                        .WithMany("IranKhordoSerials")
                        .HasForeignKey("CustomerStuffVersionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.LinkSerial", "LinkSerial")
                        .WithOne("IranKhodroSerial")
                        .HasForeignKey("lena.Domains.IranKhodroSerial", "LinkSerialId");

                    b.HasOne("lena.Domains.ProductionYear", "ProductionYear")
                        .WithMany("IranKhordoSerials")
                        .HasForeignKey("ProductionYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("IranKhodroSerials")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CustomerStuff");

                    b.Navigation("CustomerStuffVersion");

                    b.Navigation("LinkSerial");

                    b.Navigation("ProductionYear");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.LadingBankOrderLog", b =>
                {
                    b.HasOne("lena.Domains.LadingBankOrderStatus", "LadingBankOrderStatus")
                        .WithMany("LadingBankOrderLogs")
                        .HasForeignKey("LadingBankOrderStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Lading", "Lading")
                        .WithMany("LadingBankOrderLogs")
                        .HasForeignKey("LadingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Lading", null)
                        .WithOne("CurrentLadingBankOrderLog")
                        .HasForeignKey("lena.Domains.LadingBankOrderLog", "LadingId1");

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("LadingBankOrderLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Lading");

                    b.Navigation("LadingBankOrderStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.LadingBlocker", b =>
                {
                    b.HasOne("lena.Domains.UserGroup", "UserGroup")
                        .WithMany("LadingBlockers")
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("lena.Domains.LadingChangeRequest", b =>
                {
                    b.HasOne("lena.Domains.User", "ConfirmerUser")
                        .WithMany("ConfirmerLadingChangeRequests")
                        .HasForeignKey("ConfirmerUserId");

                    b.HasOne("lena.Domains.Lading", "Lading")
                        .WithMany("LadingChangeRequests")
                        .HasForeignKey("LadingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("DemandantLadingChangeRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ConfirmerUser");

                    b.Navigation("Lading");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.LadingCost", b =>
                {
                    b.HasOne("lena.Domains.FinancialDocumentCost", "FinancialDocumentCost")
                        .WithMany("LadingCosts")
                        .HasForeignKey("FinancialDocumentCostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Lading", "Lading")
                        .WithMany("LadingCosts")
                        .HasForeignKey("LadingId");

                    b.HasOne("lena.Domains.LadingItem", "LadingItem")
                        .WithMany("LadingCosts")
                        .HasForeignKey("LadingItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FinancialDocumentCost");

                    b.Navigation("Lading");

                    b.Navigation("LadingItem");
                });

            modelBuilder.Entity("lena.Domains.LadingCustomhouseLog", b =>
                {
                    b.HasOne("lena.Domains.LadingCustomhouseStatus", "LadingCustomhouseStatus")
                        .WithMany("LadingCustomhouseLogs")
                        .HasForeignKey("LadingCustomhouseStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Lading", "Lading")
                        .WithMany("LadingCustomhouseLogs")
                        .HasForeignKey("LadingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Lading", null)
                        .WithOne("CurrentLadingCustomhouseLog")
                        .HasForeignKey("lena.Domains.LadingCustomhouseLog", "LadingId1");

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("LadingCustomhouseLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Lading");

                    b.Navigation("LadingCustomhouseStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.LadingItemDetailSummary", b =>
                {
                    b.HasOne("lena.Domains.LadingItemDetail", "LadingItemDetail")
                        .WithOne("LadingItemDetailSummary")
                        .HasForeignKey("lena.Domains.LadingItemDetailSummary", "LadingItemDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LadingItemDetail");
                });

            modelBuilder.Entity("lena.Domains.LadingItemSummary", b =>
                {
                    b.HasOne("lena.Domains.LadingItem", "LadingItem")
                        .WithOne("LadingItemSummary")
                        .HasForeignKey("lena.Domains.LadingItemSummary", "LadingItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LadingItem");
                });

            modelBuilder.Entity("lena.Domains.LinkSerial", b =>
                {
                    b.HasOne("lena.Domains.Cooperator", "Customer")
                        .WithMany("LinkSerials")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("LinkSerials")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "UserLinker")
                        .WithMany("LinkerLinkSerials")
                        .HasForeignKey("UserLinkerId");

                    b.HasOne("lena.Domains.StuffSerial", "StuffSerial")
                        .WithOne("LinkSerial")
                        .HasForeignKey("lena.Domains.LinkSerial", "StuffSerialCode", "StuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("StuffSerial");

                    b.Navigation("User");

                    b.Navigation("UserLinker");
                });

            modelBuilder.Entity("lena.Domains.Machine", b =>
                {
                    b.HasOne("lena.Domains.MachineType", "MachineType")
                        .WithMany("Machines")
                        .HasForeignKey("MachineTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MachineType");
                });

            modelBuilder.Entity("lena.Domains.MachineTypeOperatorType", b =>
                {
                    b.HasOne("lena.Domains.MachineType", "MachineType")
                        .WithMany("MachineTypeOperatorTypes")
                        .HasForeignKey("MachineTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.OperatorType", "OperatorType")
                        .WithMany("MachineTypeOperatorTypes")
                        .HasForeignKey("OperatorTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MachineType");

                    b.Navigation("OperatorType");
                });

            modelBuilder.Entity("lena.Domains.MachineTypeParameter", b =>
                {
                    b.HasOne("lena.Domains.MachineType", "MachineType")
                        .WithMany("MachineTypeParameters")
                        .HasForeignKey("MachineTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MachineType");
                });

            modelBuilder.Entity("lena.Domains.MeetingApproval", b =>
                {
                    b.HasOne("lena.Domains.MinutesMeeting", "MinutesMeeting")
                        .WithMany("MeetingAprovals")
                        .HasForeignKey("MinutesMeetingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Department", "Department")
                        .WithMany("MeetingApprovals")
                        .HasForeignKey("OperatorDepartmentId");

                    b.HasOne("lena.Domains.User", "OperatorUser")
                        .WithMany("OperatorMeetingAprovals")
                        .HasForeignKey("OperatorUserId");

                    b.Navigation("Department");

                    b.Navigation("MinutesMeeting");

                    b.Navigation("OperatorUser");
                });

            modelBuilder.Entity("lena.Domains.MeetingParticipant", b =>
                {
                    b.HasOne("lena.Domains.MinutesMeeting", "MinutesMeeting")
                        .WithMany("MeetingParticipants")
                        .HasForeignKey("MinutesMeetingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Employee", "ParticipantEmployee")
                        .WithMany("MeetingParticipants")
                        .HasForeignKey("ParticipantEmployeeId");

                    b.HasOne("lena.Domains.User", null)
                        .WithMany("MeetingParticipants")
                        .HasForeignKey("UserId");

                    b.Navigation("MinutesMeeting");

                    b.Navigation("ParticipantEmployee");
                });

            modelBuilder.Entity("lena.Domains.Membership", b =>
                {
                    b.HasOne("lena.Domains.UserGroup", "UserGroup")
                        .WithMany("Memberships")
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("Memberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("lena.Domains.Message", b =>
                {
                    b.HasOne("lena.Domains.User", "SenderUser")
                        .WithMany("Messages")
                        .HasForeignKey("SenderUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SenderUser");
                });

            modelBuilder.Entity("lena.Domains.MessageSend", b =>
                {
                    b.HasOne("lena.Domains.User", "ReciverUser")
                        .WithMany("MessageSends")
                        .HasForeignKey("ReciverUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ReciverUser");
                });

            modelBuilder.Entity("lena.Domains.MinutesMeeting", b =>
                {
                    b.HasOne("lena.Domains.User", "BossUser")
                        .WithMany("BossMinutesMeetings")
                        .HasForeignKey("BossUserId");

                    b.HasOne("lena.Domains.User", "RegistrantUser")
                        .WithMany("RegistrantMinutesMeetings")
                        .HasForeignKey("RegistrantUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "SecretaryUser")
                        .WithMany("SecretaryMinutesMeetings")
                        .HasForeignKey("SecretaryUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BossUser");

                    b.Navigation("RegistrantUser");

                    b.Navigation("SecretaryUser");
                });

            modelBuilder.Entity("lena.Domains.NewShoppingDetailSummary", b =>
                {
                    b.HasOne("lena.Domains.NewShoppingDetail", "NewShoppingDetail")
                        .WithOne("NewShoppingDetailSummary")
                        .HasForeignKey("lena.Domains.NewShoppingDetailSummary", "NewShoppingDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("NewShoppingDetail");
                });

            modelBuilder.Entity("lena.Domains.Notification", b =>
                {
                    b.HasOne("lena.Domains.NotificationGroup", "NotificationGroup")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationGroupId");

                    b.HasOne("lena.Domains.ScrumEntity", "ScrumEntity")
                        .WithMany("Notifications")
                        .HasForeignKey("ScrumEntityId");

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("NotificationGroup");

                    b.Navigation("ScrumEntity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.Operation", b =>
                {
                    b.HasOne("lena.Domains.OperationType", "OperationType")
                        .WithMany("Operations")
                        .HasForeignKey("OperationTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OperationType");
                });

            modelBuilder.Entity("lena.Domains.OperationConsumingMaterial", b =>
                {
                    b.HasOne("lena.Domains.BillOfMaterialDetail", "BillOfMaterialDetail")
                        .WithMany("OperationConsumingMaterials")
                        .HasForeignKey("BillOfMaterialDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.OperationSequence", "OperationSequence")
                        .WithMany("OperationConsumingMaterials")
                        .HasForeignKey("OperationSequenceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BillOfMaterialDetail");

                    b.Navigation("OperationSequence");
                });

            modelBuilder.Entity("lena.Domains.OperationSequence", b =>
                {
                    b.HasOne("lena.Domains.Operation", "Operation")
                        .WithMany("OperationSequences")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.WorkPlanStep", "WorkPlanStep")
                        .WithMany("OperationSequences")
                        .HasForeignKey("WorkPlanStepId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.WorkStation", "WorkStation")
                        .WithMany("OperationSequences")
                        .HasForeignKey("WorkStationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.WorkStationPart", "WorkStationPart")
                        .WithMany("OperationSequences")
                        .HasForeignKey("WorkStationPartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.WorkStationOperation", "WorkStationOperation")
                        .WithMany("OperationSequences")
                        .HasForeignKey("WorkStationId", "OperationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Operation");

                    b.Navigation("WorkPlanStep");

                    b.Navigation("WorkStation");

                    b.Navigation("WorkStationOperation");

                    b.Navigation("WorkStationPart");
                });

            modelBuilder.Entity("lena.Domains.OperationSequenceMachineTypeParameter", b =>
                {
                    b.HasOne("lena.Domains.MachineTypeParameter", "MachineTypeParameter")
                        .WithMany("OperationSequenceMachineTypeParameters")
                        .HasForeignKey("MachineTypeParameterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.OperationSequence", "OperationSequence")
                        .WithMany("OperationSequenceMachineTypeParameters")
                        .HasForeignKey("OperationSequenceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MachineTypeParameter");

                    b.Navigation("OperationSequence");
                });

            modelBuilder.Entity("lena.Domains.Order", b =>
                {
                    b.HasOne("lena.Domains.Cooperator", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.OrderType", "OrderType")
                        .WithMany("Orders")
                        .HasForeignKey("OrderTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("OrderType");
                });

            modelBuilder.Entity("lena.Domains.OrderDocument", b =>
                {
                    b.HasOne("lena.Domains.Document", "Document")
                        .WithOne()
                        .HasForeignKey("lena.Domains.OrderDocument", "DocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Order", "Order")
                        .WithMany("OrderDocuments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("OrderDocuments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.OrderItemSummary", b =>
                {
                    b.HasOne("lena.Domains.OrderItem", "OrderItem")
                        .WithOne("OrderItemSummary")
                        .HasForeignKey("lena.Domains.OrderItemSummary", "OrderItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("lena.Domains.OrganizationJob", b =>
                {
                    b.HasOne("lena.Domains.User", "Creator")
                        .WithMany("OrganizationJobs")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.OrganizationPost", "OrganizationPost")
                        .WithMany("OrganizationJobs")
                        .HasForeignKey("OranizationPostId");

                    b.Navigation("Creator");

                    b.Navigation("OrganizationPost");
                });

            modelBuilder.Entity("lena.Domains.OrganizationPost", b =>
                {
                    b.HasOne("lena.Domains.User", "Creator")
                        .WithMany("OrganizationPosts")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.OrganizationPost", "Parent")
                        .WithMany("OrganizationPosts")
                        .HasForeignKey("ParentId");

                    b.HasOne("lena.Domains.UserGroup", "UserGroup")
                        .WithOne("OrganizationPost")
                        .HasForeignKey("lena.Domains.OrganizationPost", "UserGroupId");

                    b.Navigation("Creator");

                    b.Navigation("Parent");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("lena.Domains.OrganizationPostHistory", b =>
                {
                    b.HasOne("lena.Domains.User", "Creator")
                        .WithMany("OrganizationPostHistories")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Employee", "Employee")
                        .WithMany("OrganizationPostHistories")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.OrganizationPost", "OrganizationPost")
                        .WithMany("PostHistories")
                        .HasForeignKey("OrganizationPostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Employee");

                    b.Navigation("OrganizationPost");
                });

            modelBuilder.Entity("lena.Domains.PayRequest", b =>
                {
                    b.HasOne("lena.Domains.FinancialTransactionBatch", "FinancialTransactionBatch")
                        .WithOne()
                        .HasForeignKey("lena.Domains.PayRequest", "FinancialTransactionBatchId");

                    b.HasOne("lena.Domains.QualityControl", "QualityControl")
                        .WithOne("PayRequest")
                        .HasForeignKey("lena.Domains.PayRequest", "QualityControlId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FinancialTransactionBatch");

                    b.Navigation("QualityControl");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.PaymentSuggestStatusLog", b =>
                {
                    b.HasOne("lena.Domains.QualityControl", "QualityControl")
                        .WithMany("PaymentSuggestStatusLogs")
                        .HasForeignKey("QualityControlId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "RegisterarUser")
                        .WithMany("PaymentSuggestStatusLogs")
                        .HasForeignKey("RegisterarUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("QualityControl");

                    b.Navigation("RegisterarUser");
                });

            modelBuilder.Entity("lena.Domains.Permission", b =>
                {
                    b.HasOne("lena.Domains.SecurityAction", "SecurityAction")
                        .WithMany("Permissions")
                        .HasForeignKey("SecurityActionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.UserGroup", "UserGroup")
                        .WithMany("Permissions")
                        .HasForeignKey("UserGroupId");

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId");

                    b.Navigation("SecurityAction");

                    b.Navigation("User");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("lena.Domains.PermissionRequest", b =>
                {
                    b.HasOne("lena.Domains.User", "IntendedUser")
                        .WithMany("PermissionRequestIntenders")
                        .HasForeignKey("IntendedUserId");

                    b.HasOne("lena.Domains.User", "RegistrarUser")
                        .WithMany("PermissionRequestRegisterars")
                        .HasForeignKey("RegistrarUserId");

                    b.Navigation("IntendedUser");

                    b.Navigation("RegistrarUser");
                });

            modelBuilder.Entity("lena.Domains.PermissionRequestAction", b =>
                {
                    b.HasOne("lena.Domains.User", "ConfirmationUser")
                        .WithMany("PermissionRequestConfirmators")
                        .HasForeignKey("ConfirmationUserId");

                    b.HasOne("lena.Domains.PermissionRequest", "PermissionRequest")
                        .WithMany("PermissionRequestActions")
                        .HasForeignKey("PermissionRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.SecurityAction", "SecurityAction")
                        .WithMany("PermissionRequestActions")
                        .HasForeignKey("SecurityActionId");

                    b.Navigation("ConfirmationUser");

                    b.Navigation("PermissionRequest");

                    b.Navigation("SecurityAction");
                });

            modelBuilder.Entity("lena.Domains.PlanCode", b =>
                {
                    b.HasOne("lena.Domains.User", "RegisterarUser")
                        .WithMany("PlanCodes")
                        .HasForeignKey("RegisterarUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RegisterarUser");
                });

            modelBuilder.Entity("lena.Domains.Post", b =>
                {
                    b.HasOne("lena.Domains.Post", "ParentPost")
                        .WithMany("ChildPosts")
                        .HasForeignKey("PostId");

                    b.Navigation("ParentPost");
                });

            modelBuilder.Entity("lena.Domains.PriceAnnunciation", b =>
                {
                    b.HasOne("lena.Domains.Cooperator", "Cooperator")
                        .WithMany("PriceAnnunciations")
                        .HasForeignKey("CooperatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "RegisterarUser")
                        .WithMany("PriceAnnunciations")
                        .HasForeignKey("RegisterarUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cooperator");

                    b.Navigation("RegisterarUser");
                });

            modelBuilder.Entity("lena.Domains.PriceAnnunciationItem", b =>
                {
                    b.HasOne("lena.Domains.User", "ConfirmerUser")
                        .WithMany("PriceAnnunciationItems")
                        .HasForeignKey("ConfirmerUserId");

                    b.HasOne("lena.Domains.Currency", "Currency")
                        .WithMany("PriceAnnunciationItems")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.PriceAnnunciation", "PriceAnnunciation")
                        .WithMany("PriceAnnunciationItems")
                        .HasForeignKey("PriceAnnunciationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Stuff", "Stuff")
                        .WithMany("PriceAnnunciationItems")
                        .HasForeignKey("StuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ConfirmerUser");

                    b.Navigation("Currency");

                    b.Navigation("PriceAnnunciation");

                    b.Navigation("Stuff");
                });

            modelBuilder.Entity("lena.Domains.PriceInquiry", b =>
                {
                    b.HasOne("lena.Domains.Cooperator", "Cooperator")
                        .WithMany("PriceInquries")
                        .HasForeignKey("CooperatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Currency", "Currency")
                        .WithMany("PriceInquries")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Stuff", "Stuff")
                        .WithMany("PriceInquries")
                        .HasForeignKey("StuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("PriceInquries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cooperator");

                    b.Navigation("Currency");

                    b.Navigation("Stuff");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.Printer", b =>
                {
                    b.HasOne("lena.Domains.User", "CreatorUser")
                        .WithMany("Printers")
                        .HasForeignKey("CreatorUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatorUser");
                });

            modelBuilder.Entity("lena.Domains.Production", b =>
                {
                    b.HasOne("lena.Domains.ProductionOrder", "ProductionOrder")
                        .WithMany("Productions")
                        .HasForeignKey("ProductionOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.StuffSerial", "StuffSerial")
                        .WithMany("Productions")
                        .HasForeignKey("StuffSerialCode", "StuffSerialStuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductionOrder");

                    b.Navigation("StuffSerial");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.ProductionFaultType", b =>
                {
                    b.HasOne("lena.Domains.Operation", "Operation")
                        .WithMany("ProductionFaultTypes")
                        .HasForeignKey("OperationId");

                    b.Navigation("Operation");
                });

            modelBuilder.Entity("lena.Domains.ProductionLine", b =>
                {
                    b.HasOne("lena.Domains.UserGroup", "AdminUserGroup")
                        .WithMany("ProductionLines")
                        .HasForeignKey("AdminUserGroupId");

                    b.HasOne("lena.Domains.Warehouse", "ConsumeWarehouse")
                        .WithMany("ConsumerProductionLines")
                        .HasForeignKey("ConsumeWarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Department", "Department")
                        .WithMany("ProductionLines")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Warehouse", "ProductWarehouse")
                        .WithMany("ProducerProductionLines")
                        .HasForeignKey("ProductWarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.ProductionLineRepairUnit", "ProductionLineRepairUnit")
                        .WithMany("ProductionLines")
                        .HasForeignKey("ProductionLineRepairUnitId");

                    b.Navigation("AdminUserGroup");

                    b.Navigation("ConsumeWarehouse");

                    b.Navigation("Department");

                    b.Navigation("ProductionLineRepairUnit");

                    b.Navigation("ProductWarehouse");
                });

            modelBuilder.Entity("lena.Domains.ProductionLineEmployeeInterval", b =>
                {
                    b.HasOne("lena.Domains.Employee", "Employee")
                        .WithMany("ProductionLineEmployeeIntervals")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.ProductionLine", "ProductionLine")
                        .WithMany("ProductionLineEmployeeIntervals")
                        .HasForeignKey("ProductionLineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Stuff", "Stuff")
                        .WithMany("ProductionLineEmployeeIntervals")
                        .HasForeignKey("StuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("ProductionLine");

                    b.Navigation("Stuff");
                });

            modelBuilder.Entity("lena.Domains.ProductionLineEmployeeIntervalDetail", b =>
                {
                    b.HasOne("lena.Domains.Operation", "Operation")
                        .WithMany("ProductionLineEmployeeIntervalDetails")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.ProductionLineEmployeeInterval", "ProductionLineEmployeeInterval")
                        .WithMany("ProductionLineEmployeeIntervalDetails")
                        .HasForeignKey("ProductionLineEmployeeIntervalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Operation");

                    b.Navigation("ProductionLineEmployeeInterval");
                });

            modelBuilder.Entity("lena.Domains.ProductionLineProductionStep", b =>
                {
                    b.HasOne("lena.Domains.ProductionLine", "ProductionLine")
                        .WithMany("ProductionLineProductionSteps")
                        .HasForeignKey("ProductionLineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.ProductionStep", "ProductionStep")
                        .WithMany("ProductionLineProductionSteps")
                        .HasForeignKey("ProductionStepId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductionLine");

                    b.Navigation("ProductionStep");
                });

            modelBuilder.Entity("lena.Domains.ProductionLineRepairUnit", b =>
                {
                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("ProductionLineRepairUnits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Warehouse", "Warehouse")
                        .WithMany("ProductionLineRepairUnits")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("lena.Domains.ProductionLineWorkShift", b =>
                {
                    b.HasOne("lena.Domains.ProductionLine", "ProductionLine")
                        .WithMany("ProductionLineWorkShifts")
                        .HasForeignKey("ProductionLineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.WorkShift", "WorkShift")
                        .WithMany("ProductionLineWorkShifts")
                        .HasForeignKey("WorkShiftId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductionLine");

                    b.Navigation("WorkShift");
                });

            modelBuilder.Entity("lena.Domains.ProductionMaterialRequestDetail", b =>
                {
                    b.HasOne("lena.Domains.ProductionMaterialRequest", "ProductionMaterialRequest")
                        .WithMany("ProductionMaterialRequestDetails")
                        .HasForeignKey("ProductionMaterialRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.ProductionOrder", "ProductionOrder")
                        .WithMany("ProductionMaterialRequestDetails")
                        .HasForeignKey("ProductionOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductionMaterialRequest");

                    b.Navigation("ProductionOrder");
                });

            modelBuilder.Entity("lena.Domains.ProductionOperation", b =>
                {
                    b.HasOne("lena.Domains.FaildProductionOperation", "FaildProductionOperation")
                        .WithOne("BaseProductionOperation")
                        .HasForeignKey("lena.Domains.ProductionOperation", "FaildProductionOperationId");

                    b.HasOne("lena.Domains.Operation", "Operation")
                        .WithMany("ProductionOperations")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Production", "Production")
                        .WithMany("ProductionOperations")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.ProductionOperationEmployeeGroup", "ProductionOperationEmployeeGroup")
                        .WithMany("ProductionOperations")
                        .HasForeignKey("ProductionOperationEmployeeGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.ProductionOperator", "ProductionOperator")
                        .WithMany("ProductionOperations")
                        .HasForeignKey("ProductionOperatorId");

                    b.HasOne("lena.Domains.ProductionTerminal", "ProductionTerminal")
                        .WithMany("ProductionOperations")
                        .HasForeignKey("ProductionTerminalId");

                    b.HasOne("lena.Domains.TransactionBatch", "TransactionBatch")
                        .WithOne()
                        .HasForeignKey("lena.Domains.ProductionOperation", "TransactionBatchId");

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FaildProductionOperation");

                    b.Navigation("Operation");

                    b.Navigation("Production");

                    b.Navigation("ProductionOperationEmployeeGroup");

                    b.Navigation("ProductionOperator");

                    b.Navigation("ProductionTerminal");

                    b.Navigation("TransactionBatch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.ProductionOperationEmployee", b =>
                {
                    b.HasOne("lena.Domains.Employee", "Employee")
                        .WithMany("ProductionOperationEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.ProductionOperationEmployeeGroup", "GetProductionOperationEmployeeGroup")
                        .WithMany("ProductionOperationEmployees")
                        .HasForeignKey("ProductionOperationEmployeeGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("GetProductionOperationEmployeeGroup");
                });

            modelBuilder.Entity("lena.Domains.ProductionOperator", b =>
                {
                    b.HasOne("lena.Domains.MachineTypeOperatorType", "MachineTypeOperatorType")
                        .WithMany("ProductionOperators")
                        .HasForeignKey("MachineTypeOperatorTypeId");

                    b.HasOne("lena.Domains.Operation", "Operation")
                        .WithMany("ProductionOperators")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.OperationSequence", "OperationSequence")
                        .WithMany("ProductionOperators")
                        .HasForeignKey("OperationSequenceId");

                    b.HasOne("lena.Domains.OperatorType", "OperatorType")
                        .WithMany("ProductionOperators")
                        .HasForeignKey("OperatorTypeId");

                    b.HasOne("lena.Domains.ProductionOrder", "ProductionOrder")
                        .WithMany("ProductionOperators")
                        .HasForeignKey("ProductionOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MachineTypeOperatorType");

                    b.Navigation("Operation");

                    b.Navigation("OperationSequence");

                    b.Navigation("OperatorType");

                    b.Navigation("ProductionOrder");
                });

            modelBuilder.Entity("lena.Domains.ProductionOperatorEmployeeBan", b =>
                {
                    b.HasOne("lena.Domains.Employee", "Employee")
                        .WithMany("ProductionOperatorEmployeeBans")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.ProductionOperator", "ProductionOperator")
                        .WithMany("ProductionOperatorEmployeeBans")
                        .HasForeignKey("ProductionOperatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("ProductionOperatorEmployeeBans")
                        .HasForeignKey("RevokeUserId");

                    b.Navigation("Employee");

                    b.Navigation("ProductionOperator");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.ProductionOperatorMachineEmployee", b =>
                {
                    b.HasOne("lena.Domains.Employee", "Employee")
                        .WithMany("ProductionOperatorEmployees")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("lena.Domains.Machine", "Machine")
                        .WithMany("ProductionOperatorMachineEmployees")
                        .HasForeignKey("MachineId");

                    b.HasOne("lena.Domains.ProductionOperator", "ProductionOperator")
                        .WithMany("ProductionOperatorMachineEmployees")
                        .HasForeignKey("ProductionOperatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.ProductionTerminal", "ProductionTerminal")
                        .WithMany("ProductionOperatorMachineEmployees")
                        .HasForeignKey("ProductionTerminalId");

                    b.Navigation("Employee");

                    b.Navigation("Machine");

                    b.Navigation("ProductionOperator");

                    b.Navigation("ProductionTerminal");
                });

            modelBuilder.Entity("lena.Domains.ProductionOrderSummary", b =>
                {
                    b.HasOne("lena.Domains.ProductionOrder", "ProductionOrder")
                        .WithOne("ProductionOrderSummary")
                        .HasForeignKey("lena.Domains.ProductionOrderSummary", "ProductionOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductionOrder");
                });

            modelBuilder.Entity("lena.Domains.ProductionPerformanceInfo", b =>
                {
                    b.HasOne("lena.Domains.User", "ConfirmatorUser")
                        .WithMany()
                        .HasForeignKey("ConfirmatorUserId");

                    b.HasOne("lena.Domains.Department", "Department")
                        .WithMany("ProductionPerformanceInfoes")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("lena.Domains.ProductionOrder", "ProductionOrder")
                        .WithMany("ProductionPerformanceInfoes")
                        .HasForeignKey("ProductionOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "RegistratorUser")
                        .WithMany()
                        .HasForeignKey("RegistratorUserId");

                    b.Navigation("ConfirmatorUser");

                    b.Navigation("Department");

                    b.Navigation("ProductionOrder");

                    b.Navigation("RegistratorUser");
                });

            modelBuilder.Entity("lena.Domains.ProductionPlanDetailLevel", b =>
                {
                    b.HasOne("lena.Domains.ProductionPlanDetailLevel", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("lena.Domains.ProductionPlanDetailSummary", b =>
                {
                    b.HasOne("lena.Domains.ProductionPlanDetail", "ProductionPlanDetail")
                        .WithOne("ProductionPlanDetailSummary")
                        .HasForeignKey("lena.Domains.ProductionPlanDetailSummary", "ProductionPlanDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductionPlanDetail");
                });

            modelBuilder.Entity("lena.Domains.ProductionPlanSummary", b =>
                {
                    b.HasOne("lena.Domains.ProductionPlan", "ProductionPlan")
                        .WithOne("ProductionPlanSummary")
                        .HasForeignKey("lena.Domains.ProductionPlanSummary", "ProductionPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductionPlan");
                });

            modelBuilder.Entity("lena.Domains.ProductionRequestSummary", b =>
                {
                    b.HasOne("lena.Domains.ProductionRequest", "ProductionRequest")
                        .WithOne("ProductionRequestSummary")
                        .HasForeignKey("lena.Domains.ProductionRequestSummary", "ProductionRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductionRequest");
                });

            modelBuilder.Entity("lena.Domains.ProductionScheduleSummary", b =>
                {
                    b.HasOne("lena.Domains.ProductionSchedule", "ProductionSchedule")
                        .WithOne("ProductionScheduleSummary")
                        .HasForeignKey("lena.Domains.ProductionScheduleSummary", "ProductionScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductionSchedule");
                });

            modelBuilder.Entity("lena.Domains.ProductionStuffDetail", b =>
                {
                    b.HasOne("lena.Domains.Production", "Production")
                        .WithMany("ProductionStuffDetails")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.ProductionOperation", "ProductionOperation")
                        .WithMany("ProductionStuffDetails")
                        .HasForeignKey("ProductionOperationId");

                    b.HasOne("lena.Domains.Stuff", "Stuff")
                        .WithMany("ProductionStuffDetails")
                        .HasForeignKey("StuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Unit", "Unit")
                        .WithMany("ProductionStuffDetails")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Warehouse", "Warehouse")
                        .WithMany("ProductionStuffDetails")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.StuffSerial", "StuffSerial")
                        .WithMany("ProductionStuffDetails")
                        .HasForeignKey("StuffSerialCode", "StuffId");

                    b.Navigation("Production");

                    b.Navigation("ProductionOperation");

                    b.Navigation("Stuff");

                    b.Navigation("StuffSerial");

                    b.Navigation("Unit");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("lena.Domains.ProductionTerminal", b =>
                {
                    b.HasOne("lena.Domains.Employee", "Employee")
                        .WithOne("ProductionTerminal")
                        .HasForeignKey("lena.Domains.ProductionTerminal", "EmployeeId");

                    b.HasOne("lena.Domains.ProductionLine", "ProductionLine")
                        .WithMany("ProductionTerminals")
                        .HasForeignKey("ProductionLineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("ProductionLine");
                });

            modelBuilder.Entity("lena.Domains.ProjectERP", b =>
                {
                    b.HasOne("lena.Domains.User", "CreatorUser")
                        .WithMany("ProjectERPs")
                        .HasForeignKey("CreatorUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Cooperator", "Customer")
                        .WithMany("ProjectERPs")
                        .HasForeignKey("CustomerId");

                    b.HasOne("lena.Domains.ProjectERPCategory", "ProjectERPCategory")
                        .WithMany("ProjectERPs")
                        .HasForeignKey("ProjectERPCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.ProjectERPPhase", "ProjectERPPhase")
                        .WithMany("ProjectERPs")
                        .HasForeignKey("ProjectERPPhaseId");

                    b.HasOne("lena.Domains.ProjectERPType", "ProjectERPType")
                        .WithMany("ProjectERPs")
                        .HasForeignKey("ProjectERPTypeId");

                    b.HasOne("lena.Domains.Stuff", "Stuff")
                        .WithMany("ProjectERPs")
                        .HasForeignKey("StuffId");

                    b.Navigation("CreatorUser");

                    b.Navigation("Customer");

                    b.Navigation("ProjectERPCategory");

                    b.Navigation("ProjectERPPhase");

                    b.Navigation("ProjectERPType");

                    b.Navigation("Stuff");
                });

            modelBuilder.Entity("lena.Domains.ProjectERPDocument", b =>
                {
                    b.HasOne("lena.Domains.ProjectERPDocumentType", "ProjectERPDocumentType")
                        .WithMany("ProjectERPDocuments")
                        .HasForeignKey("ProjectERPDocumentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.ProjectERP", "ProjectERP")
                        .WithMany("ProjectERPDocuments")
                        .HasForeignKey("ProjectERPId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", null)
                        .WithMany("ProjectERPDocuments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProjectERP");

                    b.Navigation("ProjectERPDocumentType");
                });

            modelBuilder.Entity("lena.Domains.ProjectERPEvent", b =>
                {
                    b.HasOne("lena.Domains.Employee", "AudienceEmployee")
                        .WithMany("ProjectERPEvents")
                        .HasForeignKey("AudienceEmployeeId");

                    b.HasOne("lena.Domains.ProjectERPEventActionType", null)
                        .WithMany("ProjectERPEvents")
                        .HasForeignKey("ProjectERPEventActionTypeId");

                    b.HasOne("lena.Domains.ProjectERPEventCategory", "ProjectERPEventCategory")
                        .WithMany("ProjectERPEvents")
                        .HasForeignKey("ProjectERPEventCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.ProjectERP", "ProjectERP")
                        .WithMany("ProjectERPEvents")
                        .HasForeignKey("ProjectERPId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "RegisterUser")
                        .WithMany("ProjectERPEventRecords")
                        .HasForeignKey("RegisterUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AudienceEmployee");

                    b.Navigation("ProjectERP");

                    b.Navigation("ProjectERPEventCategory");

                    b.Navigation("RegisterUser");
                });

            modelBuilder.Entity("lena.Domains.ProjectERPEventDocument", b =>
                {
                    b.HasOne("lena.Domains.User", "CreatorUser")
                        .WithMany("ProjectERPEventDocuments")
                        .HasForeignKey("CreatorUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.ProjectERPEvent", "ProjectERPEvent")
                        .WithMany("ProjectERPEventDocuments")
                        .HasForeignKey("ProjectERPEventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatorUser");

                    b.Navigation("ProjectERPEvent");
                });

            modelBuilder.Entity("lena.Domains.ProjectERPLabelLog", b =>
                {
                    b.HasOne("lena.Domains.ProjectERP", "ProjectERP")
                        .WithMany("ProjectERPLabelLogs")
                        .HasForeignKey("ProjectERPId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.ProjectERPLabel", "ProjectERPLabel")
                        .WithMany("ProjectERPLabelLogs")
                        .HasForeignKey("ProjectERPLabelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProjectERP");

                    b.Navigation("ProjectERPLabel");
                });

            modelBuilder.Entity("lena.Domains.ProjectERPResponsibleEmployee", b =>
                {
                    b.HasOne("lena.Domains.ProjectERP", "ProjectERP")
                        .WithMany("ProjectERPResponsibleEmployees")
                        .HasForeignKey("ProjectERPId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Employee", "ResponsibleEmployee")
                        .WithMany("ProjectERPResponsibleEmployees")
                        .HasForeignKey("ResponsibleEmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProjectERP");

                    b.Navigation("ResponsibleEmployee");
                });

            modelBuilder.Entity("lena.Domains.ProjectERPTask", b =>
                {
                    b.HasOne("lena.Domains.Employee", "AssigneeEmployee")
                        .WithMany("ProjectERPTasks")
                        .HasForeignKey("AssigneeEmployeeId");

                    b.HasOne("lena.Domains.User", "CreatorUser")
                        .WithMany("ProjectERPTasks")
                        .HasForeignKey("CreatorUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.ProjectERP", "ProjectERP")
                        .WithMany("ProjectERPTasks")
                        .HasForeignKey("ProjectERPId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.ProjectERPTaskCategory", "ProjectERPTaskCategory")
                        .WithMany("ProjectERPTasks")
                        .HasForeignKey("ProjectERPTaskCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssigneeEmployee");

                    b.Navigation("CreatorUser");

                    b.Navigation("ProjectERP");

                    b.Navigation("ProjectERPTaskCategory");
                });

            modelBuilder.Entity("lena.Domains.ProjectERPTaskDependency", b =>
                {
                    b.HasOne("lena.Domains.ProjectERPTask", "PredecessorProjectERPTask")
                        .WithMany("PredecessorProjectERPTaskDependency")
                        .HasForeignKey("PredecessorProjectERPTaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.ProjectERPTask", "ProjectERPTask")
                        .WithMany("ProjectERPTaskDependencies")
                        .HasForeignKey("ProjectERPTaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PredecessorProjectERPTask");

                    b.Navigation("ProjectERPTask");
                });

            modelBuilder.Entity("lena.Domains.ProjectERPTaskDocument", b =>
                {
                    b.HasOne("lena.Domains.User", "CreatorUser")
                        .WithMany("ProjectERPTaskDocuments")
                        .HasForeignKey("CreatorUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.ProjectERPTask", "ProjectERPTask")
                        .WithMany("ProjectERPTaskDocuments")
                        .HasForeignKey("ProjectERPTaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatorUser");

                    b.Navigation("ProjectERPTask");
                });

            modelBuilder.Entity("lena.Domains.ProjectERPTaskLabelLog", b =>
                {
                    b.HasOne("lena.Domains.ProjectERPLabel", "ProjectERPLabel")
                        .WithMany("ProjectERPTaskLabelLogs")
                        .HasForeignKey("ProjectERPLabelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.ProjectERPTask", "ProjectERPTask")
                        .WithMany("ProjectERPTaskLabelLogs")
                        .HasForeignKey("ProjectERPTaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProjectERPLabel");

                    b.Navigation("ProjectERPTask");
                });

            modelBuilder.Entity("lena.Domains.ProjectRelatedPeople", b =>
                {
                    b.HasOne("lena.Domains.Project", "Project")
                        .WithMany("ProjectRelatedPeoples")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("lena.Domains.Proposal", b =>
                {
                    b.HasOne("lena.Domains.ProposalType", "ProposalType")
                        .WithMany("Proposals")
                        .HasForeignKey("ProposalTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("Proposals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", null)
                        .WithMany("ProposalRecommenderUsers")
                        .HasForeignKey("UserId1");

                    b.Navigation("ProposalType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.ProposalQAReview", b =>
                {
                    b.HasOne("lena.Domains.Proposal", "Proposal")
                        .WithMany("QAReviews")
                        .HasForeignKey("ProposalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "ResponsibleUser")
                        .WithMany("ProposalResponsibles")
                        .HasForeignKey("ResponsibleUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("ProposalQAReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Proposal");

                    b.Navigation("ResponsibleUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.ProposalReviewCommittee", b =>
                {
                    b.HasOne("lena.Domains.Proposal", "Proposal")
                        .WithMany("ReviewCommittees")
                        .HasForeignKey("ProposalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "ResponsibleUser")
                        .WithMany("ProposalReviewCommitteeResponsibles")
                        .HasForeignKey("ResponsibleUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("ProposalReviewCommittees")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Proposal");

                    b.Navigation("ResponsibleUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.ProposalType", b =>
                {
                    b.HasOne("lena.Domains.User", null)
                        .WithMany("ProposalTypes")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("lena.Domains.ProviderHowToBuy", b =>
                {
                    b.HasOne("lena.Domains.HowToBuy", "HowToBuy")
                        .WithMany("ProviderHowToBuys")
                        .HasForeignKey("HowToBuyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Cooperator", "Provider")
                        .WithMany("ProviderHowToBuys")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("HowToBuy");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("lena.Domains.ProvisionersCart", b =>
                {
                    b.HasOne("lena.Domains.User", "ResponsibleEmployee")
                        .WithMany("ProvisionersCarts")
                        .HasForeignKey("ResponsibleEmployeeId");

                    b.HasOne("lena.Domains.Supplier", "Supplier")
                        .WithMany("ProvisionersCarts")
                        .HasForeignKey("SupplierId");

                    b.Navigation("ResponsibleEmployee");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("lena.Domains.ProvisionersCartItem", b =>
                {
                    b.HasOne("lena.Domains.Cooperator", "Provider")
                        .WithMany("ProvisionersCartItems")
                        .HasForeignKey("ProviderId");

                    b.HasOne("lena.Domains.ProvisionersCart", "ProvisionersCart")
                        .WithMany("ProvisionersCartItems")
                        .HasForeignKey("ProvisionersCartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.PurchaseRequest", "PurchaseRequest")
                        .WithOne("ProvisionersCartItem")
                        .HasForeignKey("lena.Domains.ProvisionersCartItem", "PurchaseRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Provider");

                    b.Navigation("ProvisionersCart");

                    b.Navigation("PurchaseRequest");
                });

            modelBuilder.Entity("lena.Domains.ProvisionersCartItemDetail", b =>
                {
                    b.HasOne("lena.Domains.Cooperator", "Provider")
                        .WithMany("ProvisionersCartItemDetails")
                        .HasForeignKey("ProviderId");

                    b.HasOne("lena.Domains.ProvisionersCartItem", "ProvisionersCartItem")
                        .WithMany("ProvisionersCartItemDetails")
                        .HasForeignKey("ProvisionersCartItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.PurchaseOrder", "PurchaseOrder")
                        .WithOne()
                        .HasForeignKey("lena.Domains.ProvisionersCartItemDetail", "PurchaseOrderId");

                    b.Navigation("Provider");

                    b.Navigation("ProvisionersCartItem");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("lena.Domains.PurchaseOrderCost", b =>
                {
                    b.HasOne("lena.Domains.FinancialDocumentCost", "FinancialDocumentCost")
                        .WithMany("PurchaseOrderCosts")
                        .HasForeignKey("FinancialDocumentCostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.PurchaseOrderGroup", "PurchaseOrderGroup")
                        .WithMany("PurchaseOrderCosts")
                        .HasForeignKey("PurchaseOrderGroupId");

                    b.HasOne("lena.Domains.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderCosts")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FinancialDocumentCost");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("PurchaseOrderGroup");
                });

            modelBuilder.Entity("lena.Domains.PurchaseOrderDetailSummary", b =>
                {
                    b.HasOne("lena.Domains.PurchaseOrderDetail", "PurchaseOrderDetail")
                        .WithOne("PurchaseOrderDetailSummary")
                        .HasForeignKey("lena.Domains.PurchaseOrderDetailSummary", "PurchaseOrderDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PurchaseOrderDetail");
                });

            modelBuilder.Entity("lena.Domains.PurchaseOrderDiscount", b =>
                {
                    b.HasOne("lena.Domains.FinancialDocumentDiscount", "FinancialDocumentDiscount")
                        .WithMany("PurchaseOrderDiscounts")
                        .HasForeignKey("FinancialDocumentDiscountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.PurchaseOrderGroup", "PurchaseOrderGroup")
                        .WithMany("PurchaseOrderDiscounts")
                        .HasForeignKey("PurchaseOrderGroupId");

                    b.HasOne("lena.Domains.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderDiscounts")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FinancialDocumentDiscount");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("PurchaseOrderGroup");
                });

            modelBuilder.Entity("lena.Domains.PurchaseOrderStep", b =>
                {
                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("PurchaseOrderSteps")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.PurchaseOrderStepDetail", b =>
                {
                    b.HasOne("lena.Domains.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderStepDetails")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.PurchaseOrderStep", "PurchaseOrderStep")
                        .WithMany("PurchaseOrderStepDetails")
                        .HasForeignKey("PurchaseOrderStepId");

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("PurchaseOrderStepDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PurchaseOrder");

                    b.Navigation("PurchaseOrderStep");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.PurchaseOrderSummary", b =>
                {
                    b.HasOne("lena.Domains.PurchaseOrder", "PurchaseOrder")
                        .WithOne("PurchaseOrderSummary")
                        .HasForeignKey("lena.Domains.PurchaseOrderSummary", "PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("lena.Domains.PurchaseRequestEditLog", b =>
                {
                    b.HasOne("lena.Domains.PurchaseRequest", "PurchaseRequest")
                        .WithMany("PurchaseRequestEditLogs")
                        .HasForeignKey("PurchaseRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("PurchaseRequestEditLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PurchaseRequest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.PurchaseRequestStep", b =>
                {
                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("PurchaseRequestSteps")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.PurchaseRequestStepDetail", b =>
                {
                    b.HasOne("lena.Domains.PurchaseRequest", "PurchaseRequest")
                        .WithMany("PurchaseRequestStepDetails")
                        .HasForeignKey("PurchaseRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.PurchaseRequestStep", "PurchaseRequestStep")
                        .WithMany("PurchaseRequestStepDetails")
                        .HasForeignKey("PurchaseRequestStepId");

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("PurchaseRequestStepDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PurchaseRequest");

                    b.Navigation("PurchaseRequestStep");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.PurchaseRequestSummary", b =>
                {
                    b.HasOne("lena.Domains.PurchaseRequest", "PurchaseRequest")
                        .WithOne("PurchaseRequestSummary")
                        .HasForeignKey("lena.Domains.PurchaseRequestSummary", "PurchaseRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PurchaseRequest");
                });

            modelBuilder.Entity("lena.Domains.QAReviewEmployeeComplain", b =>
                {
                    b.HasOne("lena.Domains.User", "ResponsibleUser")
                        .WithMany("QAReviewResponsibleUserEmployeeComplains")
                        .HasForeignKey("ActionResponsibleUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "CreatorUser")
                        .WithMany("QAReviewCreatorUserEmployeeComplains")
                        .HasForeignKey("CreatorUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.EmployeeComplainItem", "EmployeeComplainItem")
                        .WithMany("QAReviewEmployeeComplains")
                        .HasForeignKey("EmployeeComplainItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatorUser");

                    b.Navigation("EmployeeComplainItem");

                    b.Navigation("ResponsibleUser");
                });

            modelBuilder.Entity("lena.Domains.QualityControlAccepter", b =>
                {
                    b.HasOne("lena.Domains.UserGroup", "UserGroup")
                        .WithMany("QualityControlAccepters")
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("lena.Domains.QualityControlConfirmationTest", b =>
                {
                    b.HasOne("lena.Domains.QualityControlConfirmation", "QualityControlConfirmation")
                        .WithMany("QualityControlConfirmationTests")
                        .HasForeignKey("QualityControlConfirmationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.TestCondition", "TestCondition")
                        .WithMany("QualityControlConfirmationTests")
                        .HasForeignKey("TestConditionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("QualityControlConfirmationTests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.StuffQualityControlTest", "StuffQualityControlTest")
                        .WithMany("QualityControlConfirmationTests")
                        .HasForeignKey("StuffId", "QualityControlTestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("QualityControlConfirmation");

                    b.Navigation("StuffQualityControlTest");

                    b.Navigation("TestCondition");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.QualityControlConfirmationTestItem", b =>
                {
                    b.HasOne("lena.Domains.QualityControlConfirmationTest", "QualityControlConfirmationTest")
                        .WithMany("QualityControlConfirmationTestItems")
                        .HasForeignKey("QualityControlConfirmationTestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "TesterUser")
                        .WithMany("QualityControlConfirmationTestItems")
                        .HasForeignKey("TesterUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("QualityControlConfirmationTest");

                    b.Navigation("TesterUser");
                });

            modelBuilder.Entity("lena.Domains.QualityControlSample", b =>
                {
                    b.HasOne("lena.Domains.QualityControlItem", "QualityControlItem")
                        .WithMany("QualityControlSamples")
                        .HasForeignKey("QualityControlItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "StatusChangerUser")
                        .WithMany("StatusChangerQualityControlSample")
                        .HasForeignKey("StatusChangerUserId");

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("QualityControlSamples")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("QualityControlItem");

                    b.Navigation("StatusChangerUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.QualityControlSummary", b =>
                {
                    b.HasOne("lena.Domains.QualityControl", "QualityControl")
                        .WithOne("QualityControlSummary")
                        .HasForeignKey("lena.Domains.QualityControlSummary", "QualityControlId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("QualityControl");
                });

            modelBuilder.Entity("lena.Domains.QualityControlTestCondition", b =>
                {
                    b.HasOne("lena.Domains.QualityControlTest", "QualityControlTest")
                        .WithMany("QualityControlTestConditions")
                        .HasForeignKey("QualityControlTestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.TestCondition", "TestCondition")
                        .WithMany("QualityControlTestConditions")
                        .HasForeignKey("TestConditionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("QualityControlTest");

                    b.Navigation("TestCondition");
                });

            modelBuilder.Entity("lena.Domains.QualityControlTestEquipment", b =>
                {
                    b.HasOne("lena.Domains.QualityControlTest", "QualityControlTest")
                        .WithMany("QualityControlTestEquipments")
                        .HasForeignKey("QualityControlTestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.TestEquipment", "TestEquipment")
                        .WithMany("QualityControlTestEquipments")
                        .HasForeignKey("TestEquipmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("QualityControlTest");

                    b.Navigation("TestEquipment");
                });

            modelBuilder.Entity("lena.Domains.QualityControlTestImportanceDegree", b =>
                {
                    b.HasOne("lena.Domains.QualityControlTest", "QualityControlTest")
                        .WithMany("QualityControlTestImportanceDegrees")
                        .HasForeignKey("QualityControlTestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.TestImportanceDegree", "TestImportanceDegree")
                        .WithMany("QualityControlTestImportanceDegrees")
                        .HasForeignKey("TestImportanceDegreeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("QualityControlTest");

                    b.Navigation("TestImportanceDegree");
                });

            modelBuilder.Entity("lena.Domains.QualityControlTestOperation", b =>
                {
                    b.HasOne("lena.Domains.QualityControlTest", "QualityControlTest")
                        .WithMany("QualityControlTestOperations")
                        .HasForeignKey("QualityControlTestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.TestOperation", "TestOperation")
                        .WithMany("QualityControlTestOperations")
                        .HasForeignKey("TestOperationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("QualityControlTest");

                    b.Navigation("TestOperation");
                });

            modelBuilder.Entity("lena.Domains.RepairProduction", b =>
                {
                    b.HasOne("lena.Domains.Production", "Production")
                        .WithMany("RepairProductions")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.RepairProduction", "BaseRepairProduction")
                        .WithOne("ReferenceRepairProduction")
                        .HasForeignKey("lena.Domains.RepairProduction", "ReferenceRepairProductionId");

                    b.HasOne("lena.Domains.ReturnOfSale", "ReturnOfSale")
                        .WithMany("RepairProductions")
                        .HasForeignKey("ReturnOfSaleId");

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BaseRepairProduction");

                    b.Navigation("Production");

                    b.Navigation("ReturnOfSale");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.ReportPrintSetting", b =>
                {
                    b.HasOne("lena.Domains.Printer", "Printer")
                        .WithMany("PrinterSettings")
                        .HasForeignKey("PrinterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Report", "Report")
                        .WithMany("PrinterSettings")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("PrinterSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Printer");

                    b.Navigation("Report");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.ReportVersion", b =>
                {
                    b.HasOne("lena.Domains.User", "CreatorUser")
                        .WithMany("ReportVersions")
                        .HasForeignKey("CreatorUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Report", "Report")
                        .WithMany("ReportVersions")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatorUser");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("lena.Domains.ResponsibleDepartment", b =>
                {
                    b.HasOne("lena.Domains.EmployeeComplainDepartment", "EmployeeComplainDepartment")
                        .WithMany("ResponsibleDepartments")
                        .HasForeignKey("EmployeeComplainDepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EmployeeComplainDepartment");
                });

            modelBuilder.Entity("lena.Domains.ReturnOfSaleSummary", b =>
                {
                    b.HasOne("lena.Domains.ReturnOfSale", "ReturnOfSale")
                        .WithOne("ReturnOfSaleSummary")
                        .HasForeignKey("lena.Domains.ReturnOfSaleSummary", "ReturnOfSaleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ReturnOfSale");
                });

            modelBuilder.Entity("lena.Domains.ReturnSerialToPreviousStateRequest", b =>
                {
                    b.HasOne("lena.Domains.User", "ConfirmerUser")
                        .WithMany("ConfirmerSerilReturnRequests")
                        .HasForeignKey("ConfirmerUserId");

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("DemandantSerialReturnRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "WrongDoerUser")
                        .WithMany("WrongDoerSerilReturnRequests")
                        .HasForeignKey("WrongDoerUserId");

                    b.HasOne("lena.Domains.StuffSerial", "StuffSerial")
                        .WithMany("ReturnSerialToPreviousStateRequests")
                        .HasForeignKey("StuffSerialCode", "StuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ConfirmerUser");

                    b.Navigation("StuffSerial");

                    b.Navigation("User");

                    b.Navigation("WrongDoerUser");
                });

            modelBuilder.Entity("lena.Domains.RialRate", b =>
                {
                    b.HasOne("lena.Domains.FinancialTransaction", "FinancialTransaction")
                        .WithMany("RialRates")
                        .HasForeignKey("FinancialTransactionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.RialRate", "ReferenceRialRate")
                        .WithMany("ReferencedRialRates")
                        .HasForeignKey("ReferenceRialRateId");

                    b.Navigation("FinancialTransaction");

                    b.Navigation("ReferenceRialRate");
                });

            modelBuilder.Entity("lena.Domains.Risk", b =>
                {
                    b.HasOne("lena.Domains.CargoItem", "CargoItem")
                        .WithMany("Risks")
                        .HasForeignKey("CargoItemId");

                    b.HasOne("lena.Domains.User", "CreatorUser")
                        .WithMany("Risks")
                        .HasForeignKey("CreatorUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.RiskResolve", "LatestRiskResolve")
                        .WithOne()
                        .HasForeignKey("lena.Domains.Risk", "LatestRiskResolveId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.RiskStatus", "LatestRiskStatus")
                        .WithOne()
                        .HasForeignKey("lena.Domains.Risk", "LatestRiskStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.PurchaseOrder", "PurchaseOrder")
                        .WithMany("Risks")
                        .HasForeignKey("PurchaseOrderId");

                    b.HasOne("lena.Domains.PurchaseRequest", "PurchaseRequest")
                        .WithMany("Risks")
                        .HasForeignKey("PurchaseRequestId");

                    b.Navigation("CargoItem");

                    b.Navigation("CreatorUser");

                    b.Navigation("LatestRiskResolve");

                    b.Navigation("LatestRiskStatus");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("PurchaseRequest");
                });

            modelBuilder.Entity("lena.Domains.RiskResolve", b =>
                {
                    b.HasOne("lena.Domains.User", "CreatorUser")
                        .WithMany("RiskResolveCreator")
                        .HasForeignKey("CreatorUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "ReviewerUser")
                        .WithMany("RiskResolveReviewer")
                        .HasForeignKey("ReviewerUserId");

                    b.HasOne("lena.Domains.Risk", "Risk")
                        .WithMany("RiskResolves")
                        .HasForeignKey("RiskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatorUser");

                    b.Navigation("ReviewerUser");

                    b.Navigation("Risk");
                });

            modelBuilder.Entity("lena.Domains.RiskStatus", b =>
                {
                    b.HasOne("lena.Domains.Risk", "Risk")
                        .WithMany("RiskStatuses")
                        .HasForeignKey("RiskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.RiskResolve", "RiskResolve")
                        .WithOne("RiskStatus")
                        .HasForeignKey("lena.Domains.RiskStatus", "RiskResolveId");

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("RiskStatuses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.RiskParameter", "RiskParameter")
                        .WithMany("RiskStatuses")
                        .HasForeignKey("OccurrenceSeverityStatus", "OccurrenceProbabilityStatus")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Risk");

                    b.Navigation("RiskParameter");

                    b.Navigation("RiskResolve");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.ScrumEntity", b =>
                {
                    b.HasOne("lena.Domains.BaseEntity", "BaseEntity")
                        .WithMany("ScrumEntities")
                        .HasForeignKey("BaseEntityId");

                    b.HasOne("lena.Domains.Department", "Department")
                        .WithMany("ScrumEntities")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BaseEntity");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("lena.Domains.ScrumEntityComment", b =>
                {
                    b.HasOne("lena.Domains.ScrumEntity", "ScrumEntity")
                        .WithMany("ScrumEntityComments")
                        .HasForeignKey("ScrumEntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("ScrumEntityComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ScrumEntity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.ScrumEntityDependency", b =>
                {
                    b.HasOne("lena.Domains.ScrumEntity", "NextScrumEntity")
                        .WithMany("RequisiteScrumEntityDependencies")
                        .HasForeignKey("NextScrumEntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.ScrumEntity", "RequisiteScrumEntity")
                        .WithMany("NextScrumEntityDependencies")
                        .HasForeignKey("RequisiteScrumEntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("NextScrumEntity");

                    b.Navigation("RequisiteScrumEntity");
                });

            modelBuilder.Entity("lena.Domains.ScrumEntityDocument", b =>
                {
                    b.HasOne("lena.Domains.DocumentType", "DocumentType")
                        .WithMany("ScrumEntityDocuments")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.ScrumEntity", "ScrumEntity")
                        .WithMany("ScrumEntityDocuments")
                        .HasForeignKey("ScrumEntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DocumentType");

                    b.Navigation("ScrumEntity");
                });

            modelBuilder.Entity("lena.Domains.ScrumEntityLog", b =>
                {
                    b.HasOne("lena.Domains.ScrumEntity", "ScrumEntity")
                        .WithMany("ScrumEntityLogs")
                        .HasForeignKey("ScrumEntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("ScrumEntityLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ScrumEntity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.SecurityAction", b =>
                {
                    b.HasOne("lena.Domains.SecurityActionGroup", "SecurityActionGroup")
                        .WithMany("SecurityActions")
                        .HasForeignKey("SecurityActionGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SecurityActionGroup");
                });

            modelBuilder.Entity("lena.Domains.SendPermissionSummary", b =>
                {
                    b.HasOne("lena.Domains.SendPermission", "SendPermission")
                        .WithOne("SendPermissionSummary")
                        .HasForeignKey("lena.Domains.SendPermissionSummary", "SendPermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SendPermission");
                });

            modelBuilder.Entity("lena.Domains.SerialBuffer", b =>
                {
                    b.HasOne("lena.Domains.BaseTransaction", "BaseTransaction")
                        .WithOne("SerialBuffer")
                        .HasForeignKey("lena.Domains.SerialBuffer", "BaseTransactionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.ProductionTerminal", "ProductionTerminal")
                        .WithMany("SerialBuffers")
                        .HasForeignKey("ProductionTerminalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BaseTransaction");

                    b.Navigation("ProductionTerminal");
                });

            modelBuilder.Entity("lena.Domains.SerialFailedOperation", b =>
                {
                    b.HasOne("lena.Domains.User", "ConfirmUser")
                        .WithMany("ConfirmSerialFailedOperations")
                        .HasForeignKey("ConfirmUserId");

                    b.HasOne("lena.Domains.ProductionOperation", "ProductionOperation")
                        .WithMany("SerialFailedOperations")
                        .HasForeignKey("ProductionOperationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.ProductionOrder", "ProductionOrder")
                        .WithMany("SerialFailedOperations")
                        .HasForeignKey("ProductionOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.RepairProduction", "RepairProduction")
                        .WithMany("SerialFailedOperations")
                        .HasForeignKey("RepairProductionId");

                    b.HasOne("lena.Domains.User", "ReviewerUser")
                        .WithMany("ReviewerSerialFailedOperations")
                        .HasForeignKey("ReviewerUserId");

                    b.Navigation("ConfirmUser");

                    b.Navigation("ProductionOperation");

                    b.Navigation("ProductionOrder");

                    b.Navigation("RepairProduction");

                    b.Navigation("ReviewerUser");
                });

            modelBuilder.Entity("lena.Domains.SerialFailedOperationFaultOperation", b =>
                {
                    b.HasOne("lena.Domains.Operation", "Operation")
                        .WithMany("SerialFailedOperationFaultOperations")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.SerialFailedOperation", "SerialFailedOperation")
                        .WithMany("SerialFailedOperationFaultOperations")
                        .HasForeignKey("SerialFailedOperationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Operation");

                    b.Navigation("SerialFailedOperation");
                });

            modelBuilder.Entity("lena.Domains.SerialFailedOperationFaultOperationEmployee", b =>
                {
                    b.HasOne("lena.Domains.ProductionOperationEmployee", "ProductionOperationEmployee")
                        .WithMany("SerialFailedOperationFaultOperationEmployees")
                        .HasForeignKey("ProductionOperationEmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.ProductionOperatorEmployeeBan", "ProductionOperatorEmployeeBan")
                        .WithMany("SerialFailedOperationFaultOperationEmployees")
                        .HasForeignKey("ProductionOperatorEmployeeBanId");

                    b.HasOne("lena.Domains.SerialFailedOperationFaultOperation", "SerialFailedOperationFaultOperation")
                        .WithMany("SerialFailedOperationFaultOperationEmployees")
                        .HasForeignKey("SerialFailedOperationFaultOperationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductionOperationEmployee");

                    b.Navigation("ProductionOperatorEmployeeBan");

                    b.Navigation("SerialFailedOperationFaultOperation");
                });

            modelBuilder.Entity("lena.Domains.SerialProfile", b =>
                {
                    b.HasOne("lena.Domains.Cooperator", "Cooperator")
                        .WithMany("SerialProfiles")
                        .HasForeignKey("CooperatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Stuff", "Stuff")
                        .WithMany("SerialProfiles")
                        .HasForeignKey("StuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("SerialProfiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cooperator");

                    b.Navigation("Stuff");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.SoftwareWorkReport", b =>
                {
                    b.HasOne("lena.Domains.Employee", "Employee")
                        .WithMany("SoftwareWorkReports")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("lena.Domains.SoftwareWorkReportItem", b =>
                {
                    b.HasOne("lena.Domains.SoftwareWorkReport", "SoftwareWorkReport")
                        .WithMany("SoftwareWorkReportItems")
                        .HasForeignKey("SoftwareWorkReportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SoftwareWorkReport");
                });

            modelBuilder.Entity("lena.Domains.StockChecking", b =>
                {
                    b.HasOne("lena.Domains.TagType", "ActiveTagType")
                        .WithMany("StockCheckings")
                        .HasForeignKey("ActiveTagTypeId");

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("StockCheckings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActiveTagType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.StockCheckingPerson", b =>
                {
                    b.HasOne("lena.Domains.StockChecking", "StockChecking")
                        .WithMany("StockCheckingPersons")
                        .HasForeignKey("StockCheckingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("StockCheckingPersons")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StockChecking");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.StockCheckingStuff", b =>
                {
                    b.HasOne("lena.Domains.StockChecking", "StockChecking")
                        .WithMany("StockCheckingStuffs")
                        .HasForeignKey("StockCheckingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Stuff", "Stuff")
                        .WithMany("StockCheckingStuffs")
                        .HasForeignKey("StuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StockChecking");

                    b.Navigation("Stuff");
                });

            modelBuilder.Entity("lena.Domains.StockCheckingTag", b =>
                {
                    b.HasOne("lena.Domains.Stuff", "Stuff")
                        .WithMany("StockCheckingTags")
                        .HasForeignKey("StuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.TagType", "TagType")
                        .WithMany("StockCheckingTags")
                        .HasForeignKey("TagTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Unit", "Unit")
                        .WithMany("StockCheckingTags")
                        .HasForeignKey("UnitId");

                    b.HasOne("lena.Domains.StockCheckingWarehouse", "StockCheckingWarehouse")
                        .WithMany("StockCheckingTags")
                        .HasForeignKey("StockCheckingId", "WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.StuffSerial", "StuffSerial")
                        .WithMany("StockCheckingTags")
                        .HasForeignKey("StuffSerialCode", "StuffId");

                    b.Navigation("StockCheckingWarehouse");

                    b.Navigation("Stuff");

                    b.Navigation("StuffSerial");

                    b.Navigation("TagType");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("lena.Domains.StockCheckingWarehouse", b =>
                {
                    b.HasOne("lena.Domains.StockChecking", "StockChecking")
                        .WithMany("StockCheckingWarehouses")
                        .HasForeignKey("StockCheckingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Warehouse", "Warehouse")
                        .WithMany("StockCheckingWarehouses")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StockChecking");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("lena.Domains.StockPlace", b =>
                {
                    b.HasOne("lena.Domains.Warehouse", "Warehouse")
                        .WithMany("StockPlaces")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("lena.Domains.StoreReceiptDeleteRequest", b =>
                {
                    b.HasOne("lena.Domains.StoreReceipt", "StoreReceipt")
                        .WithMany("StoreReceiptDeleteRequest")
                        .HasForeignKey("StoreReceiptId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("StoreReceiptDeleteRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StoreReceipt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.StoreReceiptDeleteRequestConfirmationLog", b =>
                {
                    b.HasOne("lena.Domains.User", "ConfirmerUser")
                        .WithMany("StoreReceiptDeleteRequestConfirmationLogs")
                        .HasForeignKey("ConfirmerUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.StoreReceiptDeleteRequest", "StoreReceiptDeleteRequest")
                        .WithMany("StoreReceiptDeleteRequestConfirmationLogs")
                        .HasForeignKey("StoreReceiptDeleteRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ConfirmerUser");

                    b.Navigation("StoreReceiptDeleteRequest");
                });

            modelBuilder.Entity("lena.Domains.StoreReceiptDeleteRequestStuffSerial", b =>
                {
                    b.HasOne("lena.Domains.StoreReceiptDeleteRequest", "StoreReceiptDeleteRequest")
                        .WithMany("StoreReceiptDeleteRequestStuffSerials")
                        .HasForeignKey("StoreReceiptDeleteRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Unit", "Unit")
                        .WithMany("StoreReceiptDeleteRequestStuffSerials")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.StuffSerial", "StuffSerial")
                        .WithMany("StoreReceiptDeleteRequestStuffSerials")
                        .HasForeignKey("StuffSerialCode", "StuffSerialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StoreReceiptDeleteRequest");

                    b.Navigation("StuffSerial");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("lena.Domains.StoreReceiptSummary", b =>
                {
                    b.HasOne("lena.Domains.StoreReceipt", "StoreReceipt")
                        .WithOne("StoreReceiptSummary")
                        .HasForeignKey("lena.Domains.StoreReceiptSummary", "StoreReceiptId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StoreReceipt");
                });

            modelBuilder.Entity("lena.Domains.Stuff", b =>
                {
                    b.HasOne("lena.Domains.ProjectHeader", "ProjectHeader")
                        .WithOne("Stuff")
                        .HasForeignKey("lena.Domains.Stuff", "ProjectHeaderId");

                    b.HasOne("lena.Domains.Department", "QualityControlDepartment")
                        .WithMany("Stuffs")
                        .HasForeignKey("QualityControlDepartmentId");

                    b.HasOne("lena.Domains.Employee", "QualityControlEmployee")
                        .WithMany("Stuffs")
                        .HasForeignKey("QualityControlEmployeeId");

                    b.HasOne("lena.Domains.StuffCategory", "StuffCategory")
                        .WithMany("Stuffs")
                        .HasForeignKey("StuffCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.StuffDefinitionRequest", "StuffDefinitionRequest")
                        .WithOne("Stuff")
                        .HasForeignKey("lena.Domains.Stuff", "StuffDefinitionRequestId");

                    b.HasOne("lena.Domains.StuffHSGroup", "StuffHSGroup")
                        .WithMany("Stuffs")
                        .HasForeignKey("StuffHSGroupId");

                    b.HasOne("lena.Domains.StuffPurchaseCategory", "StuffPurchaseCategory")
                        .WithMany("Stuffs")
                        .HasForeignKey("StuffPurchaseCategoryId");

                    b.HasOne("lena.Domains.UnitType", "UnitType")
                        .WithMany("Stuffs")
                        .HasForeignKey("UnitTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProjectHeader");

                    b.Navigation("QualityControlDepartment");

                    b.Navigation("QualityControlEmployee");

                    b.Navigation("StuffCategory");

                    b.Navigation("StuffDefinitionRequest");

                    b.Navigation("StuffHSGroup");

                    b.Navigation("StuffPurchaseCategory");

                    b.Navigation("UnitType");
                });

            modelBuilder.Entity("lena.Domains.StuffBasePriceCustoms", b =>
                {
                    b.HasOne("lena.Domains.Currency", "Currency")
                        .WithMany("StuffBasePriceCustoms")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.HowToBuy", "HowToBuy")
                        .WithMany("StuffBasePriceCustoms")
                        .HasForeignKey("HowToBuyId");

                    b.HasOne("lena.Domains.StuffBasePrice", "StuffBasePrice")
                        .WithOne("StuffBasePriceCustoms")
                        .HasForeignKey("lena.Domains.StuffBasePriceCustoms", "StuffBasePriceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("HowToBuy");

                    b.Navigation("StuffBasePrice");
                });

            modelBuilder.Entity("lena.Domains.StuffBasePriceTransport", b =>
                {
                    b.HasOne("lena.Domains.StuffBasePrice", "StuffBasePrice")
                        .WithOne("StuffBasePriceTransport")
                        .HasForeignKey("lena.Domains.StuffBasePriceTransport", "StuffBasePriceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StuffBasePrice");
                });

            modelBuilder.Entity("lena.Domains.StuffCategory", b =>
                {
                    b.HasOne("lena.Domains.Warehouse", "DefaultWarehouse")
                        .WithMany("StuffCategories")
                        .HasForeignKey("DefaultWarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.StuffCategory", "ParentStuffCategory")
                        .WithMany("SubStuffCategories")
                        .HasForeignKey("ParentStuffCategoryId");

                    b.Navigation("DefaultWarehouse");

                    b.Navigation("ParentStuffCategory");
                });

            modelBuilder.Entity("lena.Domains.StuffDefinitionRequest", b =>
                {
                    b.HasOne("lena.Domains.User", "ConfirmerUser")
                        .WithMany("StuffDefinitionRequestConfirmers")
                        .HasForeignKey("ConfirmerUserId");

                    b.HasOne("lena.Domains.Stuff", null)
                        .WithMany("StuffDefinitionRequests")
                        .HasForeignKey("StuffId");

                    b.HasOne("lena.Domains.StuffPurchaseCategory", "StuffPurchaseCategory")
                        .WithMany("StuffDefinitionRequests")
                        .HasForeignKey("StuffPurchaseCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.UnitType", "UnitType")
                        .WithMany("StuffDefinitionRequests")
                        .HasForeignKey("UnitTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("StuffDefinitionRequestRequesters")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ConfirmerUser");

                    b.Navigation("StuffPurchaseCategory");

                    b.Navigation("UnitType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.StuffDocument", b =>
                {
                    b.HasOne("lena.Domains.Stuff", "Stuff")
                        .WithMany("StuffDocuments")
                        .HasForeignKey("StuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("StuffDocuments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Stuff");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.StuffFractionTemporaryStuff", b =>
                {
                    b.HasOne("lena.Domains.Stuff", "Stuff")
                        .WithMany("StuffFractionTemporaryStuffs")
                        .HasForeignKey("StuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("StuffFractionReportTemporaryStuffs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Stuff");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.StuffPriceDiscrepancy", b =>
                {
                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("StuffPriceDiscrepancies")
                        .HasForeignKey("ConfirmerUserId");

                    b.HasOne("lena.Domains.Currency", "Currency")
                        .WithMany("StuffPriceDiscrepancies")
                        .HasForeignKey("CurrentStuffBasePriceCurrencyId");

                    b.HasOne("lena.Domains.PurchaseOrder", "PurchaseOrder")
                        .WithMany("StuffPriceDiscrepancies")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.StuffProductionFaultType", b =>
                {
                    b.HasOne("lena.Domains.ProductionFaultType", "ProductionFaultType")
                        .WithMany("StuffProductionFaultTypes")
                        .HasForeignKey("ProductionFaultTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Stuff", "Stuff")
                        .WithMany("StuffProductionFaultTypes")
                        .HasForeignKey("StuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductionFaultType");

                    b.Navigation("Stuff");
                });

            modelBuilder.Entity("lena.Domains.StuffProvider", b =>
                {
                    b.HasOne("lena.Domains.Cooperator", "Provider")
                        .WithMany("StuffProviders")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Stuff", "Stuff")
                        .WithMany("StuffProviders")
                        .HasForeignKey("StuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Provider");

                    b.Navigation("Stuff");
                });

            modelBuilder.Entity("lena.Domains.StuffPurchaseCategory", b =>
                {
                    b.HasOne("lena.Domains.Department", "QualityControlDepartment")
                        .WithMany("StuffPurchaseCategories")
                        .HasForeignKey("QualityControlDepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.UserGroup", "QualityControlUserGroup")
                        .WithMany("StuffPurchaseCategories")
                        .HasForeignKey("QualityControlUserGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.UserGroup", "StuffDefinitionConfirmerUserGroup")
                        .WithMany()
                        .HasForeignKey("StuffDefinitionConfirmerUserGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.UserGroup", "StuffDefinitionUserGroup")
                        .WithMany()
                        .HasForeignKey("StuffDefinitionUserGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("QualityControlDepartment");

                    b.Navigation("QualityControlUserGroup");

                    b.Navigation("StuffDefinitionConfirmerUserGroup");

                    b.Navigation("StuffDefinitionUserGroup");
                });

            modelBuilder.Entity("lena.Domains.StuffPurchaseCategoryDetail", b =>
                {
                    b.HasOne("lena.Domains.UserGroup", "ApplicatorConfirmerUserGroup")
                        .WithMany()
                        .HasForeignKey("ApplicatorConfirmerUserGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.UserGroup", "ApplicatorUserGroup")
                        .WithMany()
                        .HasForeignKey("ApplicatorUserGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.UserGroup", "RequestConfirmerUserGroup")
                        .WithMany()
                        .HasForeignKey("RequestConfirmerUserGroupId");

                    b.HasOne("lena.Domains.StuffPurchaseCategory", "StuffPurchaseCategory")
                        .WithMany("Details")
                        .HasForeignKey("StuffPurchaseCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicatorConfirmerUserGroup");

                    b.Navigation("ApplicatorUserGroup");

                    b.Navigation("RequestConfirmerUserGroup");

                    b.Navigation("StuffPurchaseCategory");
                });

            modelBuilder.Entity("lena.Domains.StuffQualityControlObservation", b =>
                {
                    b.HasOne("lena.Domains.User", "RegisterarUser")
                        .WithMany("StuffQualityControlObservations")
                        .HasForeignKey("RegisterarUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Stuff", "Stuff")
                        .WithMany("StuffQualityControlObservations")
                        .HasForeignKey("StuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RegisterarUser");

                    b.Navigation("Stuff");
                });

            modelBuilder.Entity("lena.Domains.StuffQualityControlTest", b =>
                {
                    b.HasOne("lena.Domains.QualityControlTest", "QualityControlTest")
                        .WithMany("StuffQualityControlTests")
                        .HasForeignKey("QualityControlTestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Stuff", "Stuff")
                        .WithMany("StuffQualityControlTests")
                        .HasForeignKey("StuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.QualityControlTestCondition", "QualityControlTestCondition")
                        .WithMany("StuffQualityControlTests")
                        .HasForeignKey("QualityControlTestConditionTestConditionId", "QualityControlTestConditionQualityControlTestId");

                    b.HasOne("lena.Domains.QualityControlTestEquipment", "QualityControlTestEquipment")
                        .WithMany("StuffQualityControlTests")
                        .HasForeignKey("QualityControlTestEquipmentTestEquipmentId", "QualityControlTestEquipmentQualityControlTestId");

                    b.HasOne("lena.Domains.QualityControlTestImportanceDegree", "QualityControlTestImportanceDegree")
                        .WithMany("StuffQualityControlTests")
                        .HasForeignKey("QualityControlTestImportanceDegreeTestImportanceDegreeId", "QualityControlTestImportanceDegreeQualityControlTestId");

                    b.HasOne("lena.Domains.QualityControlTestOperation", "QualityControlTestOperation")
                        .WithMany("StuffQualityControlTests")
                        .HasForeignKey("QualityControlTestOperationTestOperationId", "QualityControlTestOperationQualityControlTestId");

                    b.Navigation("QualityControlTest");

                    b.Navigation("QualityControlTestCondition");

                    b.Navigation("QualityControlTestEquipment");

                    b.Navigation("QualityControlTestImportanceDegree");

                    b.Navigation("QualityControlTestOperation");

                    b.Navigation("Stuff");
                });

            modelBuilder.Entity("lena.Domains.StuffQualityControlTestCondition", b =>
                {
                    b.HasOne("lena.Domains.QualityControlTestUnit", "QualityControlTestUnit")
                        .WithMany("StuffQualityControlTestConditions")
                        .HasForeignKey("QualityControlTestUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.QualityControlTestCondition", "QualityControlTestCondition")
                        .WithMany("StuffQualityControlTestConditions")
                        .HasForeignKey("QualityControlConditionTestConditionId", "QualityControlTestConditionQualityControlTestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.StuffQualityControlTest", "StuffQualityControlTest")
                        .WithMany("StuffQualityControlTestConditions")
                        .HasForeignKey("StuffId", "QualityControlTestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("QualityControlTestCondition");

                    b.Navigation("QualityControlTestUnit");

                    b.Navigation("StuffQualityControlTest");
                });

            modelBuilder.Entity("lena.Domains.StuffQualityControlTestEquipment", b =>
                {
                    b.HasOne("lena.Domains.QualityControlTestEquipment", "QualityControlTestEquipment")
                        .WithMany("StuffQualityControlTestEquipments")
                        .HasForeignKey("QualityControlEquipmentTestEquipmentId", "QualityControlTestEquipmentQualityControlTestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.StuffQualityControlTest", "StuffQualityControlTest")
                        .WithMany("StuffQualityControlTestEquipments")
                        .HasForeignKey("StuffId", "QualityControlTestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("QualityControlTestEquipment");

                    b.Navigation("StuffQualityControlTest");
                });

            modelBuilder.Entity("lena.Domains.StuffQualityControlTestImportanceDegree", b =>
                {
                    b.HasOne("lena.Domains.QualityControlTestImportanceDegree", "QualityControlTestImportanceDegree")
                        .WithMany("StuffQualityControlTestImportanceDegrees")
                        .HasForeignKey("QualityControlImportanceDegreeTestImportanceDegreeId", "QualityControlTestImportanceDegreeQualityControlTestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.StuffQualityControlTest", "StuffQualityControlTest")
                        .WithMany("StuffQualityControlTestImportanceDegrees")
                        .HasForeignKey("StuffId", "QualityControlTestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("QualityControlTestImportanceDegree");

                    b.Navigation("StuffQualityControlTest");
                });

            modelBuilder.Entity("lena.Domains.StuffQualityControlTestOperation", b =>
                {
                    b.HasOne("lena.Domains.QualityControlTestOperation", "QualityControlTestOperation")
                        .WithMany("StuffQualityControlTestOperations")
                        .HasForeignKey("QualityControlOperationTestOperationId", "QualityControlTestOperationQualityControlTestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.StuffQualityControlTest", "StuffQualityControlTest")
                        .WithMany("StuffQualityControlTestOperations")
                        .HasForeignKey("StuffId", "QualityControlTestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("QualityControlTestOperation");

                    b.Navigation("StuffQualityControlTest");
                });

            modelBuilder.Entity("lena.Domains.StuffRequestMilestoneDetailSummary", b =>
                {
                    b.HasOne("lena.Domains.StuffRequestMilestoneDetail", "StuffRequestMilestoneDetail")
                        .WithOne("StuffRequestMilestoneDetailSummary")
                        .HasForeignKey("lena.Domains.StuffRequestMilestoneDetailSummary", "StuffRequestMilestoneDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StuffRequestMilestoneDetail");
                });

            modelBuilder.Entity("lena.Domains.StuffSerial", b =>
                {
                    b.HasOne("lena.Domains.Unit", "InitUnit")
                        .WithMany("StuffSerials")
                        .HasForeignKey("InitUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "IssueConfirmerUser")
                        .WithMany()
                        .HasForeignKey("IssueConfirmerUserId");

                    b.HasOne("lena.Domains.User", "IssueUser")
                        .WithMany()
                        .HasForeignKey("IssueUserId");

                    b.HasOne("lena.Domains.User", "LastUserModified")
                        .WithMany("StuffSerials")
                        .HasForeignKey("LastModifiedUserId");

                    b.HasOne("lena.Domains.PartitionStuffSerial", "PartitionStuffSerial")
                        .WithMany("ChildStuffSerials")
                        .HasForeignKey("PartitionStuffSerialId");

                    b.HasOne("lena.Domains.ProductionOrder", "ProductionOrder")
                        .WithMany("StuffSerials")
                        .HasForeignKey("ProductionOrderId");

                    b.HasOne("lena.Domains.Stuff", "Stuff")
                        .WithMany("StuffSerials")
                        .HasForeignKey("StuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.BillOfMaterial", "BillOfMaterial")
                        .WithMany("StuffSerials")
                        .HasForeignKey("BillOfMaterialVersion", "StuffId");

                    b.HasOne("lena.Domains.SerialProfile", "SerialProfile")
                        .WithMany("StuffSerials")
                        .HasForeignKey("SerialProfileCode", "StuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BillOfMaterial");

                    b.Navigation("InitUnit");

                    b.Navigation("IssueConfirmerUser");

                    b.Navigation("IssueUser");

                    b.Navigation("LastUserModified");

                    b.Navigation("PartitionStuffSerial");

                    b.Navigation("ProductionOrder");

                    b.Navigation("SerialProfile");

                    b.Navigation("Stuff");
                });

            modelBuilder.Entity("lena.Domains.StuffStockPlace", b =>
                {
                    b.HasOne("lena.Domains.StockPlace", "StockPlace")
                        .WithMany("StuffStockPlaces")
                        .HasForeignKey("StockPlaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Stuff", "Stuff")
                        .WithMany("StuffStockPlaces")
                        .HasForeignKey("StuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StockPlace");

                    b.Navigation("Stuff");
                });

            modelBuilder.Entity("lena.Domains.Supplier", b =>
                {
                    b.HasOne("lena.Domains.Employee", "Employee")
                        .WithOne("Supplier")
                        .HasForeignKey("lena.Domains.Supplier", "EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("lena.Domains.SuppliesPurchaserUser", b =>
                {
                    b.HasOne("lena.Domains.User", "PurchaserUser")
                        .WithMany("SuppliesPurchaserUsers")
                        .HasForeignKey("PurchaserUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Stuff", "Stuff")
                        .WithMany("SuppliesPurchaserUsers")
                        .HasForeignKey("StuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PurchaserUser");

                    b.Navigation("Stuff");
                });

            modelBuilder.Entity("lena.Domains.TagCounting", b =>
                {
                    b.HasOne("lena.Domains.StockCheckingTag", "StockCheckingTag")
                        .WithMany("TagCountings")
                        .HasForeignKey("StockCheckingTagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Unit", "Unit")
                        .WithMany("TagCountings")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("TagCountings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StockCheckingTag");

                    b.Navigation("Unit");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.TestCondition", b =>
                {
                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("TestConditions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.TicketComment", b =>
                {
                    b.HasOne("lena.Domains.TicketSoftware", "TicketSoftware")
                        .WithMany("TicketComments")
                        .HasForeignKey("TicketSoftwareId");

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("TicketComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TicketSoftware");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.TicketFile", b =>
                {
                    b.HasOne("lena.Domains.TicketSoftware", "TicketSoftware")
                        .WithMany("TicketFiles")
                        .HasForeignKey("TicketSoftWareId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", null)
                        .WithMany("TicketFile")
                        .HasForeignKey("UserId");

                    b.Navigation("TicketSoftware");
                });

            modelBuilder.Entity("lena.Domains.TicketSoftware", b =>
                {
                    b.HasOne("lena.Domains.User", "LastedEditorUser")
                        .WithMany("ModifierOfTicketSoftwares")
                        .HasForeignKey("LastedEditorUserId");

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("CreatorOfTicketSoftwares")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LastedEditorUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.TransactionBatch", b =>
                {
                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("TransactionBatches")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.TransactionType", b =>
                {
                    b.HasOne("lena.Domains.TransactionType", "RollbackTransactionType")
                        .WithMany("ReferenceTransactionTypes")
                        .HasForeignKey("RollbackTransactionTypeId");

                    b.Navigation("RollbackTransactionType");
                });

            modelBuilder.Entity("lena.Domains.Unit", b =>
                {
                    b.HasOne("lena.Domains.UnitType", "UnitType")
                        .WithMany("Units")
                        .HasForeignKey("UnitTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UnitType");
                });

            modelBuilder.Entity("lena.Domains.UserMessageRelation", b =>
                {
                    b.HasOne("lena.Domains.User", "FromUser")
                        .WithMany("ToUserMessageRelations")
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "ToUser")
                        .WithMany("FromUserMessageRelations")
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromUser");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("lena.Domains.UserPost", b =>
                {
                    b.HasOne("lena.Domains.Post", "Post")
                        .WithMany("UserPosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("UserPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.UserSetting", b =>
                {
                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("UserSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.UserToken", b =>
                {
                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.Warehouse", b =>
                {
                    b.HasOne("lena.Domains.Department", "Department")
                        .WithMany("Warehouses")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("lena.Domains.WarehouseExitReceiptType", b =>
                {
                    b.HasOne("lena.Domains.ExitReceiptRequestType", "ExitReceiptRequestType")
                        .WithMany("WarehouseExitReceiptTypes")
                        .HasForeignKey("ExitReceiptRequestTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Warehouse", "Warehouse")
                        .WithMany("WarehouseExitReceiptTypes")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ExitReceiptRequestType");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("lena.Domains.WarehouseStoreReceiptType", b =>
                {
                    b.HasOne("lena.Domains.Warehouse", "Warehouse")
                        .WithMany("WarehouseStoreReceiptTypes")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("lena.Domains.WarehouseStuffType", b =>
                {
                    b.HasOne("lena.Domains.Warehouse", "Warehouse")
                        .WithMany("WarehouseStuffTypes")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("lena.Domains.WarehouseTransactionLevel", b =>
                {
                    b.HasOne("lena.Domains.Warehouse", "Warehouse")
                        .WithMany("WarehouseTransactionLevels")
                        .HasForeignKey("WareHouserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("lena.Domains.WeightDay", b =>
                {
                    b.HasOne("lena.Domains.IndicatorWeight", "IndicatorWeight")
                        .WithMany("WeightDays")
                        .HasForeignKey("IndicatorWeightId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("IndicatorWeight");
                });

            modelBuilder.Entity("lena.Domains.WorkPlan", b =>
                {
                    b.HasOne("lena.Domains.BillOfMaterial", "BillOfMaterial")
                        .WithMany("WorkPlans")
                        .HasForeignKey("BillOfMaterialVersion", "BillOfMaterialStuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BillOfMaterial");
                });

            modelBuilder.Entity("lena.Domains.WorkPlanStep", b =>
                {
                    b.HasOne("lena.Domains.Warehouse", "ConsumeWarehouse")
                        .WithMany("ConsumeWorkPlanSteps")
                        .HasForeignKey("ConsumeWarehouseId");

                    b.HasOne("lena.Domains.Warehouse", "ProductWarehouse")
                        .WithMany("ProductWorkPlanSteps")
                        .HasForeignKey("ProductWarehouseId");

                    b.HasOne("lena.Domains.ProductionLine", "ProductionLine")
                        .WithMany("WorkPlanSteps")
                        .HasForeignKey("ProductionLineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.ProductionStep", "ProductionStep")
                        .WithMany("WorkPlanSteps")
                        .HasForeignKey("ProductionStepId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.WorkPlan", "WorkPlan")
                        .WithMany("WorkPlanSteps")
                        .HasForeignKey("WorkPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.ProductionLineProductionStep", "ProductionLineProductionStep")
                        .WithMany("WorkPlanSteps")
                        .HasForeignKey("ProductionLineId", "ProductionStepId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ConsumeWarehouse");

                    b.Navigation("ProductionLine");

                    b.Navigation("ProductionLineProductionStep");

                    b.Navigation("ProductionStep");

                    b.Navigation("ProductWarehouse");

                    b.Navigation("WorkPlan");
                });

            modelBuilder.Entity("lena.Domains.WorkStation", b =>
                {
                    b.HasOne("lena.Domains.ProductionLine", "ProductionLine")
                        .WithMany("WorkStations")
                        .HasForeignKey("ProductionLineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductionLine");
                });

            modelBuilder.Entity("lena.Domains.WorkStationOperation", b =>
                {
                    b.HasOne("lena.Domains.Operation", "Operation")
                        .WithMany("WorkStationOperations")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.WorkStation", "WorkStation")
                        .WithMany("WorkStationOperations")
                        .HasForeignKey("WorkStationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Operation");

                    b.Navigation("WorkStation");
                });

            modelBuilder.Entity("lena.Domains.WorkStationPart", b =>
                {
                    b.HasOne("lena.Domains.WorkStation", "WorkStation")
                        .WithMany("WorkStationParts")
                        .HasForeignKey("WorkStationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("WorkStation");
                });

            modelBuilder.Entity("lena.Domains.BankOrder", b =>
                {
                    b.HasOne("lena.Domains.Bank", "Bank")
                        .WithMany("BankOrders")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.BankOrderContractType", "BankOrderContractType")
                        .WithMany("BankOrders")
                        .HasForeignKey("BankOrderContractTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Country", "Country")
                        .WithMany("BankOrders")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Currency", "Currency")
                        .WithMany("BankOrders")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Customhouse", "Customhouse")
                        .WithMany("BankOrders")
                        .HasForeignKey("CustomhouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.BankOrder", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.Cooperator", "Provider")
                        .WithMany("BankOrders")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("BankOrderContractType");

                    b.Navigation("Country");

                    b.Navigation("Currency");

                    b.Navigation("Customhouse");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("lena.Domains.BaseEntityConfirmation", b =>
                {
                    b.HasOne("lena.Domains.BaseEntityConfirmType", "BaseEntityConfirmType")
                        .WithMany("BaseEntityConfirmations")
                        .HasForeignKey("BaseEntityConfirmTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "Confirmer")
                        .WithMany("BaseEntityConfirmations")
                        .HasForeignKey("ConfirmerId");

                    b.HasOne("lena.Domains.BaseEntity", "ConfirmingEntity")
                        .WithMany("BaseEntityConfirmations")
                        .HasForeignKey("ConfirmingEntityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.BaseEntityConfirmation", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("BaseEntityConfirmType");

                    b.Navigation("Confirmer");

                    b.Navigation("ConfirmingEntity");
                });

            modelBuilder.Entity("lena.Domains.BillOfMaterialPublishRequest", b =>
                {
                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.BillOfMaterialPublishRequest", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.BillOfMaterial", "BillOfMaterial")
                        .WithMany("BillOfMaterialPublishRequests")
                        .HasForeignKey("BillOfMaterialVersion", "BillOfMaterialStuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.BillOfMaterial", null)
                        .WithOne("LatestBillOfMaterialPublishRequest")
                        .HasForeignKey("lena.Domains.BillOfMaterialPublishRequest", "BillOfMaterialVersion1", "BillOfMaterialStuffId1");

                    b.Navigation("BillOfMaterial");
                });

            modelBuilder.Entity("lena.Domains.Cargo", b =>
                {
                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.Cargo", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lena.Domains.CargoItem", b =>
                {
                    b.HasOne("lena.Domains.Cargo", "Cargo")
                        .WithMany("CargoItems")
                        .HasForeignKey("CargoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Forwarder", "Forwarder")
                        .WithMany("CargoItems")
                        .HasForeignKey("ForwarderId");

                    b.HasOne("lena.Domains.HowToBuy", "HowToBuy")
                        .WithMany("CargoItems")
                        .HasForeignKey("HowToBuyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.CargoItem", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.Risk", "LatestRisk")
                        .WithOne()
                        .HasForeignKey("lena.Domains.CargoItem", "LatestRiskId");

                    b.HasOne("lena.Domains.PurchaseOrder", "PurchaseOrder")
                        .WithMany("CargoItems")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Unit", "Unit")
                        .WithMany("CargoItems")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cargo");

                    b.Navigation("Forwarder");

                    b.Navigation("HowToBuy");

                    b.Navigation("LatestRisk");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("lena.Domains.CargoItemDetail", b =>
                {
                    b.HasOne("lena.Domains.CargoItem", "CargoItem")
                        .WithMany("CargoItemDetails")
                        .HasForeignKey("CargoItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.CargoItemDetail", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.PurchaseOrderDetail", "PurchaseOrderDetail")
                        .WithMany("CargoItemDetails")
                        .HasForeignKey("PurchaseOrderDetailId");

                    b.HasOne("lena.Domains.Unit", "Unit")
                        .WithMany("CargoItemDetails")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CargoItem");

                    b.Navigation("PurchaseOrderDetail");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("lena.Domains.CheckOrderItem", b =>
                {
                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.CheckOrderItem", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.OrderItemConfirmation", "OrderItemConfirmation")
                        .WithMany("CheckOrderItems")
                        .HasForeignKey("OrderItemConfirmationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrderItemConfirmation");
                });

            modelBuilder.Entity("lena.Domains.ConditionalQualityControl", b =>
                {
                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.ConditionalQualityControl", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.QualityControlAccepter", "QualityControlAccepter")
                        .WithMany("ConditionalQualityControls")
                        .HasForeignKey("QualityControlAccepterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.QualityControlConfirmation", "QualityControlConfirmation")
                        .WithMany("ConditionalQualityControls")
                        .HasForeignKey("QualityControlConfirmationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "ResponseConditionalConfirmationlUser")
                        .WithMany("ConditionalQualityControls")
                        .HasForeignKey("ResponseConditionalConfirmationUserId");

                    b.HasOne("lena.Domains.WarrantyExpirationExceptionType", "WarrantyExpirationExceptionType")
                        .WithMany("ConditionalQualityControls")
                        .HasForeignKey("WarrantyExpirationExceptionTypeId");

                    b.Navigation("QualityControlAccepter");

                    b.Navigation("QualityControlConfirmation");

                    b.Navigation("ResponseConditionalConfirmationlUser");

                    b.Navigation("WarrantyExpirationExceptionType");
                });

            modelBuilder.Entity("lena.Domains.ConditionalQualityControlItem", b =>
                {
                    b.HasOne("lena.Domains.ConditionalQualityControl", "ConditionalQualityControl")
                        .WithMany("ConditionalQualityControlItems")
                        .HasForeignKey("ConditionalQualityControlId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.ConditionalQualityControlItem", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.QualityControlConfirmationItem", "QualityControlConfirmationItem")
                        .WithMany("ConditionalQualityControlItems")
                        .HasForeignKey("QualityControlConfirmationItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Unit", "Unit")
                        .WithMany("ConditionalQualityControlItems")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ConditionalQualityControl");

                    b.Navigation("QualityControlConfirmationItem");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("lena.Domains.CustomsDeclaration", b =>
                {
                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.CustomsDeclaration", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lena.Domains.Decomposition", b =>
                {
                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.Decomposition", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.ProductionOperation", "ProductionOperation")
                        .WithOne("Decomposition")
                        .HasForeignKey("lena.Domains.Decomposition", "ProductionOperationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Stuff", "Stuff")
                        .WithMany("Decompositions")
                        .HasForeignKey("StuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.StuffSerial", "StuffSerial")
                        .WithMany("Decompositions")
                        .HasForeignKey("StuffSerialCode", "StuffId");

                    b.Navigation("ProductionOperation");

                    b.Navigation("Stuff");

                    b.Navigation("StuffSerial");
                });

            modelBuilder.Entity("lena.Domains.EquivalentStuffUsage", b =>
                {
                    b.HasOne("lena.Domains.EquivalentStuff", "EquivalentStuff")
                        .WithMany("EquivalentStuffUsages")
                        .HasForeignKey("EquivalentStuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.EquivalentStuffUsage", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.ProductionOrder", "ProductionOrder")
                        .WithMany("EquivalentStuffUsages")
                        .HasForeignKey("ProductionOrderId");

                    b.HasOne("lena.Domains.ProductionPlanDetail", "ProductionPlanDetail")
                        .WithMany("EquivalentStuffUsages")
                        .HasForeignKey("ProductionPlanDetailId");

                    b.Navigation("EquivalentStuff");

                    b.Navigation("ProductionOrder");

                    b.Navigation("ProductionPlanDetail");
                });

            modelBuilder.Entity("lena.Domains.EquivalentStuffUsageConfirmation", b =>
                {
                    b.HasOne("lena.Domains.EquivalentStuffUsage", "EquivalentStuffUsage")
                        .WithMany("EquivalentStuffUsageConfirmations")
                        .HasForeignKey("EquivalentStuffUsageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.EquivalentStuffUsageConfirmation", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("EquivalentStuffUsage");
                });

            modelBuilder.Entity("lena.Domains.ExitReceipt", b =>
                {
                    b.HasOne("lena.Domains.Cooperator", "Cooperator")
                        .WithMany("ExitReceipts")
                        .HasForeignKey("CooperatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.ExitReceipt", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.OutboundCargo", "OutboundCargo")
                        .WithMany("ExitReceipts")
                        .HasForeignKey("OutboundCargoId");

                    b.Navigation("Cooperator");

                    b.Navigation("OutboundCargo");
                });

            modelBuilder.Entity("lena.Domains.ExitReceiptRequest", b =>
                {
                    b.HasOne("lena.Domains.Cooperator", "Cooperator")
                        .WithMany("ExitReceiptRequests")
                        .HasForeignKey("CooperatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.ExitReceiptRequestType", "ExitReceiptRequestType")
                        .WithMany("ExitReceiptRequests")
                        .HasForeignKey("ExitReceiptRequestTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.ExitReceiptRequest", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.PriceAnnunciationItem", "PriceAnnunciationItem")
                        .WithMany("ExitReceiptRequests")
                        .HasForeignKey("PriceAnnunciationItemId");

                    b.HasOne("lena.Domains.Stuff", "Stuff")
                        .WithMany("ExitReceiptRequests")
                        .HasForeignKey("StuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Unit", "Unit")
                        .WithMany("ExitReceiptRequests")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Warehouse", "Warehouse")
                        .WithMany("ExitReceiptRequests")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cooperator");

                    b.Navigation("ExitReceiptRequestType");

                    b.Navigation("PriceAnnunciationItem");

                    b.Navigation("Stuff");

                    b.Navigation("Unit");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("lena.Domains.FinancialDocument", b =>
                {
                    b.HasOne("lena.Domains.Finance", "Finance")
                        .WithMany("FinancialDocuments")
                        .HasForeignKey("FinanceId");

                    b.HasOne("lena.Domains.FinancialAccount", "FinancialAccount")
                        .WithMany("FinancialDocuments")
                        .HasForeignKey("FinancialAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.FinancialDocument", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Finance");

                    b.Navigation("FinancialAccount");
                });

            modelBuilder.Entity("lena.Domains.Lading", b =>
                {
                    b.HasOne("lena.Domains.BankOrder", "BankOrder")
                        .WithMany("Ladings")
                        .HasForeignKey("BankOrderId");

                    b.HasOne("lena.Domains.City", "City")
                        .WithMany("Ladings")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Customhouse", "Customhouse")
                        .WithMany("Ladings")
                        .HasForeignKey("CustomhouseId");

                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.Lading", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.LadingBlocker", "LadingBlocker")
                        .WithMany("Ladings")
                        .HasForeignKey("LadingBlockerId");

                    b.Navigation("BankOrder");

                    b.Navigation("City");

                    b.Navigation("Customhouse");

                    b.Navigation("LadingBlocker");
                });

            modelBuilder.Entity("lena.Domains.LadingItem", b =>
                {
                    b.HasOne("lena.Domains.CargoItem", "CargoItem")
                        .WithMany("LadingItems")
                        .HasForeignKey("CargoItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.LadingItem", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.Lading", "Lading")
                        .WithMany("LadingItems")
                        .HasForeignKey("LadingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CargoItem");

                    b.Navigation("Lading");
                });

            modelBuilder.Entity("lena.Domains.LadingItemDetail", b =>
                {
                    b.HasOne("lena.Domains.CargoItemDetail", "CargoItemDetail")
                        .WithMany("LadingItemDetails")
                        .HasForeignKey("CargoItemDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.LadingItemDetail", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.LadingItem", "LadingItem")
                        .WithMany("LadingItemDetails")
                        .HasForeignKey("LadingItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CargoItemDetail");

                    b.Navigation("LadingItem");
                });

            modelBuilder.Entity("lena.Domains.ManualTransaction", b =>
                {
                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.ManualTransaction", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.Cooperator", "Provider")
                        .WithMany("ManualTransactions")
                        .HasForeignKey("ProviderId");

                    b.HasOne("lena.Domains.Stuff", "Stuff")
                        .WithMany("ManualTransactions")
                        .HasForeignKey("StuffId");

                    b.HasOne("lena.Domains.Unit", "Unit")
                        .WithMany("ManualTransactions")
                        .HasForeignKey("UnitId");

                    b.HasOne("lena.Domains.Warehouse", "Warehouse")
                        .WithMany("ManualTransactions")
                        .HasForeignKey("WarehouseId");

                    b.Navigation("Provider");

                    b.Navigation("Stuff");

                    b.Navigation("Unit");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("lena.Domains.NewShoppingDetail", b =>
                {
                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.NewShoppingDetail", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.LadingItemDetail", "LadingItemDetail")
                        .WithMany("NewShoppingDetails")
                        .HasForeignKey("LadingItemDetailId");

                    b.HasOne("lena.Domains.NewShopping", "NewShopping")
                        .WithMany("NewShoppingDetails")
                        .HasForeignKey("NewShoppingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Unit", "Unit")
                        .WithMany("NewShoppingDetails")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LadingItemDetail");

                    b.Navigation("NewShopping");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("lena.Domains.OrderItem", b =>
                {
                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.OrderItem", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Stuff", "Stuff")
                        .WithMany("OrderItems")
                        .HasForeignKey("StuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Unit", "Unit")
                        .WithMany("OrderItems")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.BillOfMaterial", "BillOfMaterial")
                        .WithMany("OrderItems")
                        .HasForeignKey("BillOfMaterialVersion", "StuffId");

                    b.HasOne("lena.Domains.BillOfMaterial", "ProductPackBillOfMaterial")
                        .WithMany()
                        .HasForeignKey("ProductPackBillOfMaterialVersion", "ProductPackBillOfMaterialStuffId");

                    b.Navigation("BillOfMaterial");

                    b.Navigation("Order");

                    b.Navigation("ProductPackBillOfMaterial");

                    b.Navigation("Stuff");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("lena.Domains.OrderItemChangeConfirmation", b =>
                {
                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.OrderItemChangeConfirmation", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.OrderItemChangeRequest", "OrderItemChangeRequest")
                        .WithMany("OrderItemChangeConfirmations")
                        .HasForeignKey("OrderItemChangeRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrderItemChangeRequest");
                });

            modelBuilder.Entity("lena.Domains.OrderItemChangeRequest", b =>
                {
                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.OrderItemChangeRequest", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.OrderItem", "OrderItem")
                        .WithMany("OrderItemChangeRequests")
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Unit", "Unit")
                        .WithMany("OrderItemChangeRequests")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrderItem");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("lena.Domains.OrderItemConfirmation", b =>
                {
                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.OrderItemConfirmation", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.OrderItem", "OrderItem")
                        .WithMany("OrderItemConfirmations")
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("lena.Domains.PartitionStuffSerial", b =>
                {
                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.PartitionStuffSerial", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.Unit", "Unit")
                        .WithMany("PartitionStuffSerials")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Warehouse", "Warehouse")
                        .WithMany("PartitionStuffSerials")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.StuffSerial", "MainStuffSerial")
                        .WithMany("PartitionStuffSerials")
                        .HasForeignKey("MainStuffSerialCode", "MainStuffSerialStuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MainStuffSerial");

                    b.Navigation("Unit");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("lena.Domains.PaymentDueDate", b =>
                {
                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.PaymentDueDate", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.Order", "Order")
                        .WithMany("PaymentDueDates")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.PaymentType", "PaymentType")
                        .WithMany("PaymentDueDates")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("lena.Domains.PreparingSending", b =>
                {
                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.PreparingSending", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.SendPermission", "SendPermission")
                        .WithMany("PreparingSendings")
                        .HasForeignKey("SendPermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Unit", "Unit")
                        .WithMany("PreparingSendings")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SendPermission");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("lena.Domains.PreparingSendingItem", b =>
                {
                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.PreparingSendingItem", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.PreparingSending", "PreparingSending")
                        .WithMany("PreparingSendingItems")
                        .HasForeignKey("PreparingSendingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Stuff", "Stuff")
                        .WithMany("PreparingSendingItems")
                        .HasForeignKey("StuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Unit", "Unit")
                        .WithMany("PreparingSendingItems")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.StuffSerial", "StuffSerial")
                        .WithMany("PreparingSendingItems")
                        .HasForeignKey("StuffSerialCode", "StuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PreparingSending");

                    b.Navigation("Stuff");

                    b.Navigation("StuffSerial");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("lena.Domains.ProductionMaterialRequest", b =>
                {
                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.ProductionMaterialRequest", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.ProductionOrder", "ProductionOrder")
                        .WithMany("ProductionMaterialRequests")
                        .HasForeignKey("ProductionOrderId");

                    b.Navigation("ProductionOrder");
                });

            modelBuilder.Entity("lena.Domains.ProductionOrder", b =>
                {
                    b.HasOne("lena.Domains.CalendarEvent", "CalendarEvent")
                        .WithOne("ProductionOrder")
                        .HasForeignKey("lena.Domains.ProductionOrder", "CalendarEventId");

                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.ProductionOrder", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.ProductionSchedule", "ProductionSchedule")
                        .WithMany("ProductionOrders")
                        .HasForeignKey("ProductionScheduleId");

                    b.HasOne("lena.Domains.Employee", "Employee")
                        .WithMany("ProductionOrders")
                        .HasForeignKey("SupervisorEmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Unit", "Unit")
                        .WithMany("ProductionOrders")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.WorkPlanStep", "WorkPlanStep")
                        .WithMany("ProductionOrders")
                        .HasForeignKey("WorkPlanStepId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CalendarEvent");

                    b.Navigation("Employee");

                    b.Navigation("ProductionSchedule");

                    b.Navigation("Unit");

                    b.Navigation("WorkPlanStep");
                });

            modelBuilder.Entity("lena.Domains.ProductionPlan", b =>
                {
                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.ProductionPlan", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.ProductionRequest", "ProductionRequest")
                        .WithMany("ProductionPlans")
                        .HasForeignKey("ProductionRequestId");

                    b.HasOne("lena.Domains.Unit", "Unit")
                        .WithMany("ProductionPlans")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.BillOfMaterial", "BillOfMaterial")
                        .WithMany("ProductionPlans")
                        .HasForeignKey("BillOfMaterialVersion", "BillOfMaterialStuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BillOfMaterial");

                    b.Navigation("ProductionRequest");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("lena.Domains.ProductionPlanDetail", b =>
                {
                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.ProductionPlanDetail", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.ProductionPlanDetailLevel", "ProductionPlanDetailLevel")
                        .WithMany("ProductionPlanDetails")
                        .HasForeignKey("ProductionPlanDetailLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.ProductionPlan", "ProductionPlan")
                        .WithMany("ProductionPlanDetails")
                        .HasForeignKey("ProductionPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Unit", "Unit")
                        .WithMany("ProductionPlanDetails")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.BillOfMaterial", "BillOfMaterial")
                        .WithMany("ProductionPlanDetails")
                        .HasForeignKey("BillOfMaterialVersion", "BillOfMaterialStuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BillOfMaterial");

                    b.Navigation("ProductionPlan");

                    b.Navigation("ProductionPlanDetailLevel");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("lena.Domains.ProductionRequest", b =>
                {
                    b.HasOne("lena.Domains.CheckOrderItem", "CheckOrderItem")
                        .WithMany("ProductionRequests")
                        .HasForeignKey("CheckOrderItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.ProductionRequest", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.Unit", "Unit")
                        .WithMany("ProductionRequests")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CheckOrderItem");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("lena.Domains.ProductionSchedule", b =>
                {
                    b.HasOne("lena.Domains.CalendarEvent", "CalendarEvent")
                        .WithOne("ProductionSchedule")
                        .HasForeignKey("lena.Domains.ProductionSchedule", "CalendarEventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.ProductionSchedule", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.ProductionPlanDetail", "ProductionPlanDetail")
                        .WithMany("ProductionSchedules")
                        .HasForeignKey("ProductionPlanDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.WorkPlanStep", "WorkPlanStep")
                        .WithMany("ProductionSchedules")
                        .HasForeignKey("WorkPlanStepId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CalendarEvent");

                    b.Navigation("ProductionPlanDetail");

                    b.Navigation("WorkPlanStep");
                });

            modelBuilder.Entity("lena.Domains.PurchaseOrder", b =>
                {
                    b.HasOne("lena.Domains.Currency", "Currency")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("CurrencyId");

                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.PurchaseOrder", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.Risk", "LatestRisk")
                        .WithOne()
                        .HasForeignKey("lena.Domains.PurchaseOrder", "LatestRiskId");

                    b.HasOne("lena.Domains.Cooperator", "Provider")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("ProviderId");

                    b.HasOne("lena.Domains.PurchaseOrderGroup", "PurchaseOrderGroup")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("PurchaseOrderGroupId");

                    b.HasOne("lena.Domains.PurchaseOrderStepDetail", "PurchaseOrderStepDetail")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("PurchaseOrderStepDetailId");

                    b.HasOne("lena.Domains.Stuff", "Stuff")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("StuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Supplier", "Supplier")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("SupplierId");

                    b.HasOne("lena.Domains.Unit", "Unit")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.StuffProvider", "StuffProvider")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("StuffId", "ProviderId");

                    b.Navigation("Currency");

                    b.Navigation("LatestRisk");

                    b.Navigation("Provider");

                    b.Navigation("PurchaseOrderGroup");

                    b.Navigation("PurchaseOrderStepDetail");

                    b.Navigation("Stuff");

                    b.Navigation("StuffProvider");

                    b.Navigation("Supplier");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("lena.Domains.PurchaseOrderDetail", b =>
                {
                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.PurchaseOrderDetail", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderDetails")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.PurchaseRequest", "PurchaseRequest")
                        .WithMany("PurchaseOrderDetails")
                        .HasForeignKey("PurchaseRequestId");

                    b.HasOne("lena.Domains.Unit", "Unit")
                        .WithMany("PurchaseOrderDetails")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PurchaseOrder");

                    b.Navigation("PurchaseRequest");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("lena.Domains.PurchaseOrderGroup", b =>
                {
                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.PurchaseOrderGroup", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lena.Domains.PurchaseRequest", b =>
                {
                    b.HasOne("lena.Domains.CostCenter", "CostCenter")
                        .WithMany("PurchaseRequests")
                        .HasForeignKey("CostCenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Department", "Department")
                        .WithMany("PurchaseRequests")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("lena.Domains.Employee", "EmployeeRequester")
                        .WithMany("PurchaseRequestEmployeeRequesters")
                        .HasForeignKey("EmployeeRequesterId");

                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.PurchaseRequest", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.Risk", "LatestRisk")
                        .WithOne()
                        .HasForeignKey("lena.Domains.PurchaseRequest", "LatestRiskId");

                    b.HasOne("lena.Domains.PlanCode", "PlanCode")
                        .WithMany("PurchaseRequests")
                        .HasForeignKey("PlanCodeId");

                    b.HasOne("lena.Domains.PurchaseRequestStepDetail", "PurchaseRequestStepDetail")
                        .WithMany("PurchaseRequests")
                        .HasForeignKey("PurchaseRequestStepDetailId");

                    b.HasOne("lena.Domains.Employee", "ResponsibleEmployee")
                        .WithMany("PurchaseRequestResponsibleEmployees")
                        .HasForeignKey("ResponsibleEmployeeId");

                    b.HasOne("lena.Domains.Stuff", "Stuff")
                        .WithMany("PurchaseRequests")
                        .HasForeignKey("StuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Unit", "Unit")
                        .WithMany("PurchaseRequests")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CostCenter");

                    b.Navigation("Department");

                    b.Navigation("EmployeeRequester");

                    b.Navigation("LatestRisk");

                    b.Navigation("PlanCode");

                    b.Navigation("PurchaseRequestStepDetail");

                    b.Navigation("ResponsibleEmployee");

                    b.Navigation("Stuff");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("lena.Domains.PurchaseStep", b =>
                {
                    b.HasOne("lena.Domains.CargoItem", "CargoItem")
                        .WithMany("PurchaseSteps")
                        .HasForeignKey("CargoItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.HowToBuyDetail", "HowToBuyDetail")
                        .WithMany("PurchaseSteps")
                        .HasForeignKey("HowToBuyDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.PurchaseStep", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("CargoItem");

                    b.Navigation("HowToBuyDetail");
                });

            modelBuilder.Entity("lena.Domains.QtyCorrectionRequest", b =>
                {
                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.QtyCorrectionRequest", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.StockCheckingTag", "StockCheckingTag")
                        .WithMany("QtyCorrectionRequests")
                        .HasForeignKey("StockCheckingTagId");

                    b.HasOne("lena.Domains.Stuff", "Stuff")
                        .WithMany("QtyCorrectionRequests")
                        .HasForeignKey("StuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Unit", "Unit")
                        .WithMany("QtyCorrectionRequests")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Warehouse", "Warehouse")
                        .WithMany("QtyCorrectionRequests")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.StuffSerial", "StuffSerial")
                        .WithMany("QtyCorrectionRequests")
                        .HasForeignKey("StuffSerialCode", "StuffId");

                    b.Navigation("StockCheckingTag");

                    b.Navigation("Stuff");

                    b.Navigation("StuffSerial");

                    b.Navigation("Unit");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("lena.Domains.QualityControl", b =>
                {
                    b.HasOne("lena.Domains.User", "ConfirmationUser")
                        .WithMany("QualityControls")
                        .HasForeignKey("ConfirmationUserId");

                    b.HasOne("lena.Domains.Department", "Department")
                        .WithMany("QualityControls")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Employee", "Employee")
                        .WithMany("QualityControls")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.QualityControl", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.Stuff", "Stuff")
                        .WithMany("QualityControls")
                        .HasForeignKey("StuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Unit", "Unit")
                        .WithMany("QualityControls")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Warehouse", "Warehouse")
                        .WithMany("QualityControls")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ConfirmationUser");

                    b.Navigation("Department");

                    b.Navigation("Employee");

                    b.Navigation("Stuff");

                    b.Navigation("Unit");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("lena.Domains.QualityControlConfirmation", b =>
                {
                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.QualityControlConfirmation", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.QualityControl", "QualityControl")
                        .WithOne("QualityControlConfirmation")
                        .HasForeignKey("lena.Domains.QualityControlConfirmation", "QualityControlId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("QualityControl");
                });

            modelBuilder.Entity("lena.Domains.QualityControlConfirmationItem", b =>
                {
                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.QualityControlConfirmationItem", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.QualityControlConfirmation", "QualityControlConfirmation")
                        .WithMany("QualityControlConfirmationItems")
                        .HasForeignKey("QualityControlConfirmationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.QualityControlItem", "QualityControlItem")
                        .WithOne("QualityControlConfirmationItem")
                        .HasForeignKey("lena.Domains.QualityControlConfirmationItem", "QualityControlItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Unit", "Unit")
                        .WithMany("QualityControlConfirmationItems")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("QualityControlConfirmation");

                    b.Navigation("QualityControlItem");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("lena.Domains.QualityControlItem", b =>
                {
                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.QualityControlItem", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.QualityControl", "QualityControl")
                        .WithMany("QualityControlItems")
                        .HasForeignKey("QualityControlId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.ReturnOfSale", "ReturnOfSale")
                        .WithMany("QualityControlItems")
                        .HasForeignKey("ReturnOfSaleId");

                    b.HasOne("lena.Domains.Stuff", "Stuff")
                        .WithMany("QualityControlItems")
                        .HasForeignKey("StuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Unit", "Unit")
                        .WithMany("QualityControlItems")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.StuffSerial", "StuffSerial")
                        .WithMany("QualityControlItems")
                        .HasForeignKey("StuffSerialCode", "StuffId");

                    b.Navigation("QualityControl");

                    b.Navigation("ReturnOfSale");

                    b.Navigation("Stuff");

                    b.Navigation("StuffSerial");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("lena.Domains.Receipt", b =>
                {
                    b.HasOne("lena.Domains.Cooperator", "Cooperator")
                        .WithMany("Receipts")
                        .HasForeignKey("CooperatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.Receipt", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Cooperator");
                });

            modelBuilder.Entity("lena.Domains.RepairProductionFault", b =>
                {
                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.RepairProductionFault", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.ProductionFaultType", "ProductionFaultType")
                        .WithMany("RepairProductionFaults")
                        .HasForeignKey("ProductionFaultTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.RepairProduction", "RepairProduction")
                        .WithMany("RepairProductionFaults")
                        .HasForeignKey("RepairProductionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductionFaultType");

                    b.Navigation("RepairProduction");
                });

            modelBuilder.Entity("lena.Domains.ResponseConditionalQualityControl", b =>
                {
                    b.HasOne("lena.Domains.ConditionalQualityControl", "ConditionalQualityControl")
                        .WithOne("ResponseConditionalQualityControl")
                        .HasForeignKey("lena.Domains.ResponseConditionalQualityControl", "ConditionalQualityControlId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.ResponseConditionalQualityControl", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("ConditionalQualityControl");
                });

            modelBuilder.Entity("lena.Domains.ResponseStuffRequestItem", b =>
                {
                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.ResponseStuffRequestItem", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.RequestWarehouseIssue", "RequestWarehouseIssue")
                        .WithMany("ResponseStuffRequestItems")
                        .HasForeignKey("RequestWarehouseIssueId");

                    b.HasOne("lena.Domains.Stuff", "Stuff")
                        .WithMany("ResponseStuffRequestItems")
                        .HasForeignKey("StuffId");

                    b.HasOne("lena.Domains.StuffRequestItem", "StuffRequestItem")
                        .WithMany("ResponseStuffRequestItems")
                        .HasForeignKey("StuffRequestItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.BillOfMaterial", "BillOfMaterial")
                        .WithMany("ResponseStuffRequestItems")
                        .HasForeignKey("BillOfMaterialVersion", "StuffId");

                    b.Navigation("BillOfMaterial");

                    b.Navigation("RequestWarehouseIssue");

                    b.Navigation("Stuff");

                    b.Navigation("StuffRequestItem");
                });

            modelBuilder.Entity("lena.Domains.ResponseWarehouseIssue", b =>
                {
                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.ResponseWarehouseIssue", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.WarehouseIssue", "WarehouseIssue")
                        .WithOne("ResponseWarehouseIssue")
                        .HasForeignKey("lena.Domains.ResponseWarehouseIssue", "WarehouseIssueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("WarehouseIssue");
                });

            modelBuilder.Entity("lena.Domains.ReturnOfSale", b =>
                {
                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.ReturnOfSale", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.ReturnStoreReceipt", "ReturnStoreReceipt")
                        .WithMany("ReturnOfSales")
                        .HasForeignKey("ReturnStoreReceiptId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.SendProduct", "SendProduct")
                        .WithMany("ReturnOfSales")
                        .HasForeignKey("SendProductId");

                    b.HasOne("lena.Domains.Stuff", "Stuff")
                        .WithMany("ReturnOfSales")
                        .HasForeignKey("StuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Unit", "Unit")
                        .WithMany("ReturnOfSales")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.StuffSerial", "StuffSerial")
                        .WithMany("ReturnOfSales")
                        .HasForeignKey("StuffSerialCode", "StuffId");

                    b.Navigation("ReturnStoreReceipt");

                    b.Navigation("SendProduct");

                    b.Navigation("Stuff");

                    b.Navigation("StuffSerial");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("lena.Domains.SendPermission", b =>
                {
                    b.HasOne("lena.Domains.User", "Confirmer")
                        .WithMany("SendPermissions")
                        .HasForeignKey("ConfirmerUserId");

                    b.HasOne("lena.Domains.ExitReceiptRequest", "ExitReceiptRequest")
                        .WithMany("SendPermissions")
                        .HasForeignKey("ExitReceiptRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.SendPermission", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.Unit", "Unit")
                        .WithMany("SendPermissions")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Confirmer");

                    b.Navigation("ExitReceiptRequest");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("lena.Domains.SendProduct", b =>
                {
                    b.HasOne("lena.Domains.ExitReceipt", "ExitReceipt")
                        .WithMany("SendProducts")
                        .HasForeignKey("ExitReceiptId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.SendProduct", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.PreparingSending", "PreparingSending")
                        .WithOne("SendProduct")
                        .HasForeignKey("lena.Domains.SendProduct", "PreparingSendingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ExitReceipt");

                    b.Navigation("PreparingSending");
                });

            modelBuilder.Entity("lena.Domains.StockAdjustment", b =>
                {
                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.StockAdjustment", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.StockCheckingTag", "StockCheckingTag")
                        .WithMany("StockAdjustments")
                        .HasForeignKey("StockCheckingTagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Unit", "Unit")
                        .WithMany("StockAdjustments")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StockCheckingTag");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("lena.Domains.StoreReceipt", b =>
                {
                    b.HasOne("lena.Domains.Cooperator", "Cooperator")
                        .WithMany("StoreReceipts")
                        .HasForeignKey("CooperatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.PurchasePrice", "CurrentPurchasePrice")
                        .WithOne("ActiveForStoreReceipt")
                        .HasForeignKey("lena.Domains.StoreReceipt", "CurrentPurchasePriceId");

                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.StoreReceipt", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.InboundCargo", "InboundCargo")
                        .WithMany("StoreReceipts")
                        .HasForeignKey("InboundCargoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Receipt", "Receipt")
                        .WithMany("StoreReceipts")
                        .HasForeignKey("ReceiptId");

                    b.HasOne("lena.Domains.Stuff", "Stuff")
                        .WithMany("StoreReceipts")
                        .HasForeignKey("StuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Unit", "Unit")
                        .WithMany("StoreReceipts")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Warehouse", "Warehouse")
                        .WithMany("StoreReceipts")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.BillOfMaterial", "BillOfMaterial")
                        .WithMany("StoreReceipts")
                        .HasForeignKey("BillOfMaterialVersion", "StuffId");

                    b.Navigation("BillOfMaterial");

                    b.Navigation("Cooperator");

                    b.Navigation("CurrentPurchasePrice");

                    b.Navigation("InboundCargo");

                    b.Navigation("Receipt");

                    b.Navigation("Stuff");

                    b.Navigation("Unit");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("lena.Domains.StuffPrice", b =>
                {
                    b.HasOne("lena.Domains.User", "ConfirmUser")
                        .WithMany("StuffPrices")
                        .HasForeignKey("ConfirmUserId");

                    b.HasOne("lena.Domains.Currency", "Currency")
                        .WithMany("StuffPrices")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.StuffPrice", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.Stuff", "Stuff")
                        .WithMany("StuffPrices")
                        .HasForeignKey("StuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ConfirmUser");

                    b.Navigation("Currency");

                    b.Navigation("Stuff");
                });

            modelBuilder.Entity("lena.Domains.StuffRequest", b =>
                {
                    b.HasOne("lena.Domains.Warehouse", "FromWarehouse")
                        .WithMany("ExportStuffRequests")
                        .HasForeignKey("FromWarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.StuffRequest", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.ProductionMaterialRequest", "ProductionMaterialRequest")
                        .WithMany("StuffRequests")
                        .HasForeignKey("ProductionMaterialRequestId");

                    b.HasOne("lena.Domains.ScrumEntity", "ScrumEntity")
                        .WithMany("StuffRequests")
                        .HasForeignKey("ScrumEntityId");

                    b.HasOne("lena.Domains.Department", "ToDepartment")
                        .WithMany("StuffRequests")
                        .HasForeignKey("ToDepartmentId");

                    b.HasOne("lena.Domains.Employee", "ToEmployee")
                        .WithMany("StuffRequests")
                        .HasForeignKey("ToEmployeeId");

                    b.HasOne("lena.Domains.Warehouse", "ToWarehouse")
                        .WithMany("ImportStuffRequests")
                        .HasForeignKey("ToWarehouseId");

                    b.Navigation("FromWarehouse");

                    b.Navigation("ProductionMaterialRequest");

                    b.Navigation("ScrumEntity");

                    b.Navigation("ToDepartment");

                    b.Navigation("ToEmployee");

                    b.Navigation("ToWarehouse");
                });

            modelBuilder.Entity("lena.Domains.StuffRequestItem", b =>
                {
                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.StuffRequestItem", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.Stuff", "Stuff")
                        .WithMany("StuffRequestItems")
                        .HasForeignKey("StuffId");

                    b.HasOne("lena.Domains.StuffRequest", "StuffRequest")
                        .WithMany("StuffRequestItems")
                        .HasForeignKey("StuffRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Unit", "Unit")
                        .WithMany("StuffRequestItems")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.BillOfMaterial", "BillOfMaterial")
                        .WithMany("StuffRequestItems")
                        .HasForeignKey("BillOfMaterialVersion", "StuffId");

                    b.Navigation("BillOfMaterial");

                    b.Navigation("Stuff");

                    b.Navigation("StuffRequest");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("lena.Domains.StuffRequestMilestone", b =>
                {
                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.StuffRequestMilestone", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lena.Domains.StuffRequestMilestoneDetail", b =>
                {
                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.StuffRequestMilestoneDetail", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.Stuff", "Stuff")
                        .WithMany("StuffRequestMilestoneDetails")
                        .HasForeignKey("StuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.StuffRequestMilestone", "StuffRequestMilestone")
                        .WithMany("StuffRequestMilestoneDetails")
                        .HasForeignKey("StuffRequestMilestoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Unit", "Unit")
                        .WithMany("StuffRequestMilestoneDetails")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Stuff");

                    b.Navigation("StuffRequestMilestone");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("lena.Domains.Transport", b =>
                {
                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.Transport", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.Transport", "EntranceTransport")
                        .WithOne("OutputTransport")
                        .HasForeignKey("lena.Domains.Transport", "OutputTransportId");

                    b.Navigation("EntranceTransport");
                });

            modelBuilder.Entity("lena.Domains.WarehouseIssue", b =>
                {
                    b.HasOne("lena.Domains.Warehouse", "FromWarehouse")
                        .WithMany("ExportWarehouseIssues")
                        .HasForeignKey("FromWarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.WarehouseIssue", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.Department", "ToDepartment")
                        .WithMany("WarehouseIssues")
                        .HasForeignKey("ToDepartmentId");

                    b.HasOne("lena.Domains.Employee", "ToEmployee")
                        .WithMany("WarehouseIssues")
                        .HasForeignKey("ToEmployeeId");

                    b.HasOne("lena.Domains.Warehouse", "ToWarehouse")
                        .WithMany("ImportWarehouseIssues")
                        .HasForeignKey("ToWarehouseId");

                    b.Navigation("FromWarehouse");

                    b.Navigation("ToDepartment");

                    b.Navigation("ToEmployee");

                    b.Navigation("ToWarehouse");
                });

            modelBuilder.Entity("lena.Domains.WarehouseIssueItem", b =>
                {
                    b.HasOne("lena.Domains.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.WarehouseIssueItem", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.Stuff", "Stuff")
                        .WithMany("WarehouseIssueItems")
                        .HasForeignKey("StuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.Unit", "Unit")
                        .WithMany("WarehouseIssueItems")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.WarehouseIssue", "WarehouseIssue")
                        .WithMany("WarehouseIssueItems")
                        .HasForeignKey("WarehouseIssueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.BillOfMaterial", "BillOfMaterial")
                        .WithMany("WarehouseIssueItems")
                        .HasForeignKey("BillOfMaterialVersion", "StuffId");

                    b.HasOne("lena.Domains.StuffSerial", "StuffSerial")
                        .WithMany("WarehouseIssueItems")
                        .HasForeignKey("StuffSerialCode", "StuffId");

                    b.Navigation("BillOfMaterial");

                    b.Navigation("Stuff");

                    b.Navigation("StuffSerial");

                    b.Navigation("Unit");

                    b.Navigation("WarehouseIssue");
                });

            modelBuilder.Entity("lena.Domains.ReturnOfSaleStatusLog", b =>
                {
                    b.HasOne("lena.Domains.BaseEntityLog", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.ReturnOfSaleStatusLog", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.ReturnOfSale", "ReturnOfSale")
                        .WithMany("ReturnOfSaleStatusLogs")
                        .HasForeignKey("ReturnOfSaleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ReturnOfSale");
                });

            modelBuilder.Entity("lena.Domains.CooperatorFinancialAccount", b =>
                {
                    b.HasOne("lena.Domains.Cooperator", "Cooperator")
                        .WithMany("CooperatorFinancialAccount")
                        .HasForeignKey("CooperatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.FinancialAccount", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.CooperatorFinancialAccount", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Cooperator");
                });

            modelBuilder.Entity("lena.Domains.PostMessageSend", b =>
                {
                    b.HasOne("lena.Domains.MessageSend", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.PostMessageSend", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.Post", "Post")
                        .WithMany("PostMessageSends")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("lena.Domains.UserMessageSend", b =>
                {
                    b.HasOne("lena.Domains.MessageSend", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.UserMessageSend", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lena.Domains.RepairProductionStuffDetail", b =>
                {
                    b.HasOne("lena.Domains.ProductionStuffDetail", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.RepairProductionStuffDetail", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.RepairProductionFault", "RepairProductionFault")
                        .WithMany("RepairProductionStuffDetails")
                        .HasForeignKey("RepairProductionFaultId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RepairProductionFault");
                });

            modelBuilder.Entity("lena.Domains.ScrumBackLog", b =>
                {
                    b.HasOne("lena.Domains.ScrumEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.ScrumBackLog", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.ScrumSprint", "ScrumSprint")
                        .WithMany("ScrumBackLogs")
                        .HasForeignKey("ScrumSprintId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ScrumSprint");
                });

            modelBuilder.Entity("lena.Domains.ScrumProject", b =>
                {
                    b.HasOne("lena.Domains.ScrumEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.ScrumProject", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.ScrumProjectGroup", "ScrumProjectGroup")
                        .WithMany("ScrumProjects")
                        .HasForeignKey("ScrumProjectGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ScrumProjectGroup");
                });

            modelBuilder.Entity("lena.Domains.ScrumProjectGroup", b =>
                {
                    b.HasOne("lena.Domains.ScrumEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.ScrumProjectGroup", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lena.Domains.ScrumSprint", b =>
                {
                    b.HasOne("lena.Domains.ScrumEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.ScrumSprint", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.ScrumProject", "ScrumProject")
                        .WithMany("ScrumSprints")
                        .HasForeignKey("ScrumProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ScrumProject");
                });

            modelBuilder.Entity("lena.Domains.ScrumTask", b =>
                {
                    b.HasOne("lena.Domains.ScrumEntity", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.ScrumTask", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.ScrumBackLog", "ScrumBackLog")
                        .WithMany("ScrumTasks")
                        .HasForeignKey("ScrumBackLogId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.ScrumTaskType", "ScrumTaskType")
                        .WithMany("ScrumTasks")
                        .HasForeignKey("ScrumTaskTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.User", "User")
                        .WithMany("ScrumTasks")
                        .HasForeignKey("UserId");

                    b.Navigation("ScrumBackLog");

                    b.Navigation("ScrumTaskType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lena.Domains.ProductionSerialProfile", b =>
                {
                    b.HasOne("lena.Domains.SerialProfile", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.ProductionSerialProfile", "Code", "StuffId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lena.Domains.StoreReceiptSerialProfile", b =>
                {
                    b.HasOne("lena.Domains.StoreReceipt", "StoreReceipt")
                        .WithOne("StoreReceiptSerialProfile")
                        .HasForeignKey("lena.Domains.StoreReceiptSerialProfile", "StoreReceiptId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.SerialProfile", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.StoreReceiptSerialProfile", "Code", "StuffId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("StoreReceipt");
                });

            modelBuilder.Entity("lena.Domains.MachineType", b =>
                {
                    b.HasOne("lena.Domains.WorkStationPart", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.MachineType", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lena.Domains.OperatorType", b =>
                {
                    b.HasOne("lena.Domains.WorkStationPart", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.OperatorType", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lena.Domains.GiveBackExitReceiptRequest", b =>
                {
                    b.HasOne("lena.Domains.ExitReceiptRequest", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.GiveBackExitReceiptRequest", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.QualityControl", "QualityControl")
                        .WithMany("GiveBackExitReceiptRequests")
                        .HasForeignKey("QualityControlId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("QualityControl");
                });

            modelBuilder.Entity("lena.Domains.OrderItemBlock", b =>
                {
                    b.HasOne("lena.Domains.ExitReceiptRequest", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.OrderItemBlock", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.OrderItem", "OrderItem")
                        .WithMany("OrderItemBlocks")
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("lena.Domains.ReturnedExitReceiptRequest", b =>
                {
                    b.HasOne("lena.Domains.ExitReceiptRequest", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.ReturnedExitReceiptRequest", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.ReturnStoreReceipt", "ReturnStoreReceipt")
                        .WithMany("ReturnedExitReceiptRequests")
                        .HasForeignKey("ReturnStoreReceiptId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ReturnStoreReceipt");
                });

            modelBuilder.Entity("lena.Domains.CustomQualityControl", b =>
                {
                    b.HasOne("lena.Domains.QualityControl", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.CustomQualityControl", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lena.Domains.ProductionQualityControl", b =>
                {
                    b.HasOne("lena.Domains.QualityControl", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.ProductionQualityControl", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lena.Domains.ReceiptQualityControl", b =>
                {
                    b.HasOne("lena.Domains.QualityControl", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.ReceiptQualityControl", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.StoreReceipt", "StoreReceipt")
                        .WithMany("ReceiptQualityControls")
                        .HasForeignKey("StoreReceiptId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StoreReceipt");
                });

            modelBuilder.Entity("lena.Domains.NewShopping", b =>
                {
                    b.HasOne("lena.Domains.StoreReceipt", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.NewShopping", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.LadingItem", "LadingItem")
                        .WithMany("NewShoppings")
                        .HasForeignKey("LadingItemId");

                    b.Navigation("LadingItem");
                });

            modelBuilder.Entity("lena.Domains.ReturnStoreReceipt", b =>
                {
                    b.HasOne("lena.Domains.StoreReceipt", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.ReturnStoreReceipt", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lena.Domains.EstimatedPurchasePrice", b =>
                {
                    b.HasOne("lena.Domains.StuffPrice", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.EstimatedPurchasePrice", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.PurchaseOrder", "PurchaseOrder")
                        .WithMany("EstimatedPurchasePrices")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("lena.Domains.PurchasePrice", b =>
                {
                    b.HasOne("lena.Domains.StuffPrice", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.PurchasePrice", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.StoreReceipt", "StoreReceipt")
                        .WithMany("PurchasePrices")
                        .HasForeignKey("StoreReceiptId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StoreReceipt");
                });

            modelBuilder.Entity("lena.Domains.StuffBasePrice", b =>
                {
                    b.HasOne("lena.Domains.StuffPrice", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.StuffBasePrice", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.PurchaseOrder", "PurchaseOrder")
                        .WithOne("StuffBasePrice")
                        .HasForeignKey("lena.Domains.StuffBasePrice", "PurchaseOrderId");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("lena.Domains.InboundCargo", b =>
                {
                    b.HasOne("lena.Domains.Transport", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.InboundCargo", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lena.Domains.OutboundCargo", b =>
                {
                    b.HasOne("lena.Domains.Transport", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.OutboundCargo", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lena.Domains.RequestWarehouseIssue", b =>
                {
                    b.HasOne("lena.Domains.WarehouseIssue", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.RequestWarehouseIssue", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lena.Domains.ProjectWork", b =>
                {
                    b.HasOne("lena.Domains.ScrumBackLog", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.ProjectWork", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lena.Domains.Project", b =>
                {
                    b.HasOne("lena.Domains.ScrumProject", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.Project", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lena.Domains.ProjectHeader", b =>
                {
                    b.HasOne("lena.Domains.ScrumProjectGroup", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.ProjectHeader", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("lena.Domains.Cooperator", "OwnerCustomer")
                        .WithMany("ProjectHeaders")
                        .HasForeignKey("OwnerCustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OwnerCustomer");
                });

            modelBuilder.Entity("lena.Domains.ProjectStep", b =>
                {
                    b.HasOne("lena.Domains.ScrumSprint", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.ProjectStep", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lena.Domains.ProjectWorkItem", b =>
                {
                    b.HasOne("lena.Domains.ScrumTask", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.ProjectWorkItem", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lena.Domains.OrderItemProductionBlock", b =>
                {
                    b.HasOne("lena.Domains.OrderItemBlock", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.OrderItemProductionBlock", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lena.Domains.OrderItemSaleBlock", b =>
                {
                    b.HasOne("lena.Domains.CheckOrderItem", "CheckOrderItem")
                        .WithMany("OrderItemSaleBlocks")
                        .HasForeignKey("CheckOrderItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lena.Domains.OrderItemBlock", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.OrderItemSaleBlock", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("CheckOrderItem");
                });

            modelBuilder.Entity("lena.Domains.ProductRequest", b =>
                {
                    b.HasOne("lena.Domains.Project", null)
                        .WithOne()
                        .HasForeignKey("lena.Domains.ProductRequest", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lena.Domains.Allocation", b =>
                {
                    b.Navigation("BankOrderIssues");
                });

            modelBuilder.Entity("lena.Domains.ApiInfo", b =>
                {
                    b.Navigation("Indicators");
                });

            modelBuilder.Entity("lena.Domains.Asset", b =>
                {
                    b.Navigation("AssetLogs");

                    b.Navigation("AssetTransferRequests");
                });

            modelBuilder.Entity("lena.Domains.Bank", b =>
                {
                    b.Navigation("BankOrders");

                    b.Navigation("FinancialAccountDetails");
                });

            modelBuilder.Entity("lena.Domains.BankOrderContractType", b =>
                {
                    b.Navigation("BankOrders");
                });

            modelBuilder.Entity("lena.Domains.BankOrderDetail", b =>
                {
                    b.Navigation("CottageItems");
                });

            modelBuilder.Entity("lena.Domains.BankOrderIssueType", b =>
                {
                    b.Navigation("BankOrderIssues");
                });

            modelBuilder.Entity("lena.Domains.BankOrderStatusType", b =>
                {
                    b.Navigation("BankOrderLogs");
                });

            modelBuilder.Entity("lena.Domains.BaseEntity", b =>
                {
                    b.Navigation("BaseEntityConfirmations");

                    b.Navigation("BaseEntityDocuments");

                    b.Navigation("BaseEntityLogs");

                    b.Navigation("ScrumEntities");
                });

            modelBuilder.Entity("lena.Domains.BaseEntityConfirmType", b =>
                {
                    b.Navigation("BaseEntityConfirmations");
                });

            modelBuilder.Entity("lena.Domains.BaseEntityDocumentType", b =>
                {
                    b.Navigation("BaseEntityDocuments");
                });

            modelBuilder.Entity("lena.Domains.BaseTransaction", b =>
                {
                    b.Navigation("ReferencedTransactions");

                    b.Navigation("SerialBuffer");
                });

            modelBuilder.Entity("lena.Domains.BillOfMaterial", b =>
                {
                    b.Navigation("BaseTransactions");

                    b.Navigation("BillOfMaterialDetails");

                    b.Navigation("BillOfMaterialDocuments");

                    b.Navigation("BillOfMaterialPublishRequests");

                    b.Navigation("GeneralStuffRequests");

                    b.Navigation("LatestBillOfMaterialPublishRequest");

                    b.Navigation("OrderItems");

                    b.Navigation("ProductionPlanDetails");

                    b.Navigation("ProductionPlans");

                    b.Navigation("ResponseStuffRequestItems");

                    b.Navigation("StoreReceipts");

                    b.Navigation("StuffRequestItems");

                    b.Navigation("StuffSerials");

                    b.Navigation("UsedInBillOfMaterialDetails");

                    b.Navigation("UsedInEquivalentStuffs");

                    b.Navigation("WarehouseIssueItems");

                    b.Navigation("WorkPlans");
                });

            modelBuilder.Entity("lena.Domains.BillOfMaterialDetail", b =>
                {
                    b.Navigation("EquivalentStuffs");

                    b.Navigation("OperationConsumingMaterials");
                });

            modelBuilder.Entity("lena.Domains.BillOfMaterialDocumentType", b =>
                {
                    b.Navigation("BillOfMaterialDocuments");
                });

            modelBuilder.Entity("lena.Domains.BillOfMaterialPriceHistory", b =>
                {
                    b.Navigation("BillOfMaterialPriceHistoryCurrencyRates");

                    b.Navigation("BillOfMaterialPriceHistoryDetails");
                });

            modelBuilder.Entity("lena.Domains.CalendarEvent", b =>
                {
                    b.Navigation("ProductionOrder");

                    b.Navigation("ProductionSchedule");
                });

            modelBuilder.Entity("lena.Domains.City", b =>
                {
                    b.Navigation("Cooperators");

                    b.Navigation("Ladings");
                });

            modelBuilder.Entity("lena.Domains.ContactType", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("lena.Domains.Cooperator", b =>
                {
                    b.Navigation("BankOrders");

                    b.Navigation("BaseEntityDocuments");

                    b.Navigation("Contacts");

                    b.Navigation("CooperatorContacts");

                    b.Navigation("CooperatorFinancialAccount");

                    b.Navigation("CurrencyRates");

                    b.Navigation("CustomerComplaints");

                    b.Navigation("CustomerStuffs");

                    b.Navigation("DetailedCodeConfirmationRequests");

                    b.Navigation("ExitReceiptRequests");

                    b.Navigation("ExitReceipts");

                    b.Navigation("FinanceItemAllocationSummaries");

                    b.Navigation("FinanceItems");

                    b.Navigation("Finances");

                    b.Navigation("InboundCargoCooperators");

                    b.Navigation("LinkSerials");

                    b.Navigation("ManualTransactions");

                    b.Navigation("Orders");

                    b.Navigation("PriceAnnunciations");

                    b.Navigation("PriceInquries");

                    b.Navigation("ProjectERPs");

                    b.Navigation("ProjectHeaders");

                    b.Navigation("ProviderHowToBuys");

                    b.Navigation("ProvisionersCartItemDetails");

                    b.Navigation("ProvisionersCartItems");

                    b.Navigation("PurchaseOrders");

                    b.Navigation("Receipts");

                    b.Navigation("SerialProfiles");

                    b.Navigation("StoreReceipts");

                    b.Navigation("StuffProviders");
                });

            modelBuilder.Entity("lena.Domains.CostCenter", b =>
                {
                    b.Navigation("PurchaseRequests");
                });

            modelBuilder.Entity("lena.Domains.Cottage", b =>
                {
                    b.Navigation("CottageItems");
                });

            modelBuilder.Entity("lena.Domains.Country", b =>
                {
                    b.Navigation("BankOrders");

                    b.Navigation("Cities");
                });

            modelBuilder.Entity("lena.Domains.Currency", b =>
                {
                    b.Navigation("BankOrders");

                    b.Navigation("BillOfMaterialPriceHistories");

                    b.Navigation("BillOfMaterialPriceHistoryFromCurrencyRates");

                    b.Navigation("BillOfMaterialPriceHistoryToCurrencyRates");

                    b.Navigation("Finances");

                    b.Navigation("FinancialAccounts");

                    b.Navigation("FinancialLimits");

                    b.Navigation("FromCurrencyRates");

                    b.Navigation("PriceAnnunciationItems");

                    b.Navigation("PriceInquries");

                    b.Navigation("PurchaseOrders");

                    b.Navigation("StuffBasePriceCustoms");

                    b.Navigation("StuffPriceDiscrepancies");

                    b.Navigation("StuffPrices");

                    b.Navigation("ToCurrencyRates");
                });

            modelBuilder.Entity("lena.Domains.CustomerComplaint", b =>
                {
                    b.Navigation("CustomerComplaintSummaries");
                });

            modelBuilder.Entity("lena.Domains.CustomerComplaintSummary", b =>
                {
                    b.Navigation("CustomerComplaintDepartments");
                });

            modelBuilder.Entity("lena.Domains.CustomerStuff", b =>
                {
                    b.Navigation("CustomerStuffVersions");

                    b.Navigation("IranKhordoSerials");
                });

            modelBuilder.Entity("lena.Domains.CustomerStuffVersion", b =>
                {
                    b.Navigation("IranKhordoSerials");
                });

            modelBuilder.Entity("lena.Domains.Customhouse", b =>
                {
                    b.Navigation("BankOrders");

                    b.Navigation("Ladings");
                });

            modelBuilder.Entity("lena.Domains.Department", b =>
                {
                    b.Navigation("BaseEntityConfirmTypes");

                    b.Navigation("ChildDepartments");

                    b.Navigation("CustomerComplaintDepartments");

                    b.Navigation("DepartmentAssetLogs");

                    b.Navigation("DepartmentAssets");

                    b.Navigation("DepartmentManager");

                    b.Navigation("DepartmentWorkShifts");

                    b.Navigation("EmployeeComplainDepartments");

                    b.Navigation("Employees");

                    b.Navigation("EvaluationCategories");

                    b.Navigation("GeneralStuffRequests");

                    b.Navigation("Indicators");

                    b.Navigation("IndicatorWeights");

                    b.Navigation("MeetingApprovals");

                    b.Navigation("NewDepartmentAssetTransferRequests");

                    b.Navigation("ProductionLines");

                    b.Navigation("ProductionPerformanceInfoes");

                    b.Navigation("PurchaseRequests");

                    b.Navigation("QualityControls");

                    b.Navigation("ScrumEntities");

                    b.Navigation("StuffPurchaseCategories");

                    b.Navigation("StuffRequests");

                    b.Navigation("Stuffs");

                    b.Navigation("WarehouseIssues");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("lena.Domains.DocumentType", b =>
                {
                    b.Navigation("ScrumEntityDocuments");
                });

            modelBuilder.Entity("lena.Domains.Employee", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("EmployeeAssetLogs");

                    b.Navigation("EmployeeAssets");

                    b.Navigation("EmployeeComplains");

                    b.Navigation("EmployeeEvaluations");

                    b.Navigation("EmployeeOperatorTypes");

                    b.Navigation("EmployeeWorkReports");

                    b.Navigation("GeneralStuffRequests");

                    b.Navigation("MeetingParticipants");

                    b.Navigation("NewEmployeeAssetTransferRequests");

                    b.Navigation("OrganizationPostHistories");

                    b.Navigation("ProductionLineEmployeeIntervals");

                    b.Navigation("ProductionOperationEmployees");

                    b.Navigation("ProductionOperatorEmployeeBans");

                    b.Navigation("ProductionOperatorEmployees");

                    b.Navigation("ProductionOrders");

                    b.Navigation("ProductionTerminal");

                    b.Navigation("ProjectERPEvents");

                    b.Navigation("ProjectERPResponsibleEmployees");

                    b.Navigation("ProjectERPTasks");

                    b.Navigation("PurchaseRequestEmployeeRequesters");

                    b.Navigation("PurchaseRequestResponsibleEmployees");

                    b.Navigation("QualityControls");

                    b.Navigation("SoftwareWorkReports");

                    b.Navigation("StuffRequests");

                    b.Navigation("Stuffs");

                    b.Navigation("Supplier");

                    b.Navigation("WarehouseIssues");
                });

            modelBuilder.Entity("lena.Domains.EmployeeComplain", b =>
                {
                    b.Navigation("EmployeeComplainItems");
                });

            modelBuilder.Entity("lena.Domains.EmployeeComplainDepartment", b =>
                {
                    b.Navigation("ResponsibleDepartments");
                });

            modelBuilder.Entity("lena.Domains.EmployeeComplainItem", b =>
                {
                    b.Navigation("EmployeeComplainDepartments");

                    b.Navigation("QAReviewEmployeeComplains");
                });

            modelBuilder.Entity("lena.Domains.EmployeeEvaluation", b =>
                {
                    b.Navigation("EmployeeEvaluationItems");
                });

            modelBuilder.Entity("lena.Domains.EmployeeEvaluationItem", b =>
                {
                    b.Navigation("EmployeeEvaluationItemDetails");
                });

            modelBuilder.Entity("lena.Domains.EmployeeEvaluationPeriod", b =>
                {
                    b.Navigation("EmployeeEvaluationPeriodItems");

                    b.Navigation("EmployeeEvaluations");
                });

            modelBuilder.Entity("lena.Domains.EmployeeWorkReport", b =>
                {
                    b.Navigation("EmployeeWorkReportItems");
                });

            modelBuilder.Entity("lena.Domains.Enactment", b =>
                {
                    b.Navigation("CurrentEnactmentActionProcessLog");

                    b.Navigation("EnactmentActionProcessLogs");
                });

            modelBuilder.Entity("lena.Domains.EnactmentActionProcess", b =>
                {
                    b.Navigation("EnactmentActionProcessLogs");
                });

            modelBuilder.Entity("lena.Domains.EquivalentStuff", b =>
                {
                    b.Navigation("EquivalentStuffDetails");

                    b.Navigation("EquivalentStuffUsages");
                });

            modelBuilder.Entity("lena.Domains.EvaluationCategory", b =>
                {
                    b.Navigation("EmployeeEvaluationItems");

                    b.Navigation("EmployeeEvaluationPeriodItems");

                    b.Navigation("EvaluationCategoryItems");
                });

            modelBuilder.Entity("lena.Domains.EvaluationCategoryItem", b =>
                {
                    b.Navigation("EmployeeEvaluationItemDetails");
                });

            modelBuilder.Entity("lena.Domains.ExitReceiptDeleteRequest", b =>
                {
                    b.Navigation("ExitReceiptDeleteRequestConfirmationLogs");

                    b.Navigation("ExitReceiptDeleteRequestStuffSerials");
                });

            modelBuilder.Entity("lena.Domains.ExitReceiptRequestType", b =>
                {
                    b.Navigation("ExitReceiptRequests");

                    b.Navigation("WarehouseExitReceiptTypes");
                });

            modelBuilder.Entity("lena.Domains.FaildProductionOperation", b =>
                {
                    b.Navigation("BaseProductionOperation");
                });

            modelBuilder.Entity("lena.Domains.Finance", b =>
                {
                    b.Navigation("FinanceAllocations");

                    b.Navigation("FinanceAllocationSummary");

                    b.Navigation("FinanceConfirmations");

                    b.Navigation("FinanceItemAllocationSummaries");

                    b.Navigation("FinanceItems");

                    b.Navigation("FinancialDocuments");
                });

            modelBuilder.Entity("lena.Domains.FinanceConfirmation", b =>
                {
                    b.Navigation("LatestFinance");
                });

            modelBuilder.Entity("lena.Domains.FinanceItem", b =>
                {
                    b.Navigation("FinanceItemConfirmations");
                });

            modelBuilder.Entity("lena.Domains.FinanceItemAllocationSummary", b =>
                {
                    b.Navigation("FinanceItem");
                });

            modelBuilder.Entity("lena.Domains.FinanceItemConfirmation", b =>
                {
                    b.Navigation("LatestFinanceItem");
                });

            modelBuilder.Entity("lena.Domains.FinancialAccount", b =>
                {
                    b.Navigation("FinancialAccountDetails");

                    b.Navigation("FinancialDocuments");

                    b.Navigation("FinancialDocumentTransfers");

                    b.Navigation("FinancialTransactions");
                });

            modelBuilder.Entity("lena.Domains.FinancialAccountDetail", b =>
                {
                    b.Navigation("Finances");
                });

            modelBuilder.Entity("lena.Domains.FinancialDocumentCost", b =>
                {
                    b.Navigation("BankOrderCosts");

                    b.Navigation("CargoCosts");

                    b.Navigation("LadingCosts");

                    b.Navigation("PurchaseOrderCosts");
                });

            modelBuilder.Entity("lena.Domains.FinancialDocumentDiscount", b =>
                {
                    b.Navigation("PurchaseOrderDiscounts");
                });

            modelBuilder.Entity("lena.Domains.FinancialTransaction", b =>
                {
                    b.Navigation("ReferencedFinancialTransactions");

                    b.Navigation("RialRates");
                });

            modelBuilder.Entity("lena.Domains.FinancialTransactionBatch", b =>
                {
                    b.Navigation("BaseEntity");

                    b.Navigation("FinancialTransactions");
                });

            modelBuilder.Entity("lena.Domains.FinancialTransactionType", b =>
                {
                    b.Navigation("FinancialTransactions");

                    b.Navigation("ReferenceFinancialTransactionTypes");
                });

            modelBuilder.Entity("lena.Domains.Forwarder", b =>
                {
                    b.Navigation("CargoItems");
                });

            modelBuilder.Entity("lena.Domains.GeneralStuffRequest", b =>
                {
                    b.Navigation("GeneralStuffRequestDetails");
                });

            modelBuilder.Entity("lena.Domains.HowToBuy", b =>
                {
                    b.Navigation("CargoItems");

                    b.Navigation("HowToBuyDetails");

                    b.Navigation("ProviderHowToBuys");

                    b.Navigation("StuffBasePriceCustoms");
                });

            modelBuilder.Entity("lena.Domains.HowToBuyDetail", b =>
                {
                    b.Navigation("PurchaseSteps");
                });

            modelBuilder.Entity("lena.Domains.IndicatorWeight", b =>
                {
                    b.Navigation("WeightDays");
                });

            modelBuilder.Entity("lena.Domains.LadingBankOrderStatus", b =>
                {
                    b.Navigation("LadingBankOrderLogs");
                });

            modelBuilder.Entity("lena.Domains.LadingBlocker", b =>
                {
                    b.Navigation("Ladings");
                });

            modelBuilder.Entity("lena.Domains.LadingChangeRequest", b =>
                {
                    b.Navigation("AddLadingItemDetailChanges");

                    b.Navigation("DeleteLadingItemDetailChanges");

                    b.Navigation("EditLadingItemDetailChanges");
                });

            modelBuilder.Entity("lena.Domains.LadingCustomhouseStatus", b =>
                {
                    b.Navigation("LadingCustomhouseLogs");
                });

            modelBuilder.Entity("lena.Domains.LinkSerial", b =>
                {
                    b.Navigation("IranKhodroSerial");
                });

            modelBuilder.Entity("lena.Domains.Machine", b =>
                {
                    b.Navigation("ProductionOperatorMachineEmployees");
                });

            modelBuilder.Entity("lena.Domains.MachineTypeOperatorType", b =>
                {
                    b.Navigation("ProductionOperators");
                });

            modelBuilder.Entity("lena.Domains.MachineTypeParameter", b =>
                {
                    b.Navigation("OperationSequenceMachineTypeParameters");
                });

            modelBuilder.Entity("lena.Domains.Message", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("lena.Domains.MinutesMeeting", b =>
                {
                    b.Navigation("MeetingAprovals");

                    b.Navigation("MeetingParticipants");
                });

            modelBuilder.Entity("lena.Domains.NotificationGroup", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("lena.Domains.Operation", b =>
                {
                    b.Navigation("OperationSequences");

                    b.Navigation("ProductionFaultTypes");

                    b.Navigation("ProductionLineEmployeeIntervalDetails");

                    b.Navigation("ProductionOperations");

                    b.Navigation("ProductionOperators");

                    b.Navigation("SerialFailedOperationFaultOperations");

                    b.Navigation("WorkStationOperations");
                });

            modelBuilder.Entity("lena.Domains.OperationSequence", b =>
                {
                    b.Navigation("OperationConsumingMaterials");

                    b.Navigation("OperationSequenceMachineTypeParameters");

                    b.Navigation("ProductionOperators");
                });

            modelBuilder.Entity("lena.Domains.OperationType", b =>
                {
                    b.Navigation("Operations");
                });

            modelBuilder.Entity("lena.Domains.Order", b =>
                {
                    b.Navigation("OrderDocuments");

                    b.Navigation("OrderItems");

                    b.Navigation("PaymentDueDates");
                });

            modelBuilder.Entity("lena.Domains.OrderType", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("lena.Domains.OrganizationJob", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("lena.Domains.OrganizationPost", b =>
                {
                    b.Navigation("DepartmentManager");

                    b.Navigation("Employees");

                    b.Navigation("OrganizationJobs");

                    b.Navigation("OrganizationPosts");

                    b.Navigation("PostHistories");
                });

            modelBuilder.Entity("lena.Domains.PaymentType", b =>
                {
                    b.Navigation("PaymentDueDates");
                });

            modelBuilder.Entity("lena.Domains.PermissionRequest", b =>
                {
                    b.Navigation("PermissionRequestActions");
                });

            modelBuilder.Entity("lena.Domains.PlanCode", b =>
                {
                    b.Navigation("PurchaseRequests");
                });

            modelBuilder.Entity("lena.Domains.Post", b =>
                {
                    b.Navigation("ChildPosts");

                    b.Navigation("PostMessageSends");

                    b.Navigation("UserPosts");
                });

            modelBuilder.Entity("lena.Domains.PriceAnnunciation", b =>
                {
                    b.Navigation("PriceAnnunciationItems");
                });

            modelBuilder.Entity("lena.Domains.PriceAnnunciationItem", b =>
                {
                    b.Navigation("ExitReceiptRequests");
                });

            modelBuilder.Entity("lena.Domains.Printer", b =>
                {
                    b.Navigation("PrinterSettings");
                });

            modelBuilder.Entity("lena.Domains.Production", b =>
                {
                    b.Navigation("ProductionOperations");

                    b.Navigation("ProductionStuffDetails");

                    b.Navigation("RepairProductions");
                });

            modelBuilder.Entity("lena.Domains.ProductionFaultType", b =>
                {
                    b.Navigation("RepairProductionFaults");

                    b.Navigation("StuffProductionFaultTypes");
                });

            modelBuilder.Entity("lena.Domains.ProductionLine", b =>
                {
                    b.Navigation("DetailedCodeConfirmationRequests");

                    b.Navigation("ProductionLineEmployeeIntervals");

                    b.Navigation("ProductionLineProductionSteps");

                    b.Navigation("ProductionLineWorkShifts");

                    b.Navigation("ProductionTerminals");

                    b.Navigation("WorkPlanSteps");

                    b.Navigation("WorkStations");
                });

            modelBuilder.Entity("lena.Domains.ProductionLineEmployeeInterval", b =>
                {
                    b.Navigation("ProductionLineEmployeeIntervalDetails");
                });

            modelBuilder.Entity("lena.Domains.ProductionLineProductionStep", b =>
                {
                    b.Navigation("WorkPlanSteps");
                });

            modelBuilder.Entity("lena.Domains.ProductionLineRepairUnit", b =>
                {
                    b.Navigation("ProductionLines");
                });

            modelBuilder.Entity("lena.Domains.ProductionOperation", b =>
                {
                    b.Navigation("Decomposition");

                    b.Navigation("ProductionStuffDetails");

                    b.Navigation("ReworkFaildProductionOperation");

                    b.Navigation("SerialFailedOperations");
                });

            modelBuilder.Entity("lena.Domains.ProductionOperationEmployee", b =>
                {
                    b.Navigation("SerialFailedOperationFaultOperationEmployees");
                });

            modelBuilder.Entity("lena.Domains.ProductionOperationEmployeeGroup", b =>
                {
                    b.Navigation("ProductionOperationEmployees");

                    b.Navigation("ProductionOperations");
                });

            modelBuilder.Entity("lena.Domains.ProductionOperator", b =>
                {
                    b.Navigation("ProductionOperations");

                    b.Navigation("ProductionOperatorEmployeeBans");

                    b.Navigation("ProductionOperatorMachineEmployees");
                });

            modelBuilder.Entity("lena.Domains.ProductionOperatorEmployeeBan", b =>
                {
                    b.Navigation("SerialFailedOperationFaultOperationEmployees");
                });

            modelBuilder.Entity("lena.Domains.ProductionPlanDetailLevel", b =>
                {
                    b.Navigation("Childs");

                    b.Navigation("ProductionPlanDetails");
                });

            modelBuilder.Entity("lena.Domains.ProductionStep", b =>
                {
                    b.Navigation("BillOfMaterials");

                    b.Navigation("ProductionLineProductionSteps");

                    b.Navigation("WorkPlanSteps");
                });

            modelBuilder.Entity("lena.Domains.ProductionTerminal", b =>
                {
                    b.Navigation("ProductionOperations");

                    b.Navigation("ProductionOperatorMachineEmployees");

                    b.Navigation("SerialBuffers");
                });

            modelBuilder.Entity("lena.Domains.ProductionYear", b =>
                {
                    b.Navigation("IranKhordoSerials");
                });

            modelBuilder.Entity("lena.Domains.ProjectERP", b =>
                {
                    b.Navigation("ProjectERPDocuments");

                    b.Navigation("ProjectERPEvents");

                    b.Navigation("ProjectERPLabelLogs");

                    b.Navigation("ProjectERPResponsibleEmployees");

                    b.Navigation("ProjectERPTasks");
                });

            modelBuilder.Entity("lena.Domains.ProjectERPCategory", b =>
                {
                    b.Navigation("ProjectERPs");
                });

            modelBuilder.Entity("lena.Domains.ProjectERPDocumentType", b =>
                {
                    b.Navigation("ProjectERPDocuments");
                });

            modelBuilder.Entity("lena.Domains.ProjectERPEvent", b =>
                {
                    b.Navigation("ProjectERPEventDocuments");
                });

            modelBuilder.Entity("lena.Domains.ProjectERPEventActionType", b =>
                {
                    b.Navigation("ProjectERPEvents");
                });

            modelBuilder.Entity("lena.Domains.ProjectERPEventCategory", b =>
                {
                    b.Navigation("ProjectERPEvents");
                });

            modelBuilder.Entity("lena.Domains.ProjectERPLabel", b =>
                {
                    b.Navigation("ProjectERPLabelLogs");

                    b.Navigation("ProjectERPTaskLabelLogs");
                });

            modelBuilder.Entity("lena.Domains.ProjectERPPhase", b =>
                {
                    b.Navigation("ProjectERPs");
                });

            modelBuilder.Entity("lena.Domains.ProjectERPTask", b =>
                {
                    b.Navigation("EmployeeWorkReports");

                    b.Navigation("PredecessorProjectERPTaskDependency");

                    b.Navigation("ProjectERPTaskDependencies");

                    b.Navigation("ProjectERPTaskDocuments");

                    b.Navigation("ProjectERPTaskLabelLogs");
                });

            modelBuilder.Entity("lena.Domains.ProjectERPTaskCategory", b =>
                {
                    b.Navigation("ProjectERPTasks");
                });

            modelBuilder.Entity("lena.Domains.ProjectERPType", b =>
                {
                    b.Navigation("ProjectERPs");
                });

            modelBuilder.Entity("lena.Domains.Proposal", b =>
                {
                    b.Navigation("QAReviews");

                    b.Navigation("ReviewCommittees");
                });

            modelBuilder.Entity("lena.Domains.ProposalType", b =>
                {
                    b.Navigation("Proposals");
                });

            modelBuilder.Entity("lena.Domains.ProvisionersCart", b =>
                {
                    b.Navigation("ProvisionersCartItems");
                });

            modelBuilder.Entity("lena.Domains.ProvisionersCartItem", b =>
                {
                    b.Navigation("ProvisionersCartItemDetails");
                });

            modelBuilder.Entity("lena.Domains.PurchaseOrderStep", b =>
                {
                    b.Navigation("PurchaseOrderStepDetails");
                });

            modelBuilder.Entity("lena.Domains.PurchaseOrderStepDetail", b =>
                {
                    b.Navigation("PurchaseOrders");
                });

            modelBuilder.Entity("lena.Domains.PurchaseRequestStep", b =>
                {
                    b.Navigation("PurchaseRequestStepDetails");
                });

            modelBuilder.Entity("lena.Domains.PurchaseRequestStepDetail", b =>
                {
                    b.Navigation("PurchaseRequests");
                });

            modelBuilder.Entity("lena.Domains.QualityControlAccepter", b =>
                {
                    b.Navigation("ConditionalQualityControls");
                });

            modelBuilder.Entity("lena.Domains.QualityControlConfirmationTest", b =>
                {
                    b.Navigation("QualityControlConfirmationTestItems");
                });

            modelBuilder.Entity("lena.Domains.QualityControlTest", b =>
                {
                    b.Navigation("QualityControlTestConditions");

                    b.Navigation("QualityControlTestEquipments");

                    b.Navigation("QualityControlTestImportanceDegrees");

                    b.Navigation("QualityControlTestOperations");

                    b.Navigation("StuffQualityControlTests");
                });

            modelBuilder.Entity("lena.Domains.QualityControlTestCondition", b =>
                {
                    b.Navigation("StuffQualityControlTestConditions");

                    b.Navigation("StuffQualityControlTests");
                });

            modelBuilder.Entity("lena.Domains.QualityControlTestEquipment", b =>
                {
                    b.Navigation("StuffQualityControlTestEquipments");

                    b.Navigation("StuffQualityControlTests");
                });

            modelBuilder.Entity("lena.Domains.QualityControlTestImportanceDegree", b =>
                {
                    b.Navigation("StuffQualityControlTestImportanceDegrees");

                    b.Navigation("StuffQualityControlTests");
                });

            modelBuilder.Entity("lena.Domains.QualityControlTestOperation", b =>
                {
                    b.Navigation("StuffQualityControlTestOperations");

                    b.Navigation("StuffQualityControlTests");
                });

            modelBuilder.Entity("lena.Domains.QualityControlTestUnit", b =>
                {
                    b.Navigation("StuffQualityControlTestConditions");
                });

            modelBuilder.Entity("lena.Domains.RepairProduction", b =>
                {
                    b.Navigation("FaildProductionOperations");

                    b.Navigation("ReferenceRepairProduction");

                    b.Navigation("RepairProductionFaults");

                    b.Navigation("SerialFailedOperations");
                });

            modelBuilder.Entity("lena.Domains.Report", b =>
                {
                    b.Navigation("PrinterSettings");

                    b.Navigation("ReportVersions");
                });

            modelBuilder.Entity("lena.Domains.RialRate", b =>
                {
                    b.Navigation("ReferencedRialRates");
                });

            modelBuilder.Entity("lena.Domains.Risk", b =>
                {
                    b.Navigation("RiskResolves");

                    b.Navigation("RiskStatuses");
                });

            modelBuilder.Entity("lena.Domains.RiskParameter", b =>
                {
                    b.Navigation("RiskStatuses");
                });

            modelBuilder.Entity("lena.Domains.RiskResolve", b =>
                {
                    b.Navigation("RiskStatus");
                });

            modelBuilder.Entity("lena.Domains.ScrumEntity", b =>
                {
                    b.Navigation("GeneralStuffRequests");

                    b.Navigation("NextScrumEntityDependencies");

                    b.Navigation("Notifications");

                    b.Navigation("RequisiteScrumEntityDependencies");

                    b.Navigation("ScrumEntityComments");

                    b.Navigation("ScrumEntityDocuments");

                    b.Navigation("ScrumEntityLogs");

                    b.Navigation("StuffRequests");
                });

            modelBuilder.Entity("lena.Domains.ScrumTaskType", b =>
                {
                    b.Navigation("ScrumTasks");
                });

            modelBuilder.Entity("lena.Domains.SecurityAction", b =>
                {
                    b.Navigation("ActionParamaters");

                    b.Navigation("PermissionRequestActions");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("lena.Domains.SecurityActionGroup", b =>
                {
                    b.Navigation("SecurityActions");
                });

            modelBuilder.Entity("lena.Domains.SerialFailedOperation", b =>
                {
                    b.Navigation("SerialFailedOperationFaultOperations");
                });

            modelBuilder.Entity("lena.Domains.SerialFailedOperationFaultOperation", b =>
                {
                    b.Navigation("SerialFailedOperationFaultOperationEmployees");
                });

            modelBuilder.Entity("lena.Domains.SerialProfile", b =>
                {
                    b.Navigation("StuffSerials");
                });

            modelBuilder.Entity("lena.Domains.SoftwareWorkReport", b =>
                {
                    b.Navigation("SoftwareWorkReportItems");
                });

            modelBuilder.Entity("lena.Domains.StockChecking", b =>
                {
                    b.Navigation("StockCheckingPersons");

                    b.Navigation("StockCheckingStuffs");

                    b.Navigation("StockCheckingWarehouses");
                });

            modelBuilder.Entity("lena.Domains.StockCheckingTag", b =>
                {
                    b.Navigation("QtyCorrectionRequests");

                    b.Navigation("StockAdjustments");

                    b.Navigation("TagCountings");
                });

            modelBuilder.Entity("lena.Domains.StockCheckingWarehouse", b =>
                {
                    b.Navigation("StockCheckingTags");
                });

            modelBuilder.Entity("lena.Domains.StockPlace", b =>
                {
                    b.Navigation("StuffStockPlaces");
                });

            modelBuilder.Entity("lena.Domains.StoreReceiptDeleteRequest", b =>
                {
                    b.Navigation("StoreReceiptDeleteRequestConfirmationLogs");

                    b.Navigation("StoreReceiptDeleteRequestStuffSerials");
                });

            modelBuilder.Entity("lena.Domains.Stuff", b =>
                {
                    b.Navigation("BaseTransactions");

                    b.Navigation("BillOfMaterialDetails");

                    b.Navigation("BillOfMaterialPriceHistories");

                    b.Navigation("BillOfMaterials");

                    b.Navigation("CustomerStuffs");

                    b.Navigation("Decompositions");

                    b.Navigation("EquivalentStuffDetails");

                    b.Navigation("ExitReceiptRequests");

                    b.Navigation("GeneralStuffRequests");

                    b.Navigation("ManualTransactions");

                    b.Navigation("OrderItems");

                    b.Navigation("PreparingSendingItems");

                    b.Navigation("PriceAnnunciationItems");

                    b.Navigation("PriceInquries");

                    b.Navigation("ProductionLineEmployeeIntervals");

                    b.Navigation("ProductionStuffDetails");

                    b.Navigation("ProjectERPs");

                    b.Navigation("PurchaseOrders");

                    b.Navigation("PurchaseRequests");

                    b.Navigation("QtyCorrectionRequests");

                    b.Navigation("QualityControlItems");

                    b.Navigation("QualityControls");

                    b.Navigation("ResponseStuffRequestItems");

                    b.Navigation("ReturnOfSales");

                    b.Navigation("SerialProfiles");

                    b.Navigation("StockCheckingStuffs");

                    b.Navigation("StockCheckingTags");

                    b.Navigation("StoreReceipts");

                    b.Navigation("StuffAssets");

                    b.Navigation("StuffDefinitionRequests");

                    b.Navigation("StuffDocuments");

                    b.Navigation("StuffFractionTemporaryStuffs");

                    b.Navigation("StuffPrices");

                    b.Navigation("StuffProductionFaultTypes");

                    b.Navigation("StuffProviders");

                    b.Navigation("StuffQualityControlObservations");

                    b.Navigation("StuffQualityControlTests");

                    b.Navigation("StuffRequestItems");

                    b.Navigation("StuffRequestMilestoneDetails");

                    b.Navigation("StuffSerials");

                    b.Navigation("StuffStockPlaces");

                    b.Navigation("SuppliesPurchaserUsers");

                    b.Navigation("WarehouseIssueItems");
                });

            modelBuilder.Entity("lena.Domains.StuffCategory", b =>
                {
                    b.Navigation("Stuffs");

                    b.Navigation("SubStuffCategories");
                });

            modelBuilder.Entity("lena.Domains.StuffDefinitionRequest", b =>
                {
                    b.Navigation("Stuff");
                });

            modelBuilder.Entity("lena.Domains.StuffHSGroup", b =>
                {
                    b.Navigation("BankOrderDetails");

                    b.Navigation("CottageItems");

                    b.Navigation("Stuffs");
                });

            modelBuilder.Entity("lena.Domains.StuffProvider", b =>
                {
                    b.Navigation("PurchaseOrders");
                });

            modelBuilder.Entity("lena.Domains.StuffPurchaseCategory", b =>
                {
                    b.Navigation("Details");

                    b.Navigation("StuffDefinitionRequests");

                    b.Navigation("Stuffs");
                });

            modelBuilder.Entity("lena.Domains.StuffQualityControlTest", b =>
                {
                    b.Navigation("QualityControlConfirmationTests");

                    b.Navigation("StuffQualityControlTestConditions");

                    b.Navigation("StuffQualityControlTestEquipments");

                    b.Navigation("StuffQualityControlTestImportanceDegrees");

                    b.Navigation("StuffQualityControlTestOperations");
                });

            modelBuilder.Entity("lena.Domains.StuffSerial", b =>
                {
                    b.Navigation("Asset");

                    b.Navigation("BaseTransactions");

                    b.Navigation("Decompositions");

                    b.Navigation("ExitReceiptDeleteRequestStuffSerials");

                    b.Navigation("LinkSerial");

                    b.Navigation("PartitionStuffSerials");

                    b.Navigation("PreparingSendingItems");

                    b.Navigation("Productions");

                    b.Navigation("ProductionStuffDetails");

                    b.Navigation("QtyCorrectionRequests");

                    b.Navigation("QualityControlItems");

                    b.Navigation("ReturnOfSales");

                    b.Navigation("ReturnSerialToPreviousStateRequests");

                    b.Navigation("StockCheckingTags");

                    b.Navigation("StoreReceiptDeleteRequestStuffSerials");

                    b.Navigation("WarehouseIssueItems");
                });

            modelBuilder.Entity("lena.Domains.Supplier", b =>
                {
                    b.Navigation("ProvisionersCarts");

                    b.Navigation("PurchaseOrders");
                });

            modelBuilder.Entity("lena.Domains.TagType", b =>
                {
                    b.Navigation("StockCheckings");

                    b.Navigation("StockCheckingTags");
                });

            modelBuilder.Entity("lena.Domains.TestCondition", b =>
                {
                    b.Navigation("QualityControlConfirmationTests");

                    b.Navigation("QualityControlTestConditions");
                });

            modelBuilder.Entity("lena.Domains.TestEquipment", b =>
                {
                    b.Navigation("QualityControlTestEquipments");
                });

            modelBuilder.Entity("lena.Domains.TestImportanceDegree", b =>
                {
                    b.Navigation("QualityControlTestImportanceDegrees");
                });

            modelBuilder.Entity("lena.Domains.TestOperation", b =>
                {
                    b.Navigation("QualityControlTestOperations");
                });

            modelBuilder.Entity("lena.Domains.TicketSoftware", b =>
                {
                    b.Navigation("TicketComments");

                    b.Navigation("TicketFiles");
                });

            modelBuilder.Entity("lena.Domains.TransactionBatch", b =>
                {
                    b.Navigation("BaseEntity");

                    b.Navigation("BaseTransactions");
                });

            modelBuilder.Entity("lena.Domains.TransactionType", b =>
                {
                    b.Navigation("BaseTransactions");

                    b.Navigation("ReferenceTransactionTypes");
                });

            modelBuilder.Entity("lena.Domains.Unit", b =>
                {
                    b.Navigation("BankOrderDetails");

                    b.Navigation("BaseTransactions");

                    b.Navigation("BillOfMaterialDetails");

                    b.Navigation("BillOfMaterials");

                    b.Navigation("CargoItemDetails");

                    b.Navigation("CargoItems");

                    b.Navigation("ConditionalQualityControlItems");

                    b.Navigation("EquivalentStuffDetails");

                    b.Navigation("ExitReceiptDeleteRequestStuffSerials");

                    b.Navigation("ExitReceiptRequests");

                    b.Navigation("GeneralStuffRequests");

                    b.Navigation("ManualTransactions");

                    b.Navigation("NewShoppingDetails");

                    b.Navigation("OrderItemChangeRequests");

                    b.Navigation("OrderItems");

                    b.Navigation("PartitionStuffSerials");

                    b.Navigation("PreparingSendingItems");

                    b.Navigation("PreparingSendings");

                    b.Navigation("ProductionOrders");

                    b.Navigation("ProductionPlanDetails");

                    b.Navigation("ProductionPlans");

                    b.Navigation("ProductionRequests");

                    b.Navigation("ProductionStuffDetails");

                    b.Navigation("PurchaseOrderDetails");

                    b.Navigation("PurchaseOrders");

                    b.Navigation("PurchaseRequests");

                    b.Navigation("QtyCorrectionRequests");

                    b.Navigation("QualityControlConfirmationItems");

                    b.Navigation("QualityControlItems");

                    b.Navigation("QualityControls");

                    b.Navigation("ReturnOfSales");

                    b.Navigation("SendPermissions");

                    b.Navigation("StockAdjustments");

                    b.Navigation("StockCheckingTags");

                    b.Navigation("StoreReceiptDeleteRequestStuffSerials");

                    b.Navigation("StoreReceipts");

                    b.Navigation("StuffRequestItems");

                    b.Navigation("StuffRequestMilestoneDetails");

                    b.Navigation("StuffSerials");

                    b.Navigation("TagCountings");

                    b.Navigation("WarehouseIssueItems");
                });

            modelBuilder.Entity("lena.Domains.UnitType", b =>
                {
                    b.Navigation("StuffDefinitionRequests");

                    b.Navigation("Stuffs");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("lena.Domains.User", b =>
                {
                    b.Navigation("Allocations");

                    b.Navigation("BankOrderStateLogs");

                    b.Navigation("BaseEntities");

                    b.Navigation("BaseEntityConfirmations");

                    b.Navigation("BaseEntityConfirmTypes");

                    b.Navigation("BaseEntityDocuments");

                    b.Navigation("BaseEntityLogs");

                    b.Navigation("BillOfMaterialDocuments");

                    b.Navigation("BillOfMaterialPriceHistories");

                    b.Navigation("BillOfMaterials");

                    b.Navigation("BossMinutesMeetings");

                    b.Navigation("CargoItemLogs");

                    b.Navigation("ConditionalQualityControls");

                    b.Navigation("ConfirmerCostCenters");

                    b.Navigation("ConfirmerDetailedCodeConfirmationRequest");

                    b.Navigation("ConfirmerLadingChangeRequests");

                    b.Navigation("ConfirmerSerilReturnRequests");

                    b.Navigation("ConfirmerUserAssetTransfers");

                    b.Navigation("ConfirmSerialFailedOperations");

                    b.Navigation("CorrectiveActions");

                    b.Navigation("CreatorOfTicketSoftwares");

                    b.Navigation("CustomerComplaints");

                    b.Navigation("CustomerComplaintSummaries");

                    b.Navigation("DemandantLadingChangeRequests");

                    b.Navigation("DemandantSerialReturnRequests");

                    b.Navigation("DepartmentManagers");

                    b.Navigation("DetailedCodeConfirmationRequest");

                    b.Navigation("Employee");

                    b.Navigation("EmployeeComplains");

                    b.Navigation("EmployeeEvaluationItems");

                    b.Navigation("EmployeeEvaluationPeriods");

                    b.Navigation("EmployeeEvaluations");

                    b.Navigation("EmployeeWorkReports");

                    b.Navigation("EnactmentActionProcessLogs");

                    b.Navigation("EntityLogs");

                    b.Navigation("ExitReceiptDeleteRequestConfirmationLogs");

                    b.Navigation("FinanceAllocations");

                    b.Navigation("FinanceConfirmations");

                    b.Navigation("FinanceItemConfirmations");

                    b.Navigation("FinanceItems");

                    b.Navigation("Finances");

                    b.Navigation("FinancialLimits");

                    b.Navigation("FinancialTransactionBatches");

                    b.Navigation("FromUserMessageRelations");

                    b.Navigation("GeneralStuffRequests");

                    b.Navigation("IranKhodroSerials");

                    b.Navigation("LadingBankOrderLogs");

                    b.Navigation("LadingCustomhouseLogs");

                    b.Navigation("LinkerLinkSerials");

                    b.Navigation("LinkSerials");

                    b.Navigation("MeetingParticipants");

                    b.Navigation("Memberships");

                    b.Navigation("Messages");

                    b.Navigation("MessageSends");

                    b.Navigation("ModifierOfTicketSoftwares");

                    b.Navigation("Notifications");

                    b.Navigation("OperatorMeetingAprovals");

                    b.Navigation("OrderDocuments");

                    b.Navigation("OrganizationJobs");

                    b.Navigation("OrganizationPostHistories");

                    b.Navigation("OrganizationPosts");

                    b.Navigation("PaymentSuggestStatusLogs");

                    b.Navigation("PermissionRequestConfirmators");

                    b.Navigation("PermissionRequestIntenders");

                    b.Navigation("PermissionRequestRegisterars");

                    b.Navigation("Permissions");

                    b.Navigation("PlanCodes");

                    b.Navigation("PriceAnnunciationItems");

                    b.Navigation("PriceAnnunciations");

                    b.Navigation("PriceInquries");

                    b.Navigation("Printers");

                    b.Navigation("PrinterSettings");

                    b.Navigation("ProductionLineRepairUnits");

                    b.Navigation("ProductionOperatorEmployeeBans");

                    b.Navigation("ProjectERPDocuments");

                    b.Navigation("ProjectERPEventDocuments");

                    b.Navigation("ProjectERPEventRecords");

                    b.Navigation("ProjectERPs");

                    b.Navigation("ProjectERPTaskDocuments");

                    b.Navigation("ProjectERPTasks");

                    b.Navigation("ProposalQAReviews");

                    b.Navigation("ProposalRecommenderUsers");

                    b.Navigation("ProposalResponsibles");

                    b.Navigation("ProposalReviewCommitteeResponsibles");

                    b.Navigation("ProposalReviewCommittees");

                    b.Navigation("Proposals");

                    b.Navigation("ProposalTypes");

                    b.Navigation("ProvisionersCarts");

                    b.Navigation("PurchaseOrderStepDetails");

                    b.Navigation("PurchaseOrderSteps");

                    b.Navigation("PurchaseRequestEditLogs");

                    b.Navigation("PurchaseRequestStepDetails");

                    b.Navigation("PurchaseRequestSteps");

                    b.Navigation("QAReviewCreatorUserEmployeeComplains");

                    b.Navigation("QAReviewResponsibleUserEmployeeComplains");

                    b.Navigation("QualityControlConfirmationTestItems");

                    b.Navigation("QualityControlConfirmationTests");

                    b.Navigation("QualityControls");

                    b.Navigation("QualityControlSamples");

                    b.Navigation("ReceivedFinanceItems");

                    b.Navigation("RegistrantMinutesMeetings");

                    b.Navigation("ReportVersions");

                    b.Navigation("RequestingUserAssetTransfers");

                    b.Navigation("ReviewerSerialFailedOperations");

                    b.Navigation("RiskResolveCreator");

                    b.Navigation("RiskResolveReviewer");

                    b.Navigation("Risks");

                    b.Navigation("RiskStatuses");

                    b.Navigation("ScrumEntityComments");

                    b.Navigation("ScrumEntityLogs");

                    b.Navigation("ScrumTasks");

                    b.Navigation("SecretaryMinutesMeetings");

                    b.Navigation("SendPermissions");

                    b.Navigation("SerialProfiles");

                    b.Navigation("StatusChangerQualityControlSample");

                    b.Navigation("StockCheckingPersons");

                    b.Navigation("StockCheckings");

                    b.Navigation("StoreReceiptDeleteRequestConfirmationLogs");

                    b.Navigation("StoreReceiptDeleteRequests");

                    b.Navigation("StuffDefinitionRequestConfirmers");

                    b.Navigation("StuffDefinitionRequestRequesters");

                    b.Navigation("StuffDocuments");

                    b.Navigation("StuffFractionReportTemporaryStuffs");

                    b.Navigation("StuffPriceDiscrepancies");

                    b.Navigation("StuffPrices");

                    b.Navigation("StuffQualityControlObservations");

                    b.Navigation("StuffSerials");

                    b.Navigation("SuppliesPurchaserUsers");

                    b.Navigation("TagCountings");

                    b.Navigation("TestConditions");

                    b.Navigation("TicketComments");

                    b.Navigation("TicketFile");

                    b.Navigation("ToUserMessageRelations");

                    b.Navigation("TransactionBatches");

                    b.Navigation("UserAssetLogs");

                    b.Navigation("UserAssets");

                    b.Navigation("UserPosts");

                    b.Navigation("UserSettings");

                    b.Navigation("UserTokens");

                    b.Navigation("WrongDoerSerilReturnRequests");
                });

            modelBuilder.Entity("lena.Domains.UserGroup", b =>
                {
                    b.Navigation("LadingBlockers");

                    b.Navigation("Memberships");

                    b.Navigation("OrganizationPost");

                    b.Navigation("Permissions");

                    b.Navigation("ProductionLines");

                    b.Navigation("QualityControlAccepters");

                    b.Navigation("StuffPurchaseCategories");
                });

            modelBuilder.Entity("lena.Domains.Warehouse", b =>
                {
                    b.Navigation("BaseTransactions");

                    b.Navigation("ConsumerProductionLines");

                    b.Navigation("ConsumeWorkPlanSteps");

                    b.Navigation("ExitReceiptRequests");

                    b.Navigation("ExportGeneralStuffRequests");

                    b.Navigation("ExportStuffRequests");

                    b.Navigation("ExportWarehouseIssues");

                    b.Navigation("ImportGeneralStuffRequests");

                    b.Navigation("ImportStuffRequests");

                    b.Navigation("ImportWarehouseIssues");

                    b.Navigation("ManualTransactions");

                    b.Navigation("PartitionStuffSerials");

                    b.Navigation("ProducerProductionLines");

                    b.Navigation("ProductionLineRepairUnits");

                    b.Navigation("ProductionStuffDetails");

                    b.Navigation("ProductWorkPlanSteps");

                    b.Navigation("QtyCorrectionRequests");

                    b.Navigation("QualityControls");

                    b.Navigation("StockCheckingWarehouses");

                    b.Navigation("StockPlaces");

                    b.Navigation("StoreReceipts");

                    b.Navigation("StuffCategories");

                    b.Navigation("WarehouseAssets");

                    b.Navigation("WarehouseExitReceiptTypes");

                    b.Navigation("WarehouseStoreReceiptTypes");

                    b.Navigation("WarehouseStuffTypes");

                    b.Navigation("WarehouseTransactionLevels");
                });

            modelBuilder.Entity("lena.Domains.WarehouseFiscalPeriod", b =>
                {
                    b.Navigation("BaseTransactions");
                });

            modelBuilder.Entity("lena.Domains.WarrantyExpirationExceptionType", b =>
                {
                    b.Navigation("ConditionalQualityControls");
                });

            modelBuilder.Entity("lena.Domains.WorkPlan", b =>
                {
                    b.Navigation("WorkPlanSteps");
                });

            modelBuilder.Entity("lena.Domains.WorkPlanStep", b =>
                {
                    b.Navigation("OperationSequences");

                    b.Navigation("ProductionOrders");

                    b.Navigation("ProductionSchedules");
                });

            modelBuilder.Entity("lena.Domains.WorkShift", b =>
                {
                    b.Navigation("CalendarEvents");

                    b.Navigation("DepartmentWorkShifts");

                    b.Navigation("ProductionLineWorkShifts");
                });

            modelBuilder.Entity("lena.Domains.WorkStation", b =>
                {
                    b.Navigation("OperationSequences");

                    b.Navigation("WorkStationOperations");

                    b.Navigation("WorkStationParts");
                });

            modelBuilder.Entity("lena.Domains.WorkStationOperation", b =>
                {
                    b.Navigation("OperationSequences");
                });

            modelBuilder.Entity("lena.Domains.WorkStationPart", b =>
                {
                    b.Navigation("OperationSequences");
                });

            modelBuilder.Entity("lena.Domains.BankOrder", b =>
                {
                    b.Navigation("Allocations");

                    b.Navigation("BankOrderCosts");

                    b.Navigation("BankOrderCurrencySources");

                    b.Navigation("BankOrderDetails");

                    b.Navigation("BankOrderLogs");

                    b.Navigation("CurrentBankOrderLog");

                    b.Navigation("Enactment");

                    b.Navigation("FinancialDocumentBankOrders");

                    b.Navigation("Ladings");
                });

            modelBuilder.Entity("lena.Domains.Cargo", b =>
                {
                    b.Navigation("CargoCosts");

                    b.Navigation("CargoItems");
                });

            modelBuilder.Entity("lena.Domains.CargoItem", b =>
                {
                    b.Navigation("CargoCosts");

                    b.Navigation("CargoItemDetails");

                    b.Navigation("CargoItemLogs");

                    b.Navigation("CargoItemSummary");

                    b.Navigation("LadingItems");

                    b.Navigation("PurchaseSteps");

                    b.Navigation("Risks");
                });

            modelBuilder.Entity("lena.Domains.CargoItemDetail", b =>
                {
                    b.Navigation("CargoItemDetailSummary");

                    b.Navigation("LadingItemDetails");
                });

            modelBuilder.Entity("lena.Domains.CheckOrderItem", b =>
                {
                    b.Navigation("OrderItemSaleBlocks");

                    b.Navigation("ProductionRequests");
                });

            modelBuilder.Entity("lena.Domains.ConditionalQualityControl", b =>
                {
                    b.Navigation("ConditionalQualityControlItems");

                    b.Navigation("ResponseConditionalQualityControl");
                });

            modelBuilder.Entity("lena.Domains.CustomsDeclaration", b =>
                {
                    b.Navigation("Cottages");
                });

            modelBuilder.Entity("lena.Domains.EquivalentStuffUsage", b =>
                {
                    b.Navigation("EquivalentStuffUsageConfirmations");
                });

            modelBuilder.Entity("lena.Domains.ExitReceipt", b =>
                {
                    b.Navigation("ExitReceiptDeleteRequests");

                    b.Navigation("SendProducts");
                });

            modelBuilder.Entity("lena.Domains.ExitReceiptRequest", b =>
                {
                    b.Navigation("ExitReceiptRequestSummary");

                    b.Navigation("SendPermissions");
                });

            modelBuilder.Entity("lena.Domains.FinancialDocument", b =>
                {
                    b.Navigation("BankOrderIssues");

                    b.Navigation("FinanceItems");

                    b.Navigation("FinancialDocumentBankOrder");

                    b.Navigation("FinancialDocumentBeginning");

                    b.Navigation("FinancialDocumentCorrection");

                    b.Navigation("FinancialDocumentCost");

                    b.Navigation("FinancialDocumentDiscount");

                    b.Navigation("FinancialDocumentTransfer");
                });

            modelBuilder.Entity("lena.Domains.Lading", b =>
                {
                    b.Navigation("BankOrderCurrencySource");

                    b.Navigation("CurrentLadingBankOrderLog");

                    b.Navigation("CurrentLadingCustomhouseLog");

                    b.Navigation("LadingBankOrderLogs");

                    b.Navigation("LadingChangeRequests");

                    b.Navigation("LadingCosts");

                    b.Navigation("LadingCustomhouseLogs");

                    b.Navigation("LadingItems");
                });

            modelBuilder.Entity("lena.Domains.LadingItem", b =>
                {
                    b.Navigation("LadingCosts");

                    b.Navigation("LadingItemDetails");

                    b.Navigation("LadingItemSummary");

                    b.Navigation("NewShoppings");
                });

            modelBuilder.Entity("lena.Domains.LadingItemDetail", b =>
                {
                    b.Navigation("LadingItemDetailSummary");

                    b.Navigation("NewShoppingDetails");
                });

            modelBuilder.Entity("lena.Domains.NewShoppingDetail", b =>
                {
                    b.Navigation("NewShoppingDetailSummary");
                });

            modelBuilder.Entity("lena.Domains.OrderItem", b =>
                {
                    b.Navigation("OrderItemBlocks");

                    b.Navigation("OrderItemChangeRequests");

                    b.Navigation("OrderItemConfirmations");

                    b.Navigation("OrderItemSummary");
                });

            modelBuilder.Entity("lena.Domains.OrderItemChangeRequest", b =>
                {
                    b.Navigation("OrderItemChangeConfirmations");
                });

            modelBuilder.Entity("lena.Domains.OrderItemConfirmation", b =>
                {
                    b.Navigation("CheckOrderItems");
                });

            modelBuilder.Entity("lena.Domains.PartitionStuffSerial", b =>
                {
                    b.Navigation("ChildStuffSerials");
                });

            modelBuilder.Entity("lena.Domains.PreparingSending", b =>
                {
                    b.Navigation("PreparingSendingItems");

                    b.Navigation("SendProduct");
                });

            modelBuilder.Entity("lena.Domains.ProductionMaterialRequest", b =>
                {
                    b.Navigation("GeneralStuffRequests");

                    b.Navigation("ProductionMaterialRequestDetails");

                    b.Navigation("StuffRequests");
                });

            modelBuilder.Entity("lena.Domains.ProductionOrder", b =>
                {
                    b.Navigation("EquivalentStuffUsages");

                    b.Navigation("ProductionMaterialRequestDetails");

                    b.Navigation("ProductionMaterialRequests");

                    b.Navigation("ProductionOperators");

                    b.Navigation("ProductionOrderSummary");

                    b.Navigation("ProductionPerformanceInfoes");

                    b.Navigation("Productions");

                    b.Navigation("SerialFailedOperations");

                    b.Navigation("StuffSerials");
                });

            modelBuilder.Entity("lena.Domains.ProductionPlan", b =>
                {
                    b.Navigation("ProductionPlanDetails");

                    b.Navigation("ProductionPlanSummary");
                });

            modelBuilder.Entity("lena.Domains.ProductionPlanDetail", b =>
                {
                    b.Navigation("EquivalentStuffUsages");

                    b.Navigation("ProductionPlanDetailSummary");

                    b.Navigation("ProductionSchedules");
                });

            modelBuilder.Entity("lena.Domains.ProductionRequest", b =>
                {
                    b.Navigation("ProductionPlans");

                    b.Navigation("ProductionRequestSummary");
                });

            modelBuilder.Entity("lena.Domains.ProductionSchedule", b =>
                {
                    b.Navigation("ProductionOrders");

                    b.Navigation("ProductionScheduleSummary");
                });

            modelBuilder.Entity("lena.Domains.PurchaseOrder", b =>
                {
                    b.Navigation("CargoItems");

                    b.Navigation("EstimatedPurchasePrices");

                    b.Navigation("FinanceItems");

                    b.Navigation("PurchaseOrderCosts");

                    b.Navigation("PurchaseOrderDetails");

                    b.Navigation("PurchaseOrderDiscounts");

                    b.Navigation("PurchaseOrderStepDetails");

                    b.Navigation("PurchaseOrderSummary");

                    b.Navigation("Risks");

                    b.Navigation("StuffBasePrice");

                    b.Navigation("StuffPriceDiscrepancies");
                });

            modelBuilder.Entity("lena.Domains.PurchaseOrderDetail", b =>
                {
                    b.Navigation("CargoItemDetails");

                    b.Navigation("PurchaseOrderDetailSummary");
                });

            modelBuilder.Entity("lena.Domains.PurchaseOrderGroup", b =>
                {
                    b.Navigation("PurchaseOrderCosts");

                    b.Navigation("PurchaseOrderDiscounts");

                    b.Navigation("PurchaseOrders");
                });

            modelBuilder.Entity("lena.Domains.PurchaseRequest", b =>
                {
                    b.Navigation("ProvisionersCartItem");

                    b.Navigation("PurchaseOrderDetails");

                    b.Navigation("PurchaseRequestEditLogs");

                    b.Navigation("PurchaseRequestStepDetails");

                    b.Navigation("PurchaseRequestSummary");

                    b.Navigation("Risks");
                });

            modelBuilder.Entity("lena.Domains.QualityControl", b =>
                {
                    b.Navigation("GiveBackExitReceiptRequests");

                    b.Navigation("PaymentSuggestStatusLogs");

                    b.Navigation("PayRequest");

                    b.Navigation("QualityControlConfirmation");

                    b.Navigation("QualityControlItems");

                    b.Navigation("QualityControlSummary");
                });

            modelBuilder.Entity("lena.Domains.QualityControlConfirmation", b =>
                {
                    b.Navigation("ConditionalQualityControls");

                    b.Navigation("QualityControlConfirmationItems");

                    b.Navigation("QualityControlConfirmationTests");
                });

            modelBuilder.Entity("lena.Domains.QualityControlConfirmationItem", b =>
                {
                    b.Navigation("ConditionalQualityControlItems");
                });

            modelBuilder.Entity("lena.Domains.QualityControlItem", b =>
                {
                    b.Navigation("QualityControlConfirmationItem");

                    b.Navigation("QualityControlSamples");
                });

            modelBuilder.Entity("lena.Domains.Receipt", b =>
                {
                    b.Navigation("StoreReceipts");
                });

            modelBuilder.Entity("lena.Domains.RepairProductionFault", b =>
                {
                    b.Navigation("RepairProductionStuffDetails");
                });

            modelBuilder.Entity("lena.Domains.ReturnOfSale", b =>
                {
                    b.Navigation("QualityControlItems");

                    b.Navigation("RepairProductions");

                    b.Navigation("ReturnOfSaleStatusLogs");

                    b.Navigation("ReturnOfSaleSummary");
                });

            modelBuilder.Entity("lena.Domains.SendPermission", b =>
                {
                    b.Navigation("PreparingSendings");

                    b.Navigation("SendPermissionSummary");
                });

            modelBuilder.Entity("lena.Domains.SendProduct", b =>
                {
                    b.Navigation("ReturnOfSales");
                });

            modelBuilder.Entity("lena.Domains.StoreReceipt", b =>
                {
                    b.Navigation("PurchasePrices");

                    b.Navigation("ReceiptQualityControls");

                    b.Navigation("StoreReceiptDeleteRequest");

                    b.Navigation("StoreReceiptSerialProfile");

                    b.Navigation("StoreReceiptSummary");
                });

            modelBuilder.Entity("lena.Domains.StuffRequest", b =>
                {
                    b.Navigation("StuffRequestItems");
                });

            modelBuilder.Entity("lena.Domains.StuffRequestItem", b =>
                {
                    b.Navigation("ResponseStuffRequestItems");
                });

            modelBuilder.Entity("lena.Domains.StuffRequestMilestone", b =>
                {
                    b.Navigation("StuffRequestMilestoneDetails");
                });

            modelBuilder.Entity("lena.Domains.StuffRequestMilestoneDetail", b =>
                {
                    b.Navigation("StuffRequestMilestoneDetailSummary");
                });

            modelBuilder.Entity("lena.Domains.Transport", b =>
                {
                    b.Navigation("OutputTransport");
                });

            modelBuilder.Entity("lena.Domains.WarehouseIssue", b =>
                {
                    b.Navigation("ResponseWarehouseIssue");

                    b.Navigation("WarehouseIssueItems");
                });

            modelBuilder.Entity("lena.Domains.ScrumBackLog", b =>
                {
                    b.Navigation("ScrumTasks");
                });

            modelBuilder.Entity("lena.Domains.ScrumProject", b =>
                {
                    b.Navigation("ScrumSprints");
                });

            modelBuilder.Entity("lena.Domains.ScrumProjectGroup", b =>
                {
                    b.Navigation("ScrumProjects");
                });

            modelBuilder.Entity("lena.Domains.ScrumSprint", b =>
                {
                    b.Navigation("ScrumBackLogs");
                });

            modelBuilder.Entity("lena.Domains.MachineType", b =>
                {
                    b.Navigation("Machines");

                    b.Navigation("MachineTypeOperatorTypes");

                    b.Navigation("MachineTypeParameters");
                });

            modelBuilder.Entity("lena.Domains.OperatorType", b =>
                {
                    b.Navigation("EmployeeOperatorTypes");

                    b.Navigation("MachineTypeOperatorTypes");

                    b.Navigation("ProductionOperators");
                });

            modelBuilder.Entity("lena.Domains.NewShopping", b =>
                {
                    b.Navigation("NewShoppingDetails");
                });

            modelBuilder.Entity("lena.Domains.ReturnStoreReceipt", b =>
                {
                    b.Navigation("ReturnedExitReceiptRequests");

                    b.Navigation("ReturnOfSales");
                });

            modelBuilder.Entity("lena.Domains.PurchasePrice", b =>
                {
                    b.Navigation("ActiveForStoreReceipt");
                });

            modelBuilder.Entity("lena.Domains.StuffBasePrice", b =>
                {
                    b.Navigation("StuffBasePriceCustoms");

                    b.Navigation("StuffBasePriceTransport");
                });

            modelBuilder.Entity("lena.Domains.InboundCargo", b =>
                {
                    b.Navigation("InboundCargoCooperators");

                    b.Navigation("StoreReceipts");
                });

            modelBuilder.Entity("lena.Domains.OutboundCargo", b =>
                {
                    b.Navigation("ExitReceipts");
                });

            modelBuilder.Entity("lena.Domains.RequestWarehouseIssue", b =>
                {
                    b.Navigation("ResponseStuffRequestItems");
                });

            modelBuilder.Entity("lena.Domains.Project", b =>
                {
                    b.Navigation("ProjectRelatedPeoples");
                });

            modelBuilder.Entity("lena.Domains.ProjectHeader", b =>
                {
                    b.Navigation("Stuff");
                });
#pragma warning restore 612, 618
        }
    }
}
